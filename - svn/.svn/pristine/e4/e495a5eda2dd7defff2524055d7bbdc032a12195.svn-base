Public Class frmProductionData
    'Dim m_taEngineList As DataSet1TableAdapters.ENGINE_LISTTableAdapter

    

    Private Sub frmProductionData_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        m_dtWorkingString = Nothing
        m_dtWorkingInteger = Nothing
        m_dtWorkingDatetime = Nothing
        m_taSettingColumns = Nothing

        'MsgBox(modGlobalVariables.searchBy)


        If modGlobalVariables.searchBy = modGlobalVariables.SEARCH_BY.ENGINE_NO Then
            'm_dtEngineList = m_taEngineList.GetDataByEngineNo(modGlobalVariables.in_engineNo)
            m_dtEngineList = m_taEngineList.GetDataByEngineNo(modGlobalVariables.arrIn(0))

        ElseIf modGlobalVariables.searchBy = modGlobalVariables.SEARCH_BY.MODEL_CODE_LOT_NO Then
            'Dim m_taEngineList = New DataSet1TableAdapters.ENGINE_LISTTableAdapter
            'MsgBox(modGlobalVariables.arrIn(1))
            m_dtEngineList = m_taEngineList.GetDataByModelCodeLotNo(modGlobalVariables.arrIn(0), modGlobalVariables.arrIn(1))
            'm_dtEngineList = m_taEngineList.GetDataByEngineNo("NL9506")
        End If


        'm_dtWorkingString = m_taWorkingString.GetDataByWorkingTypeId(11)
        'm_dtWorkingInteger = m_taWorkingInteger.GetDataByWorkingTypeId(11)
        'm_dtWorkingDatetime = m_taWorkingDatetime.GetDataByWorkingTypeId(11)
        'm_dtSettingColumns = m_taSettingColumns.GetWorkingColumns(11)
        'Dim strHiddenColNames() As String = {"ENGINE_ID"}
        Dim strHiddenColNames() As String = {"ID"}

        Try
            LoadData(m_dtEngineList _
                                           , m_dtWorkingString _
                                           , m_dtWorkingInteger _
                                           , m_dtWorkingDatetime _
                                           , m_dtSettingColumns _
                                           , {"ID"} _
                                           , "WORKING_COLUMNS_ID" _
                                           , {"ENGINE_ID"} _
                                           , "DATA" _
                                           , strHiddenColNames)
        Catch ex As Exception
            modLogger.HandleException(ex, True)
        End Try
    End Sub

    Protected Overrides Sub InitializeVariables()
        ' Add any initialization after the InitializeComponent() call.
        If modGlobalVariables.tabletype = modGlobalVariables.TABLE2SHOW.ENGINE_LIST Then
            m_dtEngineList = New DataSet1.ENGINE_LISTDataTable
        End If

        m_dtWorkingString = New DataSet1.WORKING_DATA_STRDataTable
        m_dtWorkingInteger = New DataSet1.WORKING_DATA_INTDataTable
        m_dtWorkingDatetime = New DataSet1.WORKING_DATA_DATETIMEDataTable
        m_dtSettingColumns = New DataSet1.V_SETTING_COLUMNSDataTable
        'm_objPivotGrid = New ctrlPivotGrid
        If modGlobalVariables.tabletype = modGlobalVariables.TABLE2SHOW.ENGINE_LIST Then
            m_taEngineList = New DataSet1TableAdapters.ENGINE_LISTTableAdapter

            'm_taEngineList = DirectCast(New DataSet1TableAdapters.ENGINE_LISTTableAdapter, DataSet1TableAdapters.ENGINE_LISTTableAdapter)
            'Dim m_taEngineList = DirectCast(New DataSet1TableAdapters.ENGINE_LISTTableAdapter, DataSet1TableAdapters.ENGINE_LISTTableAdapter)
            'm_taEngineList.getdata
        End If

        m_taWorkingString = New DataSet1TableAdapters.WORKING_DATA_STRTableAdapter
        m_taWorkingInteger = New DataSet1TableAdapters.WORKING_DATA_INTTableAdapter
        m_taWorkingDatetime = New DataSet1TableAdapters.WORKING_DATA_DATETIMETableAdapter
        m_taSettingColumns = New DataSet1TableAdapters.V_SETTING_COLUMNSTableAdapter
    End Sub

End Class