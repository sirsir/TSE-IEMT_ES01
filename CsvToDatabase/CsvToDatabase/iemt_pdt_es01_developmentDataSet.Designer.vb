'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("iemt_pdt_es01_developmentDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class iemt_pdt_es01_developmentDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableBALL_ENGINE_LIST As BALL_ENGINE_LISTDataTable
    
    Private tableENGINE_LIST As ENGINE_LISTDataTable
    
    Private tableIMPORT_CELL_MAPPING As IMPORT_CELL_MAPPINGDataTable
    
    Private tableIMPORT_ENGINE_MAPPING As IMPORT_ENGINE_MAPPINGDataTable
    
    Private tableschema_migrations As schema_migrationsDataTable
    
    Private tableschema_migrations_comparer As schema_migrations_comparerDataTable
    
    Private tableTRACE_COLUMNS As TRACE_COLUMNSDataTable
    
    Private tableTRACE_DATA_DATETIME As TRACE_DATA_DATETIMEDataTable
    
    Private tableTRACE_DATA_INT As TRACE_DATA_INTDataTable
    
    Private tableTRACE_DATA_STR As TRACE_DATA_STRDataTable
    
    Private tableWORKING_COLUMNS As WORKING_COLUMNSDataTable
    
    Private tableWORKING_DATA_DATETIME As WORKING_DATA_DATETIMEDataTable
    
    Private tableWORKING_DATA_INT As WORKING_DATA_INTDataTable
    
    Private tableWORKING_DATA_STR As WORKING_DATA_STRDataTable
    
    Private tableWORKING_TYPE As WORKING_TYPEDataTable
    
    Private relationFK_TRACE_DATA_DATETIME_ENGINE_LIST As Global.System.Data.DataRelation
    
    Private relationFK_TRACE_DATA_DATETIME_TRACE_COLUMNS As Global.System.Data.DataRelation
    
    Private relationFK_TRACE_DATA_INT_ENGINE_LIST As Global.System.Data.DataRelation
    
    Private relationFK_TRACE_DATA_INT_TRACE_COLUMNS As Global.System.Data.DataRelation
    
    Private relationFK_TRACE_DATA_STR_ENGINE_LIST As Global.System.Data.DataRelation
    
    Private relationFK_TRACE_DATA_STR_TRACE_COLUMNS As Global.System.Data.DataRelation
    
    Private relationFK_WORKING_COLUMNS_WORKING_TYPE As Global.System.Data.DataRelation
    
    Private relationFK_WORKING_DATA_DATETIME_ENGINE_LIST As Global.System.Data.DataRelation
    
    Private relationFK_WORKING_DATA_DATETIME_WORKING_COLUMNS As Global.System.Data.DataRelation
    
    Private relationFK_WORKING_DATA_INT_ENGINE_LIST As Global.System.Data.DataRelation
    
    Private relationFK_WORKING_DATA_INT_WORKING_COLUMNS As Global.System.Data.DataRelation
    
    Private relationFK_WORKING_DATA_STR_ENGINE_LIST As Global.System.Data.DataRelation
    
    Private relationFK_WORKING_DATA_STR_WORKING_COLUMNS As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BALL_ENGINE_LIST")) Is Nothing) Then
                MyBase.Tables.Add(New BALL_ENGINE_LISTDataTable(ds.Tables("BALL_ENGINE_LIST")))
            End If
            If (Not (ds.Tables("ENGINE_LIST")) Is Nothing) Then
                MyBase.Tables.Add(New ENGINE_LISTDataTable(ds.Tables("ENGINE_LIST")))
            End If
            If (Not (ds.Tables("IMPORT_CELL_MAPPING")) Is Nothing) Then
                MyBase.Tables.Add(New IMPORT_CELL_MAPPINGDataTable(ds.Tables("IMPORT_CELL_MAPPING")))
            End If
            If (Not (ds.Tables("IMPORT_ENGINE_MAPPING")) Is Nothing) Then
                MyBase.Tables.Add(New IMPORT_ENGINE_MAPPINGDataTable(ds.Tables("IMPORT_ENGINE_MAPPING")))
            End If
            If (Not (ds.Tables("schema_migrations")) Is Nothing) Then
                MyBase.Tables.Add(New schema_migrationsDataTable(ds.Tables("schema_migrations")))
            End If
            If (Not (ds.Tables("schema_migrations_comparer")) Is Nothing) Then
                MyBase.Tables.Add(New schema_migrations_comparerDataTable(ds.Tables("schema_migrations_comparer")))
            End If
            If (Not (ds.Tables("TRACE_COLUMNS")) Is Nothing) Then
                MyBase.Tables.Add(New TRACE_COLUMNSDataTable(ds.Tables("TRACE_COLUMNS")))
            End If
            If (Not (ds.Tables("TRACE_DATA_DATETIME")) Is Nothing) Then
                MyBase.Tables.Add(New TRACE_DATA_DATETIMEDataTable(ds.Tables("TRACE_DATA_DATETIME")))
            End If
            If (Not (ds.Tables("TRACE_DATA_INT")) Is Nothing) Then
                MyBase.Tables.Add(New TRACE_DATA_INTDataTable(ds.Tables("TRACE_DATA_INT")))
            End If
            If (Not (ds.Tables("TRACE_DATA_STR")) Is Nothing) Then
                MyBase.Tables.Add(New TRACE_DATA_STRDataTable(ds.Tables("TRACE_DATA_STR")))
            End If
            If (Not (ds.Tables("WORKING_COLUMNS")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_COLUMNSDataTable(ds.Tables("WORKING_COLUMNS")))
            End If
            If (Not (ds.Tables("WORKING_DATA_DATETIME")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_DATA_DATETIMEDataTable(ds.Tables("WORKING_DATA_DATETIME")))
            End If
            If (Not (ds.Tables("WORKING_DATA_INT")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_DATA_INTDataTable(ds.Tables("WORKING_DATA_INT")))
            End If
            If (Not (ds.Tables("WORKING_DATA_STR")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_DATA_STRDataTable(ds.Tables("WORKING_DATA_STR")))
            End If
            If (Not (ds.Tables("WORKING_TYPE")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_TYPEDataTable(ds.Tables("WORKING_TYPE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BALL_ENGINE_LIST() As BALL_ENGINE_LISTDataTable
        Get
            Return Me.tableBALL_ENGINE_LIST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ENGINE_LIST() As ENGINE_LISTDataTable
        Get
            Return Me.tableENGINE_LIST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPORT_CELL_MAPPING() As IMPORT_CELL_MAPPINGDataTable
        Get
            Return Me.tableIMPORT_CELL_MAPPING
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPORT_ENGINE_MAPPING() As IMPORT_ENGINE_MAPPINGDataTable
        Get
            Return Me.tableIMPORT_ENGINE_MAPPING
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property schema_migrations() As schema_migrationsDataTable
        Get
            Return Me.tableschema_migrations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property schema_migrations_comparer() As schema_migrations_comparerDataTable
        Get
            Return Me.tableschema_migrations_comparer
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRACE_COLUMNS() As TRACE_COLUMNSDataTable
        Get
            Return Me.tableTRACE_COLUMNS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRACE_DATA_DATETIME() As TRACE_DATA_DATETIMEDataTable
        Get
            Return Me.tableTRACE_DATA_DATETIME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRACE_DATA_INT() As TRACE_DATA_INTDataTable
        Get
            Return Me.tableTRACE_DATA_INT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRACE_DATA_STR() As TRACE_DATA_STRDataTable
        Get
            Return Me.tableTRACE_DATA_STR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WORKING_COLUMNS() As WORKING_COLUMNSDataTable
        Get
            Return Me.tableWORKING_COLUMNS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WORKING_DATA_DATETIME() As WORKING_DATA_DATETIMEDataTable
        Get
            Return Me.tableWORKING_DATA_DATETIME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WORKING_DATA_INT() As WORKING_DATA_INTDataTable
        Get
            Return Me.tableWORKING_DATA_INT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WORKING_DATA_STR() As WORKING_DATA_STRDataTable
        Get
            Return Me.tableWORKING_DATA_STR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WORKING_TYPE() As WORKING_TYPEDataTable
        Get
            Return Me.tableWORKING_TYPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As iemt_pdt_es01_developmentDataSet = CType(MyBase.Clone,iemt_pdt_es01_developmentDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("BALL_ENGINE_LIST")) Is Nothing) Then
                MyBase.Tables.Add(New BALL_ENGINE_LISTDataTable(ds.Tables("BALL_ENGINE_LIST")))
            End If
            If (Not (ds.Tables("ENGINE_LIST")) Is Nothing) Then
                MyBase.Tables.Add(New ENGINE_LISTDataTable(ds.Tables("ENGINE_LIST")))
            End If
            If (Not (ds.Tables("IMPORT_CELL_MAPPING")) Is Nothing) Then
                MyBase.Tables.Add(New IMPORT_CELL_MAPPINGDataTable(ds.Tables("IMPORT_CELL_MAPPING")))
            End If
            If (Not (ds.Tables("IMPORT_ENGINE_MAPPING")) Is Nothing) Then
                MyBase.Tables.Add(New IMPORT_ENGINE_MAPPINGDataTable(ds.Tables("IMPORT_ENGINE_MAPPING")))
            End If
            If (Not (ds.Tables("schema_migrations")) Is Nothing) Then
                MyBase.Tables.Add(New schema_migrationsDataTable(ds.Tables("schema_migrations")))
            End If
            If (Not (ds.Tables("schema_migrations_comparer")) Is Nothing) Then
                MyBase.Tables.Add(New schema_migrations_comparerDataTable(ds.Tables("schema_migrations_comparer")))
            End If
            If (Not (ds.Tables("TRACE_COLUMNS")) Is Nothing) Then
                MyBase.Tables.Add(New TRACE_COLUMNSDataTable(ds.Tables("TRACE_COLUMNS")))
            End If
            If (Not (ds.Tables("TRACE_DATA_DATETIME")) Is Nothing) Then
                MyBase.Tables.Add(New TRACE_DATA_DATETIMEDataTable(ds.Tables("TRACE_DATA_DATETIME")))
            End If
            If (Not (ds.Tables("TRACE_DATA_INT")) Is Nothing) Then
                MyBase.Tables.Add(New TRACE_DATA_INTDataTable(ds.Tables("TRACE_DATA_INT")))
            End If
            If (Not (ds.Tables("TRACE_DATA_STR")) Is Nothing) Then
                MyBase.Tables.Add(New TRACE_DATA_STRDataTable(ds.Tables("TRACE_DATA_STR")))
            End If
            If (Not (ds.Tables("WORKING_COLUMNS")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_COLUMNSDataTable(ds.Tables("WORKING_COLUMNS")))
            End If
            If (Not (ds.Tables("WORKING_DATA_DATETIME")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_DATA_DATETIMEDataTable(ds.Tables("WORKING_DATA_DATETIME")))
            End If
            If (Not (ds.Tables("WORKING_DATA_INT")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_DATA_INTDataTable(ds.Tables("WORKING_DATA_INT")))
            End If
            If (Not (ds.Tables("WORKING_DATA_STR")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_DATA_STRDataTable(ds.Tables("WORKING_DATA_STR")))
            End If
            If (Not (ds.Tables("WORKING_TYPE")) Is Nothing) Then
                MyBase.Tables.Add(New WORKING_TYPEDataTable(ds.Tables("WORKING_TYPE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBALL_ENGINE_LIST = CType(MyBase.Tables("BALL_ENGINE_LIST"),BALL_ENGINE_LISTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBALL_ENGINE_LIST) Is Nothing) Then
                Me.tableBALL_ENGINE_LIST.InitVars
            End If
        End If
        Me.tableENGINE_LIST = CType(MyBase.Tables("ENGINE_LIST"),ENGINE_LISTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableENGINE_LIST) Is Nothing) Then
                Me.tableENGINE_LIST.InitVars
            End If
        End If
        Me.tableIMPORT_CELL_MAPPING = CType(MyBase.Tables("IMPORT_CELL_MAPPING"),IMPORT_CELL_MAPPINGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPORT_CELL_MAPPING) Is Nothing) Then
                Me.tableIMPORT_CELL_MAPPING.InitVars
            End If
        End If
        Me.tableIMPORT_ENGINE_MAPPING = CType(MyBase.Tables("IMPORT_ENGINE_MAPPING"),IMPORT_ENGINE_MAPPINGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPORT_ENGINE_MAPPING) Is Nothing) Then
                Me.tableIMPORT_ENGINE_MAPPING.InitVars
            End If
        End If
        Me.tableschema_migrations = CType(MyBase.Tables("schema_migrations"),schema_migrationsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableschema_migrations) Is Nothing) Then
                Me.tableschema_migrations.InitVars
            End If
        End If
        Me.tableschema_migrations_comparer = CType(MyBase.Tables("schema_migrations_comparer"),schema_migrations_comparerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableschema_migrations_comparer) Is Nothing) Then
                Me.tableschema_migrations_comparer.InitVars
            End If
        End If
        Me.tableTRACE_COLUMNS = CType(MyBase.Tables("TRACE_COLUMNS"),TRACE_COLUMNSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRACE_COLUMNS) Is Nothing) Then
                Me.tableTRACE_COLUMNS.InitVars
            End If
        End If
        Me.tableTRACE_DATA_DATETIME = CType(MyBase.Tables("TRACE_DATA_DATETIME"),TRACE_DATA_DATETIMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRACE_DATA_DATETIME) Is Nothing) Then
                Me.tableTRACE_DATA_DATETIME.InitVars
            End If
        End If
        Me.tableTRACE_DATA_INT = CType(MyBase.Tables("TRACE_DATA_INT"),TRACE_DATA_INTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRACE_DATA_INT) Is Nothing) Then
                Me.tableTRACE_DATA_INT.InitVars
            End If
        End If
        Me.tableTRACE_DATA_STR = CType(MyBase.Tables("TRACE_DATA_STR"),TRACE_DATA_STRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRACE_DATA_STR) Is Nothing) Then
                Me.tableTRACE_DATA_STR.InitVars
            End If
        End If
        Me.tableWORKING_COLUMNS = CType(MyBase.Tables("WORKING_COLUMNS"),WORKING_COLUMNSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWORKING_COLUMNS) Is Nothing) Then
                Me.tableWORKING_COLUMNS.InitVars
            End If
        End If
        Me.tableWORKING_DATA_DATETIME = CType(MyBase.Tables("WORKING_DATA_DATETIME"),WORKING_DATA_DATETIMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWORKING_DATA_DATETIME) Is Nothing) Then
                Me.tableWORKING_DATA_DATETIME.InitVars
            End If
        End If
        Me.tableWORKING_DATA_INT = CType(MyBase.Tables("WORKING_DATA_INT"),WORKING_DATA_INTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWORKING_DATA_INT) Is Nothing) Then
                Me.tableWORKING_DATA_INT.InitVars
            End If
        End If
        Me.tableWORKING_DATA_STR = CType(MyBase.Tables("WORKING_DATA_STR"),WORKING_DATA_STRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWORKING_DATA_STR) Is Nothing) Then
                Me.tableWORKING_DATA_STR.InitVars
            End If
        End If
        Me.tableWORKING_TYPE = CType(MyBase.Tables("WORKING_TYPE"),WORKING_TYPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWORKING_TYPE) Is Nothing) Then
                Me.tableWORKING_TYPE.InitVars
            End If
        End If
        Me.relationFK_TRACE_DATA_DATETIME_ENGINE_LIST = Me.Relations("FK_TRACE_DATA_DATETIME_ENGINE_LIST")
        Me.relationFK_TRACE_DATA_DATETIME_TRACE_COLUMNS = Me.Relations("FK_TRACE_DATA_DATETIME_TRACE_COLUMNS")
        Me.relationFK_TRACE_DATA_INT_ENGINE_LIST = Me.Relations("FK_TRACE_DATA_INT_ENGINE_LIST")
        Me.relationFK_TRACE_DATA_INT_TRACE_COLUMNS = Me.Relations("FK_TRACE_DATA_INT_TRACE_COLUMNS")
        Me.relationFK_TRACE_DATA_STR_ENGINE_LIST = Me.Relations("FK_TRACE_DATA_STR_ENGINE_LIST")
        Me.relationFK_TRACE_DATA_STR_TRACE_COLUMNS = Me.Relations("FK_TRACE_DATA_STR_TRACE_COLUMNS")
        Me.relationFK_WORKING_COLUMNS_WORKING_TYPE = Me.Relations("FK_WORKING_COLUMNS_WORKING_TYPE")
        Me.relationFK_WORKING_DATA_DATETIME_ENGINE_LIST = Me.Relations("FK_WORKING_DATA_DATETIME_ENGINE_LIST")
        Me.relationFK_WORKING_DATA_DATETIME_WORKING_COLUMNS = Me.Relations("FK_WORKING_DATA_DATETIME_WORKING_COLUMNS")
        Me.relationFK_WORKING_DATA_INT_ENGINE_LIST = Me.Relations("FK_WORKING_DATA_INT_ENGINE_LIST")
        Me.relationFK_WORKING_DATA_INT_WORKING_COLUMNS = Me.Relations("FK_WORKING_DATA_INT_WORKING_COLUMNS")
        Me.relationFK_WORKING_DATA_STR_ENGINE_LIST = Me.Relations("FK_WORKING_DATA_STR_ENGINE_LIST")
        Me.relationFK_WORKING_DATA_STR_WORKING_COLUMNS = Me.Relations("FK_WORKING_DATA_STR_WORKING_COLUMNS")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "iemt_pdt_es01_developmentDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/iemt_pdt_es01_developmentDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBALL_ENGINE_LIST = New BALL_ENGINE_LISTDataTable()
        MyBase.Tables.Add(Me.tableBALL_ENGINE_LIST)
        Me.tableENGINE_LIST = New ENGINE_LISTDataTable()
        MyBase.Tables.Add(Me.tableENGINE_LIST)
        Me.tableIMPORT_CELL_MAPPING = New IMPORT_CELL_MAPPINGDataTable()
        MyBase.Tables.Add(Me.tableIMPORT_CELL_MAPPING)
        Me.tableIMPORT_ENGINE_MAPPING = New IMPORT_ENGINE_MAPPINGDataTable()
        MyBase.Tables.Add(Me.tableIMPORT_ENGINE_MAPPING)
        Me.tableschema_migrations = New schema_migrationsDataTable()
        MyBase.Tables.Add(Me.tableschema_migrations)
        Me.tableschema_migrations_comparer = New schema_migrations_comparerDataTable()
        MyBase.Tables.Add(Me.tableschema_migrations_comparer)
        Me.tableTRACE_COLUMNS = New TRACE_COLUMNSDataTable()
        MyBase.Tables.Add(Me.tableTRACE_COLUMNS)
        Me.tableTRACE_DATA_DATETIME = New TRACE_DATA_DATETIMEDataTable()
        MyBase.Tables.Add(Me.tableTRACE_DATA_DATETIME)
        Me.tableTRACE_DATA_INT = New TRACE_DATA_INTDataTable()
        MyBase.Tables.Add(Me.tableTRACE_DATA_INT)
        Me.tableTRACE_DATA_STR = New TRACE_DATA_STRDataTable()
        MyBase.Tables.Add(Me.tableTRACE_DATA_STR)
        Me.tableWORKING_COLUMNS = New WORKING_COLUMNSDataTable()
        MyBase.Tables.Add(Me.tableWORKING_COLUMNS)
        Me.tableWORKING_DATA_DATETIME = New WORKING_DATA_DATETIMEDataTable()
        MyBase.Tables.Add(Me.tableWORKING_DATA_DATETIME)
        Me.tableWORKING_DATA_INT = New WORKING_DATA_INTDataTable()
        MyBase.Tables.Add(Me.tableWORKING_DATA_INT)
        Me.tableWORKING_DATA_STR = New WORKING_DATA_STRDataTable()
        MyBase.Tables.Add(Me.tableWORKING_DATA_STR)
        Me.tableWORKING_TYPE = New WORKING_TYPEDataTable()
        MyBase.Tables.Add(Me.tableWORKING_TYPE)
        Me.relationFK_TRACE_DATA_DATETIME_ENGINE_LIST = New Global.System.Data.DataRelation("FK_TRACE_DATA_DATETIME_ENGINE_LIST", New Global.System.Data.DataColumn() {Me.tableENGINE_LIST.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRACE_DATA_DATETIME.ENGINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_TRACE_DATA_DATETIME_ENGINE_LIST)
        Me.relationFK_TRACE_DATA_DATETIME_TRACE_COLUMNS = New Global.System.Data.DataRelation("FK_TRACE_DATA_DATETIME_TRACE_COLUMNS", New Global.System.Data.DataColumn() {Me.tableTRACE_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRACE_DATA_DATETIME.TRACE_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_TRACE_DATA_DATETIME_TRACE_COLUMNS)
        Me.relationFK_TRACE_DATA_INT_ENGINE_LIST = New Global.System.Data.DataRelation("FK_TRACE_DATA_INT_ENGINE_LIST", New Global.System.Data.DataColumn() {Me.tableENGINE_LIST.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRACE_DATA_INT.ENGINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_TRACE_DATA_INT_ENGINE_LIST)
        Me.relationFK_TRACE_DATA_INT_TRACE_COLUMNS = New Global.System.Data.DataRelation("FK_TRACE_DATA_INT_TRACE_COLUMNS", New Global.System.Data.DataColumn() {Me.tableTRACE_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRACE_DATA_INT.TRACE_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_TRACE_DATA_INT_TRACE_COLUMNS)
        Me.relationFK_TRACE_DATA_STR_ENGINE_LIST = New Global.System.Data.DataRelation("FK_TRACE_DATA_STR_ENGINE_LIST", New Global.System.Data.DataColumn() {Me.tableENGINE_LIST.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRACE_DATA_STR.ENGINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_TRACE_DATA_STR_ENGINE_LIST)
        Me.relationFK_TRACE_DATA_STR_TRACE_COLUMNS = New Global.System.Data.DataRelation("FK_TRACE_DATA_STR_TRACE_COLUMNS", New Global.System.Data.DataColumn() {Me.tableTRACE_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRACE_DATA_STR.TRACE_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_TRACE_DATA_STR_TRACE_COLUMNS)
        Me.relationFK_WORKING_COLUMNS_WORKING_TYPE = New Global.System.Data.DataRelation("FK_WORKING_COLUMNS_WORKING_TYPE", New Global.System.Data.DataColumn() {Me.tableWORKING_TYPE.IDColumn}, New Global.System.Data.DataColumn() {Me.tableWORKING_COLUMNS.WORKING_TYPE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_WORKING_COLUMNS_WORKING_TYPE)
        Me.relationFK_WORKING_DATA_DATETIME_ENGINE_LIST = New Global.System.Data.DataRelation("FK_WORKING_DATA_DATETIME_ENGINE_LIST", New Global.System.Data.DataColumn() {Me.tableENGINE_LIST.IDColumn}, New Global.System.Data.DataColumn() {Me.tableWORKING_DATA_DATETIME.ENGINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_WORKING_DATA_DATETIME_ENGINE_LIST)
        Me.relationFK_WORKING_DATA_DATETIME_WORKING_COLUMNS = New Global.System.Data.DataRelation("FK_WORKING_DATA_DATETIME_WORKING_COLUMNS", New Global.System.Data.DataColumn() {Me.tableWORKING_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableWORKING_DATA_DATETIME.WORKING_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_WORKING_DATA_DATETIME_WORKING_COLUMNS)
        Me.relationFK_WORKING_DATA_INT_ENGINE_LIST = New Global.System.Data.DataRelation("FK_WORKING_DATA_INT_ENGINE_LIST", New Global.System.Data.DataColumn() {Me.tableENGINE_LIST.IDColumn}, New Global.System.Data.DataColumn() {Me.tableWORKING_DATA_INT.ENGINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_WORKING_DATA_INT_ENGINE_LIST)
        Me.relationFK_WORKING_DATA_INT_WORKING_COLUMNS = New Global.System.Data.DataRelation("FK_WORKING_DATA_INT_WORKING_COLUMNS", New Global.System.Data.DataColumn() {Me.tableWORKING_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableWORKING_DATA_INT.WORKING_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_WORKING_DATA_INT_WORKING_COLUMNS)
        Me.relationFK_WORKING_DATA_STR_ENGINE_LIST = New Global.System.Data.DataRelation("FK_WORKING_DATA_STR_ENGINE_LIST", New Global.System.Data.DataColumn() {Me.tableENGINE_LIST.IDColumn}, New Global.System.Data.DataColumn() {Me.tableWORKING_DATA_STR.ENGINE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_WORKING_DATA_STR_ENGINE_LIST)
        Me.relationFK_WORKING_DATA_STR_WORKING_COLUMNS = New Global.System.Data.DataRelation("FK_WORKING_DATA_STR_WORKING_COLUMNS", New Global.System.Data.DataColumn() {Me.tableWORKING_COLUMNS.IDColumn}, New Global.System.Data.DataColumn() {Me.tableWORKING_DATA_STR.WORKING_COLUMNS_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_WORKING_DATA_STR_WORKING_COLUMNS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeBALL_ENGINE_LIST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeENGINE_LIST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeIMPORT_CELL_MAPPING() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeIMPORT_ENGINE_MAPPING() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeschema_migrations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeschema_migrations_comparer() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTRACE_COLUMNS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTRACE_DATA_DATETIME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTRACE_DATA_INT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTRACE_DATA_STR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWORKING_COLUMNS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWORKING_DATA_DATETIME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWORKING_DATA_INT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWORKING_DATA_STR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWORKING_TYPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub BALL_ENGINE_LISTRowChangeEventHandler(ByVal sender As Object, ByVal e As BALL_ENGINE_LISTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ENGINE_LISTRowChangeEventHandler(ByVal sender As Object, ByVal e As ENGINE_LISTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub IMPORT_CELL_MAPPINGRowChangeEventHandler(ByVal sender As Object, ByVal e As IMPORT_CELL_MAPPINGRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub IMPORT_ENGINE_MAPPINGRowChangeEventHandler(ByVal sender As Object, ByVal e As IMPORT_ENGINE_MAPPINGRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub schema_migrationsRowChangeEventHandler(ByVal sender As Object, ByVal e As schema_migrationsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub schema_migrations_comparerRowChangeEventHandler(ByVal sender As Object, ByVal e As schema_migrations_comparerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TRACE_COLUMNSRowChangeEventHandler(ByVal sender As Object, ByVal e As TRACE_COLUMNSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TRACE_DATA_DATETIMERowChangeEventHandler(ByVal sender As Object, ByVal e As TRACE_DATA_DATETIMERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TRACE_DATA_INTRowChangeEventHandler(ByVal sender As Object, ByVal e As TRACE_DATA_INTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TRACE_DATA_STRRowChangeEventHandler(ByVal sender As Object, ByVal e As TRACE_DATA_STRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WORKING_COLUMNSRowChangeEventHandler(ByVal sender As Object, ByVal e As WORKING_COLUMNSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WORKING_DATA_DATETIMERowChangeEventHandler(ByVal sender As Object, ByVal e As WORKING_DATA_DATETIMERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WORKING_DATA_INTRowChangeEventHandler(ByVal sender As Object, ByVal e As WORKING_DATA_INTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WORKING_DATA_STRRowChangeEventHandler(ByVal sender As Object, ByVal e As WORKING_DATA_STRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WORKING_TYPERowChangeEventHandler(ByVal sender As Object, ByVal e As WORKING_TYPERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BALL_ENGINE_LISTDataTable
        Inherits Global.System.Data.TypedTableBase(Of BALL_ENGINE_LISTRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnENGINE_TYPE As Global.System.Data.DataColumn
        
        Private columnENGINE_NO As Global.System.Data.DataColumn
        
        Private columnENGINE_ASM_NO As Global.System.Data.DataColumn
        
        Private columnBOOK As Global.System.Data.DataColumn
        
        Private columnYEAR As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT_NO As Global.System.Data.DataColumn
        
        Private columnAT_MT As Global.System.Data.DataColumn
        
        Private columnEMISSION As Global.System.Data.DataColumn
        
        Private columnINJ_MODEL_CODE As Global.System.Data.DataColumn
        
        Private columnSPARE_001 As Global.System.Data.DataColumn
        
        Private columnSPARE_002 As Global.System.Data.DataColumn
        
        Private columnSPARE_003 As Global.System.Data.DataColumn
        
        Private columnSPARE_004 As Global.System.Data.DataColumn
        
        Private columnSPARE_005 As Global.System.Data.DataColumn
        
        Private columnSPARE_006 As Global.System.Data.DataColumn
        
        Private columnSPARE_007 As Global.System.Data.DataColumn
        
        Private columnSPARE_008 As Global.System.Data.DataColumn
        
        Private columnSPARE_009 As Global.System.Data.DataColumn
        
        Private columnSPARE_010 As Global.System.Data.DataColumn
        
        Private columnSPARE_011 As Global.System.Data.DataColumn
        
        Private columnSPARE_012 As Global.System.Data.DataColumn
        
        Private columnSPARE_013 As Global.System.Data.DataColumn
        
        Private columnSPARE_014 As Global.System.Data.DataColumn
        
        Private columnSPARE_015 As Global.System.Data.DataColumn
        
        Private columnSPARE_016 As Global.System.Data.DataColumn
        
        Private columnSPARE_017 As Global.System.Data.DataColumn
        
        Private columnSB_DATA_SB_PARTS_NO As Global.System.Data.DataColumn
        
        Private columnSB_DATA_SB_SERIAL_NO As Global.System.Data.DataColumn
        
        Private columnSB_DATA_GASKET_GRADE As Global.System.Data.DataColumn
        
        Private columnLINE_ON_TIME As Global.System.Data.DataColumn
        
        Private columnLINE_OFF_TIME As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_BCT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_CRT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_CTM As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_SPARE01 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_SPARE02 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_SPARE03 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_CCT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_DPT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_FWT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_SPARE01 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_SPARE02 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_SPARE03 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_HDT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_CCT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_HCT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_PPT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_SPARE01 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_SPARE02 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_SPARE03 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_SPARE04 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION01 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION02 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION03 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION04 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION05 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION06 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION_TIME01 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION11 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION12 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION13 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION14 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION15 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION16 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION_TIME02 As Global.System.Data.DataColumn
        
        Private columnCREATED_BY As Global.System.Data.DataColumn
        
        Private columnUPDATED_BY As Global.System.Data.DataColumn
        
        Private columnCREATED_WHEN As Global.System.Data.DataColumn
        
        Private columnUPDATED_WHEN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BALL_ENGINE_LIST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_ASM_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_ASM_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BOOKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOOK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UNIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AT_MTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAT_MT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMISSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMISSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INJ_MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINJ_MODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_001Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_001
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_002Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_002
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_003Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_003
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_004Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_004
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_005Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_005
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_006Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_006
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_007Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_007
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_008Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_008
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_009Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_009
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_010Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_010
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_011Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_011
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_012Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_012
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_013Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_013
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_014Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_014
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_015Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_015
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_016Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_016
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_017Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_017
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SB_DATA_SB_PARTS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSB_DATA_SB_PARTS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SB_DATA_SB_SERIAL_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSB_DATA_SB_SERIAL_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SB_DATA_GASKET_GRADEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSB_DATA_GASKET_GRADE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LINE_ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE_ON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LINE_OFF_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE_OFF_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_BCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_BCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_CRTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_CRT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_CTMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_CTM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_SPARE01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_SPARE01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_SPARE02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_SPARE02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_SPARE03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_SPARE03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_CCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_CCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_DPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_DPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_FWTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_FWT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_SPARE01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_SPARE01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_SPARE02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_SPARE02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_SPARE03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_SPARE03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_HDTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_HDT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_CCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_CCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_HCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_HCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_PPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_PPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_SPARE01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_SPARE01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_SPARE02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_SPARE02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_SPARE03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_SPARE03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_SPARE04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_SPARE04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION06Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION06
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION_TIME01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION_TIME01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION16Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION16
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION_TIME02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION_TIME02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_BYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_BY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_BYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_BY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_WHENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_WHEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_WHENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_WHEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BALL_ENGINE_LISTRow
            Get
                Return CType(Me.Rows(index),BALL_ENGINE_LISTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BALL_ENGINE_LISTRowChanging As BALL_ENGINE_LISTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BALL_ENGINE_LISTRowChanged As BALL_ENGINE_LISTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BALL_ENGINE_LISTRowDeleting As BALL_ENGINE_LISTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BALL_ENGINE_LISTRowDeleted As BALL_ENGINE_LISTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddBALL_ENGINE_LISTRow(ByVal row As BALL_ENGINE_LISTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddBALL_ENGINE_LISTRow( _
                    ByVal ENGINE_TYPE As String,  _
                    ByVal ENGINE_NO As String,  _
                    ByVal ENGINE_ASM_NO As String,  _
                    ByVal BOOK As String,  _
                    ByVal YEAR As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT_NO As String,  _
                    ByVal AT_MT As String,  _
                    ByVal EMISSION As String,  _
                    ByVal INJ_MODEL_CODE As String,  _
                    ByVal SPARE_001 As String,  _
                    ByVal SPARE_002 As String,  _
                    ByVal SPARE_003 As String,  _
                    ByVal SPARE_004 As String,  _
                    ByVal SPARE_005 As String,  _
                    ByVal SPARE_006 As String,  _
                    ByVal SPARE_007 As String,  _
                    ByVal SPARE_008 As String,  _
                    ByVal SPARE_009 As String,  _
                    ByVal SPARE_010 As String,  _
                    ByVal SPARE_011 As String,  _
                    ByVal SPARE_012 As String,  _
                    ByVal SPARE_013 As String,  _
                    ByVal SPARE_014 As String,  _
                    ByVal SPARE_015 As String,  _
                    ByVal SPARE_016 As String,  _
                    ByVal SPARE_017 As String,  _
                    ByVal SB_DATA_SB_PARTS_NO As String,  _
                    ByVal SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal SB_DATA_GASKET_GRADE As String,  _
                    ByVal LINE_ON_TIME As Date,  _
                    ByVal LINE_OFF_TIME As Date,  _
                    ByVal RPCOCF_SBLO_BCT As String,  _
                    ByVal RPCOCF_SBLO_CRT As String,  _
                    ByVal RPCOCF_SBLO_CTM As String,  _
                    ByVal RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MALO_CCT As String,  _
                    ByVal RPCOCF_MALO_DPT As String,  _
                    ByVal RPCOCF_MALO_FWT As String,  _
                    ByVal RPCOCF_MALO_SPARE01 As String,  _
                    ByVal RPCOCF_MALO_SPARE02 As String,  _
                    ByVal RPCOCF_MALO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_HDT As String,  _
                    ByVal RPCOCF_MBLO_CCT As String,  _
                    ByVal RPCOCF_MBLO_HCT As String,  _
                    ByVal RPCOCF_MBLO_PPT As String,  _
                    ByVal RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal INSPSJ_INSPECTION01 As String,  _
                    ByVal INSPSJ_INSPECTION02 As String,  _
                    ByVal INSPSJ_INSPECTION03 As String,  _
                    ByVal INSPSJ_INSPECTION04 As String,  _
                    ByVal INSPSJ_INSPECTION05 As String,  _
                    ByVal INSPSJ_INSPECTION06 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal INSPSJ_INSPECTION11 As String,  _
                    ByVal INSPSJ_INSPECTION12 As String,  _
                    ByVal INSPSJ_INSPECTION13 As String,  _
                    ByVal INSPSJ_INSPECTION14 As String,  _
                    ByVal INSPSJ_INSPECTION15 As String,  _
                    ByVal INSPSJ_INSPECTION16 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal CREATED_BY As String,  _
                    ByVal UPDATED_BY As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal UPDATED_WHEN As Date) As BALL_ENGINE_LISTRow
            Dim rowBALL_ENGINE_LISTRow As BALL_ENGINE_LISTRow = CType(Me.NewRow,BALL_ENGINE_LISTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ENGINE_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YEAR, MODEL_CODE, LOT_NO, UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CODE, SPARE_001, SPARE_002, SPARE_003, SPARE_004, SPARE_005, SPARE_006, SPARE_007, SPARE_008, SPARE_009, SPARE_010, SPARE_011, SPARE_012, SPARE_013, SPARE_014, SPARE_015, SPARE_016, SPARE_017, SB_DATA_SB_PARTS_NO, SB_DATA_SB_SERIAL_NO, SB_DATA_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TIME, RPCOCF_SBLO_BCT, RPCOCF_SBLO_CRT, RPCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCOCF_SBLO_SPARE02, RPCOCF_SBLO_SPARE03, RPCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_MALO_FWT, RPCOCF_MALO_SPARE01, RPCOCF_MALO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_MBLO_HDT, RPCOCF_MBLO_CCT, RPCOCF_MBLO_HCT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01, RPCOCF_MBLO_SPARE02, RPCOCF_MBLO_SPARE03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTION01, INSPSJ_INSPECTION02, INSPSJ_INSPECTION03, INSPSJ_INSPECTION04, INSPSJ_INSPECTION05, INSPSJ_INSPECTION06, INSPSJ_INSPECTION_TIME01, INSPSJ_INSPECTION11, INSPSJ_INSPECTION12, INSPSJ_INSPECTION13, INSPSJ_INSPECTION14, INSPSJ_INSPECTION15, INSPSJ_INSPECTION16, INSPSJ_INSPECTION_TIME02, CREATED_BY, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN}
            rowBALL_ENGINE_LISTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBALL_ENGINE_LISTRow)
            Return rowBALL_ENGINE_LISTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As BALL_ENGINE_LISTRow
            Return CType(Me.Rows.Find(New Object() {ID}),BALL_ENGINE_LISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BALL_ENGINE_LISTDataTable = CType(MyBase.Clone,BALL_ENGINE_LISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BALL_ENGINE_LISTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnENGINE_TYPE = MyBase.Columns("ENGINE_TYPE")
            Me.columnENGINE_NO = MyBase.Columns("ENGINE_NO")
            Me.columnENGINE_ASM_NO = MyBase.Columns("ENGINE_ASM_NO")
            Me.columnBOOK = MyBase.Columns("BOOK")
            Me.columnYEAR = MyBase.Columns("YEAR")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT_NO = MyBase.Columns("UNIT_NO")
            Me.columnAT_MT = MyBase.Columns("AT_MT")
            Me.columnEMISSION = MyBase.Columns("EMISSION")
            Me.columnINJ_MODEL_CODE = MyBase.Columns("INJ_MODEL_CODE")
            Me.columnSPARE_001 = MyBase.Columns("SPARE_001")
            Me.columnSPARE_002 = MyBase.Columns("SPARE_002")
            Me.columnSPARE_003 = MyBase.Columns("SPARE_003")
            Me.columnSPARE_004 = MyBase.Columns("SPARE_004")
            Me.columnSPARE_005 = MyBase.Columns("SPARE_005")
            Me.columnSPARE_006 = MyBase.Columns("SPARE_006")
            Me.columnSPARE_007 = MyBase.Columns("SPARE_007")
            Me.columnSPARE_008 = MyBase.Columns("SPARE_008")
            Me.columnSPARE_009 = MyBase.Columns("SPARE_009")
            Me.columnSPARE_010 = MyBase.Columns("SPARE_010")
            Me.columnSPARE_011 = MyBase.Columns("SPARE_011")
            Me.columnSPARE_012 = MyBase.Columns("SPARE_012")
            Me.columnSPARE_013 = MyBase.Columns("SPARE_013")
            Me.columnSPARE_014 = MyBase.Columns("SPARE_014")
            Me.columnSPARE_015 = MyBase.Columns("SPARE_015")
            Me.columnSPARE_016 = MyBase.Columns("SPARE_016")
            Me.columnSPARE_017 = MyBase.Columns("SPARE_017")
            Me.columnSB_DATA_SB_PARTS_NO = MyBase.Columns("SB_DATA_SB_PARTS_NO")
            Me.columnSB_DATA_SB_SERIAL_NO = MyBase.Columns("SB_DATA_SB_SERIAL_NO")
            Me.columnSB_DATA_GASKET_GRADE = MyBase.Columns("SB_DATA_GASKET_GRADE")
            Me.columnLINE_ON_TIME = MyBase.Columns("LINE_ON_TIME")
            Me.columnLINE_OFF_TIME = MyBase.Columns("LINE_OFF_TIME")
            Me.columnRPCOCF_SBLO_BCT = MyBase.Columns("RPCOCF_SBLO_BCT")
            Me.columnRPCOCF_SBLO_CRT = MyBase.Columns("RPCOCF_SBLO_CRT")
            Me.columnRPCOCF_SBLO_CTM = MyBase.Columns("RPCOCF_SBLO_CTM")
            Me.columnRPCOCF_SBLO_SPARE01 = MyBase.Columns("RPCOCF_SBLO_SPARE01")
            Me.columnRPCOCF_SBLO_SPARE02 = MyBase.Columns("RPCOCF_SBLO_SPARE02")
            Me.columnRPCOCF_SBLO_SPARE03 = MyBase.Columns("RPCOCF_SBLO_SPARE03")
            Me.columnRPCOCF_MALO_CCT = MyBase.Columns("RPCOCF_MALO_CCT")
            Me.columnRPCOCF_MALO_DPT = MyBase.Columns("RPCOCF_MALO_DPT")
            Me.columnRPCOCF_MALO_FWT = MyBase.Columns("RPCOCF_MALO_FWT")
            Me.columnRPCOCF_MALO_SPARE01 = MyBase.Columns("RPCOCF_MALO_SPARE01")
            Me.columnRPCOCF_MALO_SPARE02 = MyBase.Columns("RPCOCF_MALO_SPARE02")
            Me.columnRPCOCF_MALO_SPARE03 = MyBase.Columns("RPCOCF_MALO_SPARE03")
            Me.columnRPCOCF_MBLO_HDT = MyBase.Columns("RPCOCF_MBLO_HDT")
            Me.columnRPCOCF_MBLO_CCT = MyBase.Columns("RPCOCF_MBLO_CCT")
            Me.columnRPCOCF_MBLO_HCT = MyBase.Columns("RPCOCF_MBLO_HCT")
            Me.columnRPCOCF_MBLO_PPT = MyBase.Columns("RPCOCF_MBLO_PPT")
            Me.columnRPCOCF_MBLO_SPARE01 = MyBase.Columns("RPCOCF_MBLO_SPARE01")
            Me.columnRPCOCF_MBLO_SPARE02 = MyBase.Columns("RPCOCF_MBLO_SPARE02")
            Me.columnRPCOCF_MBLO_SPARE03 = MyBase.Columns("RPCOCF_MBLO_SPARE03")
            Me.columnRPCOCF_MBLO_SPARE04 = MyBase.Columns("RPCOCF_MBLO_SPARE04")
            Me.columnINSPSJ_INSPECTION01 = MyBase.Columns("INSPSJ_INSPECTION01")
            Me.columnINSPSJ_INSPECTION02 = MyBase.Columns("INSPSJ_INSPECTION02")
            Me.columnINSPSJ_INSPECTION03 = MyBase.Columns("INSPSJ_INSPECTION03")
            Me.columnINSPSJ_INSPECTION04 = MyBase.Columns("INSPSJ_INSPECTION04")
            Me.columnINSPSJ_INSPECTION05 = MyBase.Columns("INSPSJ_INSPECTION05")
            Me.columnINSPSJ_INSPECTION06 = MyBase.Columns("INSPSJ_INSPECTION06")
            Me.columnINSPSJ_INSPECTION_TIME01 = MyBase.Columns("INSPSJ_INSPECTION_TIME01")
            Me.columnINSPSJ_INSPECTION11 = MyBase.Columns("INSPSJ_INSPECTION11")
            Me.columnINSPSJ_INSPECTION12 = MyBase.Columns("INSPSJ_INSPECTION12")
            Me.columnINSPSJ_INSPECTION13 = MyBase.Columns("INSPSJ_INSPECTION13")
            Me.columnINSPSJ_INSPECTION14 = MyBase.Columns("INSPSJ_INSPECTION14")
            Me.columnINSPSJ_INSPECTION15 = MyBase.Columns("INSPSJ_INSPECTION15")
            Me.columnINSPSJ_INSPECTION16 = MyBase.Columns("INSPSJ_INSPECTION16")
            Me.columnINSPSJ_INSPECTION_TIME02 = MyBase.Columns("INSPSJ_INSPECTION_TIME02")
            Me.columnCREATED_BY = MyBase.Columns("CREATED_BY")
            Me.columnUPDATED_BY = MyBase.Columns("UPDATED_BY")
            Me.columnCREATED_WHEN = MyBase.Columns("CREATED_WHEN")
            Me.columnUPDATED_WHEN = MyBase.Columns("UPDATED_WHEN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnENGINE_TYPE = New Global.System.Data.DataColumn("ENGINE_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_TYPE)
            Me.columnENGINE_NO = New Global.System.Data.DataColumn("ENGINE_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_NO)
            Me.columnENGINE_ASM_NO = New Global.System.Data.DataColumn("ENGINE_ASM_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_ASM_NO)
            Me.columnBOOK = New Global.System.Data.DataColumn("BOOK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOOK)
            Me.columnYEAR = New Global.System.Data.DataColumn("YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEAR)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT_NO = New Global.System.Data.DataColumn("UNIT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NO)
            Me.columnAT_MT = New Global.System.Data.DataColumn("AT_MT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAT_MT)
            Me.columnEMISSION = New Global.System.Data.DataColumn("EMISSION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMISSION)
            Me.columnINJ_MODEL_CODE = New Global.System.Data.DataColumn("INJ_MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINJ_MODEL_CODE)
            Me.columnSPARE_001 = New Global.System.Data.DataColumn("SPARE_001", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_001)
            Me.columnSPARE_002 = New Global.System.Data.DataColumn("SPARE_002", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_002)
            Me.columnSPARE_003 = New Global.System.Data.DataColumn("SPARE_003", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_003)
            Me.columnSPARE_004 = New Global.System.Data.DataColumn("SPARE_004", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_004)
            Me.columnSPARE_005 = New Global.System.Data.DataColumn("SPARE_005", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_005)
            Me.columnSPARE_006 = New Global.System.Data.DataColumn("SPARE_006", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_006)
            Me.columnSPARE_007 = New Global.System.Data.DataColumn("SPARE_007", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_007)
            Me.columnSPARE_008 = New Global.System.Data.DataColumn("SPARE_008", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_008)
            Me.columnSPARE_009 = New Global.System.Data.DataColumn("SPARE_009", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_009)
            Me.columnSPARE_010 = New Global.System.Data.DataColumn("SPARE_010", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_010)
            Me.columnSPARE_011 = New Global.System.Data.DataColumn("SPARE_011", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_011)
            Me.columnSPARE_012 = New Global.System.Data.DataColumn("SPARE_012", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_012)
            Me.columnSPARE_013 = New Global.System.Data.DataColumn("SPARE_013", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_013)
            Me.columnSPARE_014 = New Global.System.Data.DataColumn("SPARE_014", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_014)
            Me.columnSPARE_015 = New Global.System.Data.DataColumn("SPARE_015", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_015)
            Me.columnSPARE_016 = New Global.System.Data.DataColumn("SPARE_016", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_016)
            Me.columnSPARE_017 = New Global.System.Data.DataColumn("SPARE_017", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_017)
            Me.columnSB_DATA_SB_PARTS_NO = New Global.System.Data.DataColumn("SB_DATA_SB_PARTS_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSB_DATA_SB_PARTS_NO)
            Me.columnSB_DATA_SB_SERIAL_NO = New Global.System.Data.DataColumn("SB_DATA_SB_SERIAL_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSB_DATA_SB_SERIAL_NO)
            Me.columnSB_DATA_GASKET_GRADE = New Global.System.Data.DataColumn("SB_DATA_GASKET_GRADE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSB_DATA_GASKET_GRADE)
            Me.columnLINE_ON_TIME = New Global.System.Data.DataColumn("LINE_ON_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE_ON_TIME)
            Me.columnLINE_OFF_TIME = New Global.System.Data.DataColumn("LINE_OFF_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE_OFF_TIME)
            Me.columnRPCOCF_SBLO_BCT = New Global.System.Data.DataColumn("RPCOCF_SBLO_BCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_BCT)
            Me.columnRPCOCF_SBLO_CRT = New Global.System.Data.DataColumn("RPCOCF_SBLO_CRT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_CRT)
            Me.columnRPCOCF_SBLO_CTM = New Global.System.Data.DataColumn("RPCOCF_SBLO_CTM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_CTM)
            Me.columnRPCOCF_SBLO_SPARE01 = New Global.System.Data.DataColumn("RPCOCF_SBLO_SPARE01", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_SPARE01)
            Me.columnRPCOCF_SBLO_SPARE02 = New Global.System.Data.DataColumn("RPCOCF_SBLO_SPARE02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_SPARE02)
            Me.columnRPCOCF_SBLO_SPARE03 = New Global.System.Data.DataColumn("RPCOCF_SBLO_SPARE03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_SPARE03)
            Me.columnRPCOCF_MALO_CCT = New Global.System.Data.DataColumn("RPCOCF_MALO_CCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_CCT)
            Me.columnRPCOCF_MALO_DPT = New Global.System.Data.DataColumn("RPCOCF_MALO_DPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_DPT)
            Me.columnRPCOCF_MALO_FWT = New Global.System.Data.DataColumn("RPCOCF_MALO_FWT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_FWT)
            Me.columnRPCOCF_MALO_SPARE01 = New Global.System.Data.DataColumn("RPCOCF_MALO_SPARE01", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_SPARE01)
            Me.columnRPCOCF_MALO_SPARE02 = New Global.System.Data.DataColumn("RPCOCF_MALO_SPARE02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_SPARE02)
            Me.columnRPCOCF_MALO_SPARE03 = New Global.System.Data.DataColumn("RPCOCF_MALO_SPARE03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_SPARE03)
            Me.columnRPCOCF_MBLO_HDT = New Global.System.Data.DataColumn("RPCOCF_MBLO_HDT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_HDT)
            Me.columnRPCOCF_MBLO_CCT = New Global.System.Data.DataColumn("RPCOCF_MBLO_CCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_CCT)
            Me.columnRPCOCF_MBLO_HCT = New Global.System.Data.DataColumn("RPCOCF_MBLO_HCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_HCT)
            Me.columnRPCOCF_MBLO_PPT = New Global.System.Data.DataColumn("RPCOCF_MBLO_PPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_PPT)
            Me.columnRPCOCF_MBLO_SPARE01 = New Global.System.Data.DataColumn("RPCOCF_MBLO_SPARE01", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_SPARE01)
            Me.columnRPCOCF_MBLO_SPARE02 = New Global.System.Data.DataColumn("RPCOCF_MBLO_SPARE02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_SPARE02)
            Me.columnRPCOCF_MBLO_SPARE03 = New Global.System.Data.DataColumn("RPCOCF_MBLO_SPARE03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_SPARE03)
            Me.columnRPCOCF_MBLO_SPARE04 = New Global.System.Data.DataColumn("RPCOCF_MBLO_SPARE04", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_SPARE04)
            Me.columnINSPSJ_INSPECTION01 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION01", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION01)
            Me.columnINSPSJ_INSPECTION02 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION02)
            Me.columnINSPSJ_INSPECTION03 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION03)
            Me.columnINSPSJ_INSPECTION04 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION04", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION04)
            Me.columnINSPSJ_INSPECTION05 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION05", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION05)
            Me.columnINSPSJ_INSPECTION06 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION06", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION06)
            Me.columnINSPSJ_INSPECTION_TIME01 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION_TIME01", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION_TIME01)
            Me.columnINSPSJ_INSPECTION11 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION11)
            Me.columnINSPSJ_INSPECTION12 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION12)
            Me.columnINSPSJ_INSPECTION13 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION13)
            Me.columnINSPSJ_INSPECTION14 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION14)
            Me.columnINSPSJ_INSPECTION15 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION15)
            Me.columnINSPSJ_INSPECTION16 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION16", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION16)
            Me.columnINSPSJ_INSPECTION_TIME02 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION_TIME02", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION_TIME02)
            Me.columnCREATED_BY = New Global.System.Data.DataColumn("CREATED_BY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_BY)
            Me.columnUPDATED_BY = New Global.System.Data.DataColumn("UPDATED_BY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_BY)
            Me.columnCREATED_WHEN = New Global.System.Data.DataColumn("CREATED_WHEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_WHEN)
            Me.columnUPDATED_WHEN = New Global.System.Data.DataColumn("UPDATED_WHEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_WHEN)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnENGINE_TYPE.AllowDBNull = false
            Me.columnENGINE_TYPE.MaxLength = 4
            Me.columnENGINE_NO.AllowDBNull = false
            Me.columnENGINE_NO.MaxLength = 6
            Me.columnENGINE_ASM_NO.AllowDBNull = false
            Me.columnENGINE_ASM_NO.MaxLength = 10
            Me.columnBOOK.AllowDBNull = false
            Me.columnBOOK.MaxLength = 2
            Me.columnYEAR.AllowDBNull = false
            Me.columnYEAR.MaxLength = 4
            Me.columnMODEL_CODE.AllowDBNull = false
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 4
            Me.columnUNIT_NO.AllowDBNull = false
            Me.columnUNIT_NO.MaxLength = 2
            Me.columnAT_MT.AllowDBNull = false
            Me.columnAT_MT.MaxLength = 2
            Me.columnEMISSION.AllowDBNull = false
            Me.columnEMISSION.MaxLength = 2
            Me.columnINJ_MODEL_CODE.AllowDBNull = false
            Me.columnINJ_MODEL_CODE.MaxLength = 2
            Me.columnSPARE_001.AllowDBNull = false
            Me.columnSPARE_001.MaxLength = 2
            Me.columnSPARE_002.AllowDBNull = false
            Me.columnSPARE_002.MaxLength = 2
            Me.columnSPARE_003.AllowDBNull = false
            Me.columnSPARE_003.MaxLength = 2
            Me.columnSPARE_004.AllowDBNull = false
            Me.columnSPARE_004.MaxLength = 2
            Me.columnSPARE_005.AllowDBNull = false
            Me.columnSPARE_005.MaxLength = 2
            Me.columnSPARE_006.AllowDBNull = false
            Me.columnSPARE_006.MaxLength = 2
            Me.columnSPARE_007.AllowDBNull = false
            Me.columnSPARE_007.MaxLength = 2
            Me.columnSPARE_008.AllowDBNull = false
            Me.columnSPARE_008.MaxLength = 2
            Me.columnSPARE_009.AllowDBNull = false
            Me.columnSPARE_009.MaxLength = 2
            Me.columnSPARE_010.AllowDBNull = false
            Me.columnSPARE_010.MaxLength = 2
            Me.columnSPARE_011.AllowDBNull = false
            Me.columnSPARE_011.MaxLength = 2
            Me.columnSPARE_012.AllowDBNull = false
            Me.columnSPARE_012.MaxLength = 2
            Me.columnSPARE_013.AllowDBNull = false
            Me.columnSPARE_013.MaxLength = 2
            Me.columnSPARE_014.AllowDBNull = false
            Me.columnSPARE_014.MaxLength = 2
            Me.columnSPARE_015.AllowDBNull = false
            Me.columnSPARE_015.MaxLength = 2
            Me.columnSPARE_016.AllowDBNull = false
            Me.columnSPARE_016.MaxLength = 2
            Me.columnSPARE_017.AllowDBNull = false
            Me.columnSPARE_017.MaxLength = 2
            Me.columnSB_DATA_SB_PARTS_NO.AllowDBNull = false
            Me.columnSB_DATA_SB_PARTS_NO.MaxLength = 10
            Me.columnSB_DATA_SB_SERIAL_NO.AllowDBNull = false
            Me.columnSB_DATA_SB_SERIAL_NO.MaxLength = 6
            Me.columnSB_DATA_GASKET_GRADE.AllowDBNull = false
            Me.columnSB_DATA_GASKET_GRADE.MaxLength = 2
            Me.columnLINE_ON_TIME.AllowDBNull = false
            Me.columnLINE_OFF_TIME.AllowDBNull = false
            Me.columnRPCOCF_SBLO_BCT.AllowDBNull = false
            Me.columnRPCOCF_SBLO_BCT.MaxLength = 2
            Me.columnRPCOCF_SBLO_CRT.AllowDBNull = false
            Me.columnRPCOCF_SBLO_CRT.MaxLength = 2
            Me.columnRPCOCF_SBLO_CTM.AllowDBNull = false
            Me.columnRPCOCF_SBLO_CTM.MaxLength = 2
            Me.columnRPCOCF_SBLO_SPARE01.AllowDBNull = false
            Me.columnRPCOCF_SBLO_SPARE01.MaxLength = 2
            Me.columnRPCOCF_SBLO_SPARE02.AllowDBNull = false
            Me.columnRPCOCF_SBLO_SPARE02.MaxLength = 2
            Me.columnRPCOCF_SBLO_SPARE03.AllowDBNull = false
            Me.columnRPCOCF_SBLO_SPARE03.MaxLength = 2
            Me.columnRPCOCF_MALO_CCT.AllowDBNull = false
            Me.columnRPCOCF_MALO_CCT.MaxLength = 2
            Me.columnRPCOCF_MALO_DPT.AllowDBNull = false
            Me.columnRPCOCF_MALO_DPT.MaxLength = 2
            Me.columnRPCOCF_MALO_FWT.AllowDBNull = false
            Me.columnRPCOCF_MALO_FWT.MaxLength = 2
            Me.columnRPCOCF_MALO_SPARE01.AllowDBNull = false
            Me.columnRPCOCF_MALO_SPARE01.MaxLength = 2
            Me.columnRPCOCF_MALO_SPARE02.AllowDBNull = false
            Me.columnRPCOCF_MALO_SPARE02.MaxLength = 2
            Me.columnRPCOCF_MALO_SPARE03.AllowDBNull = false
            Me.columnRPCOCF_MALO_SPARE03.MaxLength = 2
            Me.columnRPCOCF_MBLO_HDT.AllowDBNull = false
            Me.columnRPCOCF_MBLO_HDT.MaxLength = 2
            Me.columnRPCOCF_MBLO_CCT.AllowDBNull = false
            Me.columnRPCOCF_MBLO_CCT.MaxLength = 2
            Me.columnRPCOCF_MBLO_HCT.AllowDBNull = false
            Me.columnRPCOCF_MBLO_HCT.MaxLength = 2
            Me.columnRPCOCF_MBLO_PPT.AllowDBNull = false
            Me.columnRPCOCF_MBLO_PPT.MaxLength = 2
            Me.columnRPCOCF_MBLO_SPARE01.AllowDBNull = false
            Me.columnRPCOCF_MBLO_SPARE01.MaxLength = 2
            Me.columnRPCOCF_MBLO_SPARE02.AllowDBNull = false
            Me.columnRPCOCF_MBLO_SPARE02.MaxLength = 2
            Me.columnRPCOCF_MBLO_SPARE03.AllowDBNull = false
            Me.columnRPCOCF_MBLO_SPARE03.MaxLength = 2
            Me.columnRPCOCF_MBLO_SPARE04.AllowDBNull = false
            Me.columnRPCOCF_MBLO_SPARE04.MaxLength = 2
            Me.columnINSPSJ_INSPECTION01.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION01.MaxLength = 2
            Me.columnINSPSJ_INSPECTION02.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION02.MaxLength = 2
            Me.columnINSPSJ_INSPECTION03.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION03.MaxLength = 2
            Me.columnINSPSJ_INSPECTION04.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION04.MaxLength = 2
            Me.columnINSPSJ_INSPECTION05.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION05.MaxLength = 2
            Me.columnINSPSJ_INSPECTION06.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION06.MaxLength = 2
            Me.columnINSPSJ_INSPECTION_TIME01.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION11.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION11.MaxLength = 2
            Me.columnINSPSJ_INSPECTION12.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION12.MaxLength = 2
            Me.columnINSPSJ_INSPECTION13.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION13.MaxLength = 2
            Me.columnINSPSJ_INSPECTION14.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION14.MaxLength = 2
            Me.columnINSPSJ_INSPECTION15.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION15.MaxLength = 2
            Me.columnINSPSJ_INSPECTION16.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION16.MaxLength = 2
            Me.columnINSPSJ_INSPECTION_TIME02.AllowDBNull = false
            Me.columnCREATED_BY.AllowDBNull = false
            Me.columnCREATED_BY.MaxLength = 255
            Me.columnUPDATED_BY.MaxLength = 255
            Me.columnCREATED_WHEN.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewBALL_ENGINE_LISTRow() As BALL_ENGINE_LISTRow
            Return CType(Me.NewRow,BALL_ENGINE_LISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BALL_ENGINE_LISTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BALL_ENGINE_LISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BALL_ENGINE_LISTRowChangedEvent) Is Nothing) Then
                RaiseEvent BALL_ENGINE_LISTRowChanged(Me, New BALL_ENGINE_LISTRowChangeEvent(CType(e.Row,BALL_ENGINE_LISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BALL_ENGINE_LISTRowChangingEvent) Is Nothing) Then
                RaiseEvent BALL_ENGINE_LISTRowChanging(Me, New BALL_ENGINE_LISTRowChangeEvent(CType(e.Row,BALL_ENGINE_LISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BALL_ENGINE_LISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent BALL_ENGINE_LISTRowDeleted(Me, New BALL_ENGINE_LISTRowChangeEvent(CType(e.Row,BALL_ENGINE_LISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BALL_ENGINE_LISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent BALL_ENGINE_LISTRowDeleting(Me, New BALL_ENGINE_LISTRowChangeEvent(CType(e.Row,BALL_ENGINE_LISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveBALL_ENGINE_LISTRow(ByVal row As BALL_ENGINE_LISTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BALL_ENGINE_LISTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ENGINE_LISTDataTable
        Inherits Global.System.Data.TypedTableBase(Of ENGINE_LISTRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnENGINE_TYPE As Global.System.Data.DataColumn
        
        Private columnENGINE_NO As Global.System.Data.DataColumn
        
        Private columnENGINE_ASM_NO As Global.System.Data.DataColumn
        
        Private columnBOOK As Global.System.Data.DataColumn
        
        Private columnYEAR As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT_NO As Global.System.Data.DataColumn
        
        Private columnAT_MT As Global.System.Data.DataColumn
        
        Private columnEMISSION As Global.System.Data.DataColumn
        
        Private columnINJ_MODEL_CODE As Global.System.Data.DataColumn
        
        Private columnSPARE_001 As Global.System.Data.DataColumn
        
        Private columnSB_DATA_SB_PARTS_NO As Global.System.Data.DataColumn
        
        Private columnSB_DATA_SB_SERIAL_NO As Global.System.Data.DataColumn
        
        Private columnSB_DATA_GASKET_GRADE As Global.System.Data.DataColumn
        
        Private columnLINE_ON_TIME As Global.System.Data.DataColumn
        
        Private columnLINE_OFF_TIME As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_BCT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_CRT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_CTM As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_SPARE01 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_SPARE02 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_SBLO_SPARE03 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_CCT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_DPT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_FWT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_SPARE01 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_SPARE02 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MALO_SPARE03 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_HDT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_CCT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_HCT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_PPT As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_SPARE01 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_SPARE02 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_SPARE03 As Global.System.Data.DataColumn
        
        Private columnRPCOCF_MBLO_SPARE04 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION01 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION02 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION03 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION04 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION05 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION06 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION_TIME01 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION11 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION12 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION13 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION14 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION15 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION16 As Global.System.Data.DataColumn
        
        Private columnINSPSJ_INSPECTION_TIME02 As Global.System.Data.DataColumn
        
        Private columnUPDATED_BY As Global.System.Data.DataColumn
        
        Private columnCREATED_WHEN As Global.System.Data.DataColumn
        
        Private columnUPDATED_WHEN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ENGINE_LIST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_ASM_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_ASM_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BOOKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOOK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UNIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AT_MTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAT_MT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMISSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMISSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INJ_MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINJ_MODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SPARE_001Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPARE_001
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SB_DATA_SB_PARTS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSB_DATA_SB_PARTS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SB_DATA_SB_SERIAL_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSB_DATA_SB_SERIAL_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SB_DATA_GASKET_GRADEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSB_DATA_GASKET_GRADE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LINE_ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE_ON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LINE_OFF_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE_OFF_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_BCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_BCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_CRTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_CRT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_CTMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_CTM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_SPARE01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_SPARE01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_SPARE02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_SPARE02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_SBLO_SPARE03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_SBLO_SPARE03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_CCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_CCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_DPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_DPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_FWTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_FWT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_SPARE01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_SPARE01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_SPARE02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_SPARE02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MALO_SPARE03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MALO_SPARE03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_HDTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_HDT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_CCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_CCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_HCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_HCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_PPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_PPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_SPARE01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_SPARE01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_SPARE02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_SPARE02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_SPARE03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_SPARE03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RPCOCF_MBLO_SPARE04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPCOCF_MBLO_SPARE04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION06Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION06
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION_TIME01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION_TIME01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION16Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION16
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INSPSJ_INSPECTION_TIME02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINSPSJ_INSPECTION_TIME02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_BYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_BY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_WHENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_WHEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_WHENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_WHEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ENGINE_LISTRow
            Get
                Return CType(Me.Rows(index),ENGINE_LISTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINE_LISTRowChanging As ENGINE_LISTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINE_LISTRowChanged As ENGINE_LISTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINE_LISTRowDeleting As ENGINE_LISTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINE_LISTRowDeleted As ENGINE_LISTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddENGINE_LISTRow(ByVal row As ENGINE_LISTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddENGINE_LISTRow( _
                    ByVal ENGINE_TYPE As String,  _
                    ByVal ENGINE_NO As String,  _
                    ByVal ENGINE_ASM_NO As String,  _
                    ByVal BOOK As String,  _
                    ByVal YEAR As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT_NO As String,  _
                    ByVal AT_MT As String,  _
                    ByVal EMISSION As String,  _
                    ByVal INJ_MODEL_CODE As String,  _
                    ByVal SPARE_001 As String,  _
                    ByVal SB_DATA_SB_PARTS_NO As String,  _
                    ByVal SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal SB_DATA_GASKET_GRADE As String,  _
                    ByVal LINE_ON_TIME As Date,  _
                    ByVal LINE_OFF_TIME As Date,  _
                    ByVal RPCOCF_SBLO_BCT As String,  _
                    ByVal RPCOCF_SBLO_CRT As String,  _
                    ByVal RPCOCF_SBLO_CTM As String,  _
                    ByVal RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MALO_CCT As String,  _
                    ByVal RPCOCF_MALO_DPT As String,  _
                    ByVal RPCOCF_MALO_FWT As String,  _
                    ByVal RPCOCF_MALO_SPARE01 As String,  _
                    ByVal RPCOCF_MALO_SPARE02 As String,  _
                    ByVal RPCOCF_MALO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_HDT As String,  _
                    ByVal RPCOCF_MBLO_CCT As String,  _
                    ByVal RPCOCF_MBLO_HCT As String,  _
                    ByVal RPCOCF_MBLO_PPT As String,  _
                    ByVal RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal INSPSJ_INSPECTION01 As String,  _
                    ByVal INSPSJ_INSPECTION02 As String,  _
                    ByVal INSPSJ_INSPECTION03 As String,  _
                    ByVal INSPSJ_INSPECTION04 As String,  _
                    ByVal INSPSJ_INSPECTION05 As String,  _
                    ByVal INSPSJ_INSPECTION06 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal INSPSJ_INSPECTION11 As String,  _
                    ByVal INSPSJ_INSPECTION12 As String,  _
                    ByVal INSPSJ_INSPECTION13 As String,  _
                    ByVal INSPSJ_INSPECTION14 As String,  _
                    ByVal INSPSJ_INSPECTION15 As String,  _
                    ByVal INSPSJ_INSPECTION16 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal UPDATED_BY As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal UPDATED_WHEN As Date) As ENGINE_LISTRow
            Dim rowENGINE_LISTRow As ENGINE_LISTRow = CType(Me.NewRow,ENGINE_LISTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ENGINE_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YEAR, MODEL_CODE, LOT_NO, UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CODE, SPARE_001, SB_DATA_SB_PARTS_NO, SB_DATA_SB_SERIAL_NO, SB_DATA_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TIME, RPCOCF_SBLO_BCT, RPCOCF_SBLO_CRT, RPCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCOCF_SBLO_SPARE02, RPCOCF_SBLO_SPARE03, RPCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_MALO_FWT, RPCOCF_MALO_SPARE01, RPCOCF_MALO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_MBLO_HDT, RPCOCF_MBLO_CCT, RPCOCF_MBLO_HCT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01, RPCOCF_MBLO_SPARE02, RPCOCF_MBLO_SPARE03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTION01, INSPSJ_INSPECTION02, INSPSJ_INSPECTION03, INSPSJ_INSPECTION04, INSPSJ_INSPECTION05, INSPSJ_INSPECTION06, INSPSJ_INSPECTION_TIME01, INSPSJ_INSPECTION11, INSPSJ_INSPECTION12, INSPSJ_INSPECTION13, INSPSJ_INSPECTION14, INSPSJ_INSPECTION15, INSPSJ_INSPECTION16, INSPSJ_INSPECTION_TIME02, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN}
            rowENGINE_LISTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowENGINE_LISTRow)
            Return rowENGINE_LISTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ENGINE_LISTRow
            Return CType(Me.Rows.Find(New Object() {ID}),ENGINE_LISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ENGINE_LISTDataTable = CType(MyBase.Clone,ENGINE_LISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ENGINE_LISTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnENGINE_TYPE = MyBase.Columns("ENGINE_TYPE")
            Me.columnENGINE_NO = MyBase.Columns("ENGINE_NO")
            Me.columnENGINE_ASM_NO = MyBase.Columns("ENGINE_ASM_NO")
            Me.columnBOOK = MyBase.Columns("BOOK")
            Me.columnYEAR = MyBase.Columns("YEAR")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT_NO = MyBase.Columns("UNIT_NO")
            Me.columnAT_MT = MyBase.Columns("AT_MT")
            Me.columnEMISSION = MyBase.Columns("EMISSION")
            Me.columnINJ_MODEL_CODE = MyBase.Columns("INJ_MODEL_CODE")
            Me.columnSPARE_001 = MyBase.Columns("SPARE_001")
            Me.columnSB_DATA_SB_PARTS_NO = MyBase.Columns("SB_DATA_SB_PARTS_NO")
            Me.columnSB_DATA_SB_SERIAL_NO = MyBase.Columns("SB_DATA_SB_SERIAL_NO")
            Me.columnSB_DATA_GASKET_GRADE = MyBase.Columns("SB_DATA_GASKET_GRADE")
            Me.columnLINE_ON_TIME = MyBase.Columns("LINE_ON_TIME")
            Me.columnLINE_OFF_TIME = MyBase.Columns("LINE_OFF_TIME")
            Me.columnRPCOCF_SBLO_BCT = MyBase.Columns("RPCOCF_SBLO_BCT")
            Me.columnRPCOCF_SBLO_CRT = MyBase.Columns("RPCOCF_SBLO_CRT")
            Me.columnRPCOCF_SBLO_CTM = MyBase.Columns("RPCOCF_SBLO_CTM")
            Me.columnRPCOCF_SBLO_SPARE01 = MyBase.Columns("RPCOCF_SBLO_SPARE01")
            Me.columnRPCOCF_SBLO_SPARE02 = MyBase.Columns("RPCOCF_SBLO_SPARE02")
            Me.columnRPCOCF_SBLO_SPARE03 = MyBase.Columns("RPCOCF_SBLO_SPARE03")
            Me.columnRPCOCF_MALO_CCT = MyBase.Columns("RPCOCF_MALO_CCT")
            Me.columnRPCOCF_MALO_DPT = MyBase.Columns("RPCOCF_MALO_DPT")
            Me.columnRPCOCF_MALO_FWT = MyBase.Columns("RPCOCF_MALO_FWT")
            Me.columnRPCOCF_MALO_SPARE01 = MyBase.Columns("RPCOCF_MALO_SPARE01")
            Me.columnRPCOCF_MALO_SPARE02 = MyBase.Columns("RPCOCF_MALO_SPARE02")
            Me.columnRPCOCF_MALO_SPARE03 = MyBase.Columns("RPCOCF_MALO_SPARE03")
            Me.columnRPCOCF_MBLO_HDT = MyBase.Columns("RPCOCF_MBLO_HDT")
            Me.columnRPCOCF_MBLO_CCT = MyBase.Columns("RPCOCF_MBLO_CCT")
            Me.columnRPCOCF_MBLO_HCT = MyBase.Columns("RPCOCF_MBLO_HCT")
            Me.columnRPCOCF_MBLO_PPT = MyBase.Columns("RPCOCF_MBLO_PPT")
            Me.columnRPCOCF_MBLO_SPARE01 = MyBase.Columns("RPCOCF_MBLO_SPARE01")
            Me.columnRPCOCF_MBLO_SPARE02 = MyBase.Columns("RPCOCF_MBLO_SPARE02")
            Me.columnRPCOCF_MBLO_SPARE03 = MyBase.Columns("RPCOCF_MBLO_SPARE03")
            Me.columnRPCOCF_MBLO_SPARE04 = MyBase.Columns("RPCOCF_MBLO_SPARE04")
            Me.columnINSPSJ_INSPECTION01 = MyBase.Columns("INSPSJ_INSPECTION01")
            Me.columnINSPSJ_INSPECTION02 = MyBase.Columns("INSPSJ_INSPECTION02")
            Me.columnINSPSJ_INSPECTION03 = MyBase.Columns("INSPSJ_INSPECTION03")
            Me.columnINSPSJ_INSPECTION04 = MyBase.Columns("INSPSJ_INSPECTION04")
            Me.columnINSPSJ_INSPECTION05 = MyBase.Columns("INSPSJ_INSPECTION05")
            Me.columnINSPSJ_INSPECTION06 = MyBase.Columns("INSPSJ_INSPECTION06")
            Me.columnINSPSJ_INSPECTION_TIME01 = MyBase.Columns("INSPSJ_INSPECTION_TIME01")
            Me.columnINSPSJ_INSPECTION11 = MyBase.Columns("INSPSJ_INSPECTION11")
            Me.columnINSPSJ_INSPECTION12 = MyBase.Columns("INSPSJ_INSPECTION12")
            Me.columnINSPSJ_INSPECTION13 = MyBase.Columns("INSPSJ_INSPECTION13")
            Me.columnINSPSJ_INSPECTION14 = MyBase.Columns("INSPSJ_INSPECTION14")
            Me.columnINSPSJ_INSPECTION15 = MyBase.Columns("INSPSJ_INSPECTION15")
            Me.columnINSPSJ_INSPECTION16 = MyBase.Columns("INSPSJ_INSPECTION16")
            Me.columnINSPSJ_INSPECTION_TIME02 = MyBase.Columns("INSPSJ_INSPECTION_TIME02")
            Me.columnUPDATED_BY = MyBase.Columns("UPDATED_BY")
            Me.columnCREATED_WHEN = MyBase.Columns("CREATED_WHEN")
            Me.columnUPDATED_WHEN = MyBase.Columns("UPDATED_WHEN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnENGINE_TYPE = New Global.System.Data.DataColumn("ENGINE_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_TYPE)
            Me.columnENGINE_NO = New Global.System.Data.DataColumn("ENGINE_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_NO)
            Me.columnENGINE_ASM_NO = New Global.System.Data.DataColumn("ENGINE_ASM_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_ASM_NO)
            Me.columnBOOK = New Global.System.Data.DataColumn("BOOK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOOK)
            Me.columnYEAR = New Global.System.Data.DataColumn("YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEAR)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT_NO = New Global.System.Data.DataColumn("UNIT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NO)
            Me.columnAT_MT = New Global.System.Data.DataColumn("AT_MT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAT_MT)
            Me.columnEMISSION = New Global.System.Data.DataColumn("EMISSION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMISSION)
            Me.columnINJ_MODEL_CODE = New Global.System.Data.DataColumn("INJ_MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINJ_MODEL_CODE)
            Me.columnSPARE_001 = New Global.System.Data.DataColumn("SPARE_001", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPARE_001)
            Me.columnSB_DATA_SB_PARTS_NO = New Global.System.Data.DataColumn("SB_DATA_SB_PARTS_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSB_DATA_SB_PARTS_NO)
            Me.columnSB_DATA_SB_SERIAL_NO = New Global.System.Data.DataColumn("SB_DATA_SB_SERIAL_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSB_DATA_SB_SERIAL_NO)
            Me.columnSB_DATA_GASKET_GRADE = New Global.System.Data.DataColumn("SB_DATA_GASKET_GRADE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSB_DATA_GASKET_GRADE)
            Me.columnLINE_ON_TIME = New Global.System.Data.DataColumn("LINE_ON_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE_ON_TIME)
            Me.columnLINE_OFF_TIME = New Global.System.Data.DataColumn("LINE_OFF_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE_OFF_TIME)
            Me.columnRPCOCF_SBLO_BCT = New Global.System.Data.DataColumn("RPCOCF_SBLO_BCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_BCT)
            Me.columnRPCOCF_SBLO_CRT = New Global.System.Data.DataColumn("RPCOCF_SBLO_CRT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_CRT)
            Me.columnRPCOCF_SBLO_CTM = New Global.System.Data.DataColumn("RPCOCF_SBLO_CTM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_CTM)
            Me.columnRPCOCF_SBLO_SPARE01 = New Global.System.Data.DataColumn("RPCOCF_SBLO_SPARE01", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_SPARE01)
            Me.columnRPCOCF_SBLO_SPARE02 = New Global.System.Data.DataColumn("RPCOCF_SBLO_SPARE02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_SPARE02)
            Me.columnRPCOCF_SBLO_SPARE03 = New Global.System.Data.DataColumn("RPCOCF_SBLO_SPARE03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_SBLO_SPARE03)
            Me.columnRPCOCF_MALO_CCT = New Global.System.Data.DataColumn("RPCOCF_MALO_CCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_CCT)
            Me.columnRPCOCF_MALO_DPT = New Global.System.Data.DataColumn("RPCOCF_MALO_DPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_DPT)
            Me.columnRPCOCF_MALO_FWT = New Global.System.Data.DataColumn("RPCOCF_MALO_FWT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_FWT)
            Me.columnRPCOCF_MALO_SPARE01 = New Global.System.Data.DataColumn("RPCOCF_MALO_SPARE01", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_SPARE01)
            Me.columnRPCOCF_MALO_SPARE02 = New Global.System.Data.DataColumn("RPCOCF_MALO_SPARE02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_SPARE02)
            Me.columnRPCOCF_MALO_SPARE03 = New Global.System.Data.DataColumn("RPCOCF_MALO_SPARE03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MALO_SPARE03)
            Me.columnRPCOCF_MBLO_HDT = New Global.System.Data.DataColumn("RPCOCF_MBLO_HDT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_HDT)
            Me.columnRPCOCF_MBLO_CCT = New Global.System.Data.DataColumn("RPCOCF_MBLO_CCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_CCT)
            Me.columnRPCOCF_MBLO_HCT = New Global.System.Data.DataColumn("RPCOCF_MBLO_HCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_HCT)
            Me.columnRPCOCF_MBLO_PPT = New Global.System.Data.DataColumn("RPCOCF_MBLO_PPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_PPT)
            Me.columnRPCOCF_MBLO_SPARE01 = New Global.System.Data.DataColumn("RPCOCF_MBLO_SPARE01", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_SPARE01)
            Me.columnRPCOCF_MBLO_SPARE02 = New Global.System.Data.DataColumn("RPCOCF_MBLO_SPARE02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_SPARE02)
            Me.columnRPCOCF_MBLO_SPARE03 = New Global.System.Data.DataColumn("RPCOCF_MBLO_SPARE03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_SPARE03)
            Me.columnRPCOCF_MBLO_SPARE04 = New Global.System.Data.DataColumn("RPCOCF_MBLO_SPARE04", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPCOCF_MBLO_SPARE04)
            Me.columnINSPSJ_INSPECTION01 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION01", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION01)
            Me.columnINSPSJ_INSPECTION02 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION02", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION02)
            Me.columnINSPSJ_INSPECTION03 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION03", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION03)
            Me.columnINSPSJ_INSPECTION04 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION04", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION04)
            Me.columnINSPSJ_INSPECTION05 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION05", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION05)
            Me.columnINSPSJ_INSPECTION06 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION06", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION06)
            Me.columnINSPSJ_INSPECTION_TIME01 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION_TIME01", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION_TIME01)
            Me.columnINSPSJ_INSPECTION11 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION11)
            Me.columnINSPSJ_INSPECTION12 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION12)
            Me.columnINSPSJ_INSPECTION13 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION13)
            Me.columnINSPSJ_INSPECTION14 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION14)
            Me.columnINSPSJ_INSPECTION15 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION15)
            Me.columnINSPSJ_INSPECTION16 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION16", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION16)
            Me.columnINSPSJ_INSPECTION_TIME02 = New Global.System.Data.DataColumn("INSPSJ_INSPECTION_TIME02", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINSPSJ_INSPECTION_TIME02)
            Me.columnUPDATED_BY = New Global.System.Data.DataColumn("UPDATED_BY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_BY)
            Me.columnCREATED_WHEN = New Global.System.Data.DataColumn("CREATED_WHEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_WHEN)
            Me.columnUPDATED_WHEN = New Global.System.Data.DataColumn("UPDATED_WHEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_WHEN)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnENGINE_TYPE.AllowDBNull = false
            Me.columnENGINE_TYPE.MaxLength = 4
            Me.columnENGINE_NO.AllowDBNull = false
            Me.columnENGINE_NO.MaxLength = 6
            Me.columnENGINE_ASM_NO.AllowDBNull = false
            Me.columnENGINE_ASM_NO.MaxLength = 10
            Me.columnBOOK.AllowDBNull = false
            Me.columnBOOK.MaxLength = 2
            Me.columnYEAR.AllowDBNull = false
            Me.columnYEAR.MaxLength = 4
            Me.columnMODEL_CODE.AllowDBNull = false
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 4
            Me.columnUNIT_NO.AllowDBNull = false
            Me.columnUNIT_NO.MaxLength = 2
            Me.columnAT_MT.AllowDBNull = false
            Me.columnAT_MT.MaxLength = 2
            Me.columnEMISSION.AllowDBNull = false
            Me.columnEMISSION.MaxLength = 2
            Me.columnINJ_MODEL_CODE.AllowDBNull = false
            Me.columnINJ_MODEL_CODE.MaxLength = 2
            Me.columnSPARE_001.MaxLength = 34
            Me.columnSB_DATA_SB_PARTS_NO.AllowDBNull = false
            Me.columnSB_DATA_SB_PARTS_NO.MaxLength = 10
            Me.columnSB_DATA_SB_SERIAL_NO.AllowDBNull = false
            Me.columnSB_DATA_SB_SERIAL_NO.MaxLength = 6
            Me.columnSB_DATA_GASKET_GRADE.AllowDBNull = false
            Me.columnSB_DATA_GASKET_GRADE.MaxLength = 2
            Me.columnLINE_ON_TIME.AllowDBNull = false
            Me.columnLINE_OFF_TIME.AllowDBNull = false
            Me.columnRPCOCF_SBLO_BCT.AllowDBNull = false
            Me.columnRPCOCF_SBLO_BCT.MaxLength = 2
            Me.columnRPCOCF_SBLO_CRT.AllowDBNull = false
            Me.columnRPCOCF_SBLO_CRT.MaxLength = 2
            Me.columnRPCOCF_SBLO_CTM.AllowDBNull = false
            Me.columnRPCOCF_SBLO_CTM.MaxLength = 2
            Me.columnRPCOCF_SBLO_SPARE01.AllowDBNull = false
            Me.columnRPCOCF_SBLO_SPARE01.MaxLength = 2
            Me.columnRPCOCF_SBLO_SPARE02.AllowDBNull = false
            Me.columnRPCOCF_SBLO_SPARE02.MaxLength = 2
            Me.columnRPCOCF_SBLO_SPARE03.AllowDBNull = false
            Me.columnRPCOCF_SBLO_SPARE03.MaxLength = 2
            Me.columnRPCOCF_MALO_CCT.AllowDBNull = false
            Me.columnRPCOCF_MALO_CCT.MaxLength = 2
            Me.columnRPCOCF_MALO_DPT.AllowDBNull = false
            Me.columnRPCOCF_MALO_DPT.MaxLength = 2
            Me.columnRPCOCF_MALO_FWT.AllowDBNull = false
            Me.columnRPCOCF_MALO_FWT.MaxLength = 2
            Me.columnRPCOCF_MALO_SPARE01.AllowDBNull = false
            Me.columnRPCOCF_MALO_SPARE01.MaxLength = 2
            Me.columnRPCOCF_MALO_SPARE02.AllowDBNull = false
            Me.columnRPCOCF_MALO_SPARE02.MaxLength = 2
            Me.columnRPCOCF_MALO_SPARE03.AllowDBNull = false
            Me.columnRPCOCF_MALO_SPARE03.MaxLength = 2
            Me.columnRPCOCF_MBLO_HDT.AllowDBNull = false
            Me.columnRPCOCF_MBLO_HDT.MaxLength = 2
            Me.columnRPCOCF_MBLO_CCT.AllowDBNull = false
            Me.columnRPCOCF_MBLO_CCT.MaxLength = 2
            Me.columnRPCOCF_MBLO_HCT.AllowDBNull = false
            Me.columnRPCOCF_MBLO_HCT.MaxLength = 2
            Me.columnRPCOCF_MBLO_PPT.AllowDBNull = false
            Me.columnRPCOCF_MBLO_PPT.MaxLength = 2
            Me.columnRPCOCF_MBLO_SPARE01.AllowDBNull = false
            Me.columnRPCOCF_MBLO_SPARE01.MaxLength = 2
            Me.columnRPCOCF_MBLO_SPARE02.AllowDBNull = false
            Me.columnRPCOCF_MBLO_SPARE02.MaxLength = 2
            Me.columnRPCOCF_MBLO_SPARE03.AllowDBNull = false
            Me.columnRPCOCF_MBLO_SPARE03.MaxLength = 2
            Me.columnRPCOCF_MBLO_SPARE04.AllowDBNull = false
            Me.columnRPCOCF_MBLO_SPARE04.MaxLength = 2
            Me.columnINSPSJ_INSPECTION01.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION01.MaxLength = 2
            Me.columnINSPSJ_INSPECTION02.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION02.MaxLength = 2
            Me.columnINSPSJ_INSPECTION03.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION03.MaxLength = 2
            Me.columnINSPSJ_INSPECTION04.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION04.MaxLength = 2
            Me.columnINSPSJ_INSPECTION05.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION05.MaxLength = 2
            Me.columnINSPSJ_INSPECTION06.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION06.MaxLength = 2
            Me.columnINSPSJ_INSPECTION_TIME01.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION11.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION11.MaxLength = 2
            Me.columnINSPSJ_INSPECTION12.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION12.MaxLength = 2
            Me.columnINSPSJ_INSPECTION13.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION13.MaxLength = 2
            Me.columnINSPSJ_INSPECTION14.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION14.MaxLength = 2
            Me.columnINSPSJ_INSPECTION15.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION15.MaxLength = 2
            Me.columnINSPSJ_INSPECTION16.AllowDBNull = false
            Me.columnINSPSJ_INSPECTION16.MaxLength = 2
            Me.columnINSPSJ_INSPECTION_TIME02.AllowDBNull = false
            Me.columnUPDATED_BY.MaxLength = 255
            Me.columnCREATED_WHEN.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewENGINE_LISTRow() As ENGINE_LISTRow
            Return CType(Me.NewRow,ENGINE_LISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ENGINE_LISTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ENGINE_LISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ENGINE_LISTRowChangedEvent) Is Nothing) Then
                RaiseEvent ENGINE_LISTRowChanged(Me, New ENGINE_LISTRowChangeEvent(CType(e.Row,ENGINE_LISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ENGINE_LISTRowChangingEvent) Is Nothing) Then
                RaiseEvent ENGINE_LISTRowChanging(Me, New ENGINE_LISTRowChangeEvent(CType(e.Row,ENGINE_LISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ENGINE_LISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent ENGINE_LISTRowDeleted(Me, New ENGINE_LISTRowChangeEvent(CType(e.Row,ENGINE_LISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ENGINE_LISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent ENGINE_LISTRowDeleting(Me, New ENGINE_LISTRowChangeEvent(CType(e.Row,ENGINE_LISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveENGINE_LISTRow(ByVal row As ENGINE_LISTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ENGINE_LISTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPORT_CELL_MAPPINGDataTable
        Inherits Global.System.Data.TypedTableBase(Of IMPORT_CELL_MAPPINGRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDATA_CATEGORY As Global.System.Data.DataColumn
        
        Private columnCOLUMN_ID As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        Private columnLENGTH As Global.System.Data.DataColumn
        
        Private columnREV As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPORT_CELL_MAPPING"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATA_CATEGORYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_CATEGORY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COLUMN_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMN_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPORT_CELL_MAPPINGRow
            Get
                Return CType(Me.Rows(index),IMPORT_CELL_MAPPINGRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IMPORT_CELL_MAPPINGRowChanging As IMPORT_CELL_MAPPINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IMPORT_CELL_MAPPINGRowChanged As IMPORT_CELL_MAPPINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IMPORT_CELL_MAPPINGRowDeleting As IMPORT_CELL_MAPPINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IMPORT_CELL_MAPPINGRowDeleted As IMPORT_CELL_MAPPINGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddIMPORT_CELL_MAPPINGRow(ByVal row As IMPORT_CELL_MAPPINGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddIMPORT_CELL_MAPPINGRow(ByVal DATA_CATEGORY As Byte, ByVal COLUMN_ID As Integer, ByVal POSITION As Integer, ByVal LENGTH As Integer, ByVal REV As Integer) As IMPORT_CELL_MAPPINGRow
            Dim rowIMPORT_CELL_MAPPINGRow As IMPORT_CELL_MAPPINGRow = CType(Me.NewRow,IMPORT_CELL_MAPPINGRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DATA_CATEGORY, COLUMN_ID, POSITION, LENGTH, REV}
            rowIMPORT_CELL_MAPPINGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMPORT_CELL_MAPPINGRow)
            Return rowIMPORT_CELL_MAPPINGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As IMPORT_CELL_MAPPINGRow
            Return CType(Me.Rows.Find(New Object() {ID}),IMPORT_CELL_MAPPINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMPORT_CELL_MAPPINGDataTable = CType(MyBase.Clone,IMPORT_CELL_MAPPINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMPORT_CELL_MAPPINGDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDATA_CATEGORY = MyBase.Columns("DATA_CATEGORY")
            Me.columnCOLUMN_ID = MyBase.Columns("COLUMN_ID")
            Me.columnPOSITION = MyBase.Columns("POSITION")
            Me.columnLENGTH = MyBase.Columns("LENGTH")
            Me.columnREV = MyBase.Columns("REV")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDATA_CATEGORY = New Global.System.Data.DataColumn("DATA_CATEGORY", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_CATEGORY)
            Me.columnCOLUMN_ID = New Global.System.Data.DataColumn("COLUMN_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMN_ID)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.columnLENGTH = New Global.System.Data.DataColumn("LENGTH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLENGTH)
            Me.columnREV = New Global.System.Data.DataColumn("REV", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDATA_CATEGORY.AllowDBNull = false
            Me.columnCOLUMN_ID.AllowDBNull = false
            Me.columnPOSITION.AllowDBNull = false
            Me.columnLENGTH.AllowDBNull = false
            Me.columnREV.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewIMPORT_CELL_MAPPINGRow() As IMPORT_CELL_MAPPINGRow
            Return CType(Me.NewRow,IMPORT_CELL_MAPPINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMPORT_CELL_MAPPINGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMPORT_CELL_MAPPINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPORT_CELL_MAPPINGRowChangedEvent) Is Nothing) Then
                RaiseEvent IMPORT_CELL_MAPPINGRowChanged(Me, New IMPORT_CELL_MAPPINGRowChangeEvent(CType(e.Row,IMPORT_CELL_MAPPINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPORT_CELL_MAPPINGRowChangingEvent) Is Nothing) Then
                RaiseEvent IMPORT_CELL_MAPPINGRowChanging(Me, New IMPORT_CELL_MAPPINGRowChangeEvent(CType(e.Row,IMPORT_CELL_MAPPINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPORT_CELL_MAPPINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPORT_CELL_MAPPINGRowDeleted(Me, New IMPORT_CELL_MAPPINGRowChangeEvent(CType(e.Row,IMPORT_CELL_MAPPINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPORT_CELL_MAPPINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPORT_CELL_MAPPINGRowDeleting(Me, New IMPORT_CELL_MAPPINGRowChangeEvent(CType(e.Row,IMPORT_CELL_MAPPINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveIMPORT_CELL_MAPPINGRow(ByVal row As IMPORT_CELL_MAPPINGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPORT_CELL_MAPPINGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPORT_ENGINE_MAPPINGDataTable
        Inherits Global.System.Data.TypedTableBase(Of IMPORT_ENGINE_MAPPINGRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCOLUMN_NAME As Global.System.Data.DataColumn
        
        Private columnDATA_TYPE As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        Private columnLENGTH As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPORT_ENGINE_MAPPING"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COLUMN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATA_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPORT_ENGINE_MAPPINGRow
            Get
                Return CType(Me.Rows(index),IMPORT_ENGINE_MAPPINGRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IMPORT_ENGINE_MAPPINGRowChanging As IMPORT_ENGINE_MAPPINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IMPORT_ENGINE_MAPPINGRowChanged As IMPORT_ENGINE_MAPPINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IMPORT_ENGINE_MAPPINGRowDeleting As IMPORT_ENGINE_MAPPINGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IMPORT_ENGINE_MAPPINGRowDeleted As IMPORT_ENGINE_MAPPINGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddIMPORT_ENGINE_MAPPINGRow(ByVal row As IMPORT_ENGINE_MAPPINGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddIMPORT_ENGINE_MAPPINGRow(ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal POSITION As Integer, ByVal LENGTH As Integer) As IMPORT_ENGINE_MAPPINGRow
            Dim rowIMPORT_ENGINE_MAPPINGRow As IMPORT_ENGINE_MAPPINGRow = CType(Me.NewRow,IMPORT_ENGINE_MAPPINGRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, COLUMN_NAME, DATA_TYPE, POSITION, LENGTH}
            rowIMPORT_ENGINE_MAPPINGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMPORT_ENGINE_MAPPINGRow)
            Return rowIMPORT_ENGINE_MAPPINGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As IMPORT_ENGINE_MAPPINGRow
            Return CType(Me.Rows.Find(New Object() {ID}),IMPORT_ENGINE_MAPPINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMPORT_ENGINE_MAPPINGDataTable = CType(MyBase.Clone,IMPORT_ENGINE_MAPPINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMPORT_ENGINE_MAPPINGDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCOLUMN_NAME = MyBase.Columns("COLUMN_NAME")
            Me.columnDATA_TYPE = MyBase.Columns("DATA_TYPE")
            Me.columnPOSITION = MyBase.Columns("POSITION")
            Me.columnLENGTH = MyBase.Columns("LENGTH")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCOLUMN_NAME = New Global.System.Data.DataColumn("COLUMN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMN_NAME)
            Me.columnDATA_TYPE = New Global.System.Data.DataColumn("DATA_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_TYPE)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.columnLENGTH = New Global.System.Data.DataColumn("LENGTH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLENGTH)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnCOLUMN_NAME.AllowDBNull = false
            Me.columnCOLUMN_NAME.MaxLength = 255
            Me.columnDATA_TYPE.AllowDBNull = false
            Me.columnPOSITION.AllowDBNull = false
            Me.columnLENGTH.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewIMPORT_ENGINE_MAPPINGRow() As IMPORT_ENGINE_MAPPINGRow
            Return CType(Me.NewRow,IMPORT_ENGINE_MAPPINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMPORT_ENGINE_MAPPINGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMPORT_ENGINE_MAPPINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPORT_ENGINE_MAPPINGRowChangedEvent) Is Nothing) Then
                RaiseEvent IMPORT_ENGINE_MAPPINGRowChanged(Me, New IMPORT_ENGINE_MAPPINGRowChangeEvent(CType(e.Row,IMPORT_ENGINE_MAPPINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPORT_ENGINE_MAPPINGRowChangingEvent) Is Nothing) Then
                RaiseEvent IMPORT_ENGINE_MAPPINGRowChanging(Me, New IMPORT_ENGINE_MAPPINGRowChangeEvent(CType(e.Row,IMPORT_ENGINE_MAPPINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPORT_ENGINE_MAPPINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPORT_ENGINE_MAPPINGRowDeleted(Me, New IMPORT_ENGINE_MAPPINGRowChangeEvent(CType(e.Row,IMPORT_ENGINE_MAPPINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPORT_ENGINE_MAPPINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPORT_ENGINE_MAPPINGRowDeleting(Me, New IMPORT_ENGINE_MAPPINGRowChangeEvent(CType(e.Row,IMPORT_ENGINE_MAPPINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveIMPORT_ENGINE_MAPPINGRow(ByVal row As IMPORT_ENGINE_MAPPINGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPORT_ENGINE_MAPPINGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class schema_migrationsDataTable
        Inherits Global.System.Data.TypedTableBase(Of schema_migrationsRow)
        
        Private columnVERSION As Global.System.Data.DataColumn
        
        Private columnDESCR As Global.System.Data.DataColumn
        
        Private columnSQL_SCRIPT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "schema_migrations"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VERSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVERSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SQL_SCRIPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSQL_SCRIPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As schema_migrationsRow
            Get
                Return CType(Me.Rows(index),schema_migrationsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event schema_migrationsRowChanging As schema_migrationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event schema_migrationsRowChanged As schema_migrationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event schema_migrationsRowDeleting As schema_migrationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event schema_migrationsRowDeleted As schema_migrationsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addschema_migrationsRow(ByVal row As schema_migrationsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addschema_migrationsRow(ByVal VERSION As Date, ByVal DESCR As String, ByVal SQL_SCRIPT As String) As schema_migrationsRow
            Dim rowschema_migrationsRow As schema_migrationsRow = CType(Me.NewRow,schema_migrationsRow)
            Dim columnValuesArray() As Object = New Object() {VERSION, DESCR, SQL_SCRIPT}
            rowschema_migrationsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowschema_migrationsRow)
            Return rowschema_migrationsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByVERSION(ByVal VERSION As Date) As schema_migrationsRow
            Return CType(Me.Rows.Find(New Object() {VERSION}),schema_migrationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As schema_migrationsDataTable = CType(MyBase.Clone,schema_migrationsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New schema_migrationsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnVERSION = MyBase.Columns("VERSION")
            Me.columnDESCR = MyBase.Columns("DESCR")
            Me.columnSQL_SCRIPT = MyBase.Columns("SQL_SCRIPT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnVERSION = New Global.System.Data.DataColumn("VERSION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVERSION)
            Me.columnDESCR = New Global.System.Data.DataColumn("DESCR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCR)
            Me.columnSQL_SCRIPT = New Global.System.Data.DataColumn("SQL_SCRIPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSQL_SCRIPT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVERSION}, true))
            Me.columnVERSION.AllowDBNull = false
            Me.columnVERSION.Unique = true
            Me.columnDESCR.AllowDBNull = false
            Me.columnDESCR.MaxLength = 255
            Me.columnSQL_SCRIPT.AllowDBNull = false
            Me.columnSQL_SCRIPT.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newschema_migrationsRow() As schema_migrationsRow
            Return CType(Me.NewRow,schema_migrationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New schema_migrationsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(schema_migrationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.schema_migrationsRowChangedEvent) Is Nothing) Then
                RaiseEvent schema_migrationsRowChanged(Me, New schema_migrationsRowChangeEvent(CType(e.Row,schema_migrationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.schema_migrationsRowChangingEvent) Is Nothing) Then
                RaiseEvent schema_migrationsRowChanging(Me, New schema_migrationsRowChangeEvent(CType(e.Row,schema_migrationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.schema_migrationsRowDeletedEvent) Is Nothing) Then
                RaiseEvent schema_migrationsRowDeleted(Me, New schema_migrationsRowChangeEvent(CType(e.Row,schema_migrationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.schema_migrationsRowDeletingEvent) Is Nothing) Then
                RaiseEvent schema_migrationsRowDeleting(Me, New schema_migrationsRowChangeEvent(CType(e.Row,schema_migrationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeschema_migrationsRow(ByVal row As schema_migrationsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "schema_migrationsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class schema_migrations_comparerDataTable
        Inherits Global.System.Data.TypedTableBase(Of schema_migrations_comparerRow)
        
        Private columnVERSION As Global.System.Data.DataColumn
        
        Private columnDESCR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "schema_migrations_comparer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VERSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVERSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As schema_migrations_comparerRow
            Get
                Return CType(Me.Rows(index),schema_migrations_comparerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event schema_migrations_comparerRowChanging As schema_migrations_comparerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event schema_migrations_comparerRowChanged As schema_migrations_comparerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event schema_migrations_comparerRowDeleting As schema_migrations_comparerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event schema_migrations_comparerRowDeleted As schema_migrations_comparerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addschema_migrations_comparerRow(ByVal row As schema_migrations_comparerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addschema_migrations_comparerRow(ByVal VERSION As Date, ByVal DESCR As String) As schema_migrations_comparerRow
            Dim rowschema_migrations_comparerRow As schema_migrations_comparerRow = CType(Me.NewRow,schema_migrations_comparerRow)
            Dim columnValuesArray() As Object = New Object() {VERSION, DESCR}
            rowschema_migrations_comparerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowschema_migrations_comparerRow)
            Return rowschema_migrations_comparerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByVERSION(ByVal VERSION As Date) As schema_migrations_comparerRow
            Return CType(Me.Rows.Find(New Object() {VERSION}),schema_migrations_comparerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As schema_migrations_comparerDataTable = CType(MyBase.Clone,schema_migrations_comparerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New schema_migrations_comparerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnVERSION = MyBase.Columns("VERSION")
            Me.columnDESCR = MyBase.Columns("DESCR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnVERSION = New Global.System.Data.DataColumn("VERSION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVERSION)
            Me.columnDESCR = New Global.System.Data.DataColumn("DESCR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCR)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVERSION}, true))
            Me.columnVERSION.AllowDBNull = false
            Me.columnVERSION.Unique = true
            Me.columnDESCR.AllowDBNull = false
            Me.columnDESCR.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newschema_migrations_comparerRow() As schema_migrations_comparerRow
            Return CType(Me.NewRow,schema_migrations_comparerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New schema_migrations_comparerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(schema_migrations_comparerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.schema_migrations_comparerRowChangedEvent) Is Nothing) Then
                RaiseEvent schema_migrations_comparerRowChanged(Me, New schema_migrations_comparerRowChangeEvent(CType(e.Row,schema_migrations_comparerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.schema_migrations_comparerRowChangingEvent) Is Nothing) Then
                RaiseEvent schema_migrations_comparerRowChanging(Me, New schema_migrations_comparerRowChangeEvent(CType(e.Row,schema_migrations_comparerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.schema_migrations_comparerRowDeletedEvent) Is Nothing) Then
                RaiseEvent schema_migrations_comparerRowDeleted(Me, New schema_migrations_comparerRowChangeEvent(CType(e.Row,schema_migrations_comparerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.schema_migrations_comparerRowDeletingEvent) Is Nothing) Then
                RaiseEvent schema_migrations_comparerRowDeleting(Me, New schema_migrations_comparerRowChangeEvent(CType(e.Row,schema_migrations_comparerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeschema_migrations_comparerRow(ByVal row As schema_migrations_comparerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "schema_migrations_comparerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRACE_COLUMNSDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRACE_COLUMNSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSEQ As Global.System.Data.DataColumn
        
        Private columnCOLUMN_NAME As Global.System.Data.DataColumn
        
        Private columnDATA_TYPE As Global.System.Data.DataColumn
        
        Private columnCOLUMN_REGEX As Global.System.Data.DataColumn
        
        Private columnCAN_EDIT As Global.System.Data.DataColumn
        
        Private columnCAN_ADD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRACE_COLUMNS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COLUMN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATA_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COLUMN_REGEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMN_REGEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CAN_EDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAN_EDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CAN_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAN_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRACE_COLUMNSRow
            Get
                Return CType(Me.Rows(index),TRACE_COLUMNSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_COLUMNSRowChanging As TRACE_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_COLUMNSRowChanged As TRACE_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_COLUMNSRowDeleting As TRACE_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_COLUMNSRowDeleted As TRACE_COLUMNSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTRACE_COLUMNSRow(ByVal row As TRACE_COLUMNSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTRACE_COLUMNSRow(ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal COLUMN_REGEX As String, ByVal CAN_EDIT As Boolean, ByVal CAN_ADD As Boolean) As TRACE_COLUMNSRow
            Dim rowTRACE_COLUMNSRow As TRACE_COLUMNSRow = CType(Me.NewRow,TRACE_COLUMNSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, CAN_EDIT, CAN_ADD}
            rowTRACE_COLUMNSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRACE_COLUMNSRow)
            Return rowTRACE_COLUMNSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As TRACE_COLUMNSRow
            Return CType(Me.Rows.Find(New Object() {ID}),TRACE_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRACE_COLUMNSDataTable = CType(MyBase.Clone,TRACE_COLUMNSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRACE_COLUMNSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSEQ = MyBase.Columns("SEQ")
            Me.columnCOLUMN_NAME = MyBase.Columns("COLUMN_NAME")
            Me.columnDATA_TYPE = MyBase.Columns("DATA_TYPE")
            Me.columnCOLUMN_REGEX = MyBase.Columns("COLUMN_REGEX")
            Me.columnCAN_EDIT = MyBase.Columns("CAN_EDIT")
            Me.columnCAN_ADD = MyBase.Columns("CAN_ADD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSEQ = New Global.System.Data.DataColumn("SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ)
            Me.columnCOLUMN_NAME = New Global.System.Data.DataColumn("COLUMN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMN_NAME)
            Me.columnDATA_TYPE = New Global.System.Data.DataColumn("DATA_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_TYPE)
            Me.columnCOLUMN_REGEX = New Global.System.Data.DataColumn("COLUMN_REGEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMN_REGEX)
            Me.columnCAN_EDIT = New Global.System.Data.DataColumn("CAN_EDIT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAN_EDIT)
            Me.columnCAN_ADD = New Global.System.Data.DataColumn("CAN_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAN_ADD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnSEQ.AllowDBNull = false
            Me.columnCOLUMN_NAME.AllowDBNull = false
            Me.columnCOLUMN_NAME.MaxLength = 255
            Me.columnDATA_TYPE.AllowDBNull = false
            Me.columnCOLUMN_REGEX.AllowDBNull = false
            Me.columnCOLUMN_REGEX.MaxLength = 255
            Me.columnCAN_EDIT.AllowDBNull = false
            Me.columnCAN_ADD.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTRACE_COLUMNSRow() As TRACE_COLUMNSRow
            Return CType(Me.NewRow,TRACE_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRACE_COLUMNSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRACE_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRACE_COLUMNSRowChangedEvent) Is Nothing) Then
                RaiseEvent TRACE_COLUMNSRowChanged(Me, New TRACE_COLUMNSRowChangeEvent(CType(e.Row,TRACE_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRACE_COLUMNSRowChangingEvent) Is Nothing) Then
                RaiseEvent TRACE_COLUMNSRowChanging(Me, New TRACE_COLUMNSRowChangeEvent(CType(e.Row,TRACE_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRACE_COLUMNSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRACE_COLUMNSRowDeleted(Me, New TRACE_COLUMNSRowChangeEvent(CType(e.Row,TRACE_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRACE_COLUMNSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRACE_COLUMNSRowDeleting(Me, New TRACE_COLUMNSRowChangeEvent(CType(e.Row,TRACE_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTRACE_COLUMNSRow(ByVal row As TRACE_COLUMNSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRACE_COLUMNSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRACE_DATA_DATETIMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRACE_DATA_DATETIMERow)
        
        Private columnENGINE_ID As Global.System.Data.DataColumn
        
        Private columnTRACE_COLUMNS_ID As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnDATA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRACE_DATA_DATETIME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TRACE_COLUMNS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRACE_COLUMNS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRACE_DATA_DATETIMERow
            Get
                Return CType(Me.Rows(index),TRACE_DATA_DATETIMERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_DATETIMERowChanging As TRACE_DATA_DATETIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_DATETIMERowChanged As TRACE_DATA_DATETIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_DATETIMERowDeleting As TRACE_DATA_DATETIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_DATETIMERowDeleted As TRACE_DATA_DATETIMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTRACE_DATA_DATETIMERow(ByVal row As TRACE_DATA_DATETIMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTRACE_DATA_DATETIMERow(ByVal parentENGINE_LISTRowByFK_TRACE_DATA_DATETIME_ENGINE_LIST As ENGINE_LISTRow, ByVal parentTRACE_COLUMNSRowByFK_TRACE_DATA_DATETIME_TRACE_COLUMNS As TRACE_COLUMNSRow, ByVal REV_NO As Integer, ByVal DATA As Date) As TRACE_DATA_DATETIMERow
            Dim rowTRACE_DATA_DATETIMERow As TRACE_DATA_DATETIMERow = CType(Me.NewRow,TRACE_DATA_DATETIMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, REV_NO, DATA}
            If (Not (parentENGINE_LISTRowByFK_TRACE_DATA_DATETIME_ENGINE_LIST) Is Nothing) Then
                columnValuesArray(0) = parentENGINE_LISTRowByFK_TRACE_DATA_DATETIME_ENGINE_LIST(0)
            End If
            If (Not (parentTRACE_COLUMNSRowByFK_TRACE_DATA_DATETIME_TRACE_COLUMNS) Is Nothing) Then
                columnValuesArray(1) = parentTRACE_COLUMNSRowByFK_TRACE_DATA_DATETIME_TRACE_COLUMNS(0)
            End If
            rowTRACE_DATA_DATETIMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRACE_DATA_DATETIMERow)
            Return rowTRACE_DATA_DATETIMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByENGINE_IDTRACE_COLUMNS_IDREV_NO(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer) As TRACE_DATA_DATETIMERow
            Return CType(Me.Rows.Find(New Object() {ENGINE_ID, TRACE_COLUMNS_ID, REV_NO}),TRACE_DATA_DATETIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRACE_DATA_DATETIMEDataTable = CType(MyBase.Clone,TRACE_DATA_DATETIMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRACE_DATA_DATETIMEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnENGINE_ID = MyBase.Columns("ENGINE_ID")
            Me.columnTRACE_COLUMNS_ID = MyBase.Columns("TRACE_COLUMNS_ID")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnDATA = MyBase.Columns("DATA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnENGINE_ID = New Global.System.Data.DataColumn("ENGINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_ID)
            Me.columnTRACE_COLUMNS_ID = New Global.System.Data.DataColumn("TRACE_COLUMNS_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRACE_COLUMNS_ID)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnDATA = New Global.System.Data.DataColumn("DATA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnENGINE_ID, Me.columnTRACE_COLUMNS_ID, Me.columnREV_NO}, true))
            Me.columnENGINE_ID.AllowDBNull = false
            Me.columnTRACE_COLUMNS_ID.AllowDBNull = false
            Me.columnREV_NO.AllowDBNull = false
            Me.columnDATA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTRACE_DATA_DATETIMERow() As TRACE_DATA_DATETIMERow
            Return CType(Me.NewRow,TRACE_DATA_DATETIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRACE_DATA_DATETIMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRACE_DATA_DATETIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRACE_DATA_DATETIMERowChangedEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_DATETIMERowChanged(Me, New TRACE_DATA_DATETIMERowChangeEvent(CType(e.Row,TRACE_DATA_DATETIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRACE_DATA_DATETIMERowChangingEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_DATETIMERowChanging(Me, New TRACE_DATA_DATETIMERowChangeEvent(CType(e.Row,TRACE_DATA_DATETIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRACE_DATA_DATETIMERowDeletedEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_DATETIMERowDeleted(Me, New TRACE_DATA_DATETIMERowChangeEvent(CType(e.Row,TRACE_DATA_DATETIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRACE_DATA_DATETIMERowDeletingEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_DATETIMERowDeleting(Me, New TRACE_DATA_DATETIMERowChangeEvent(CType(e.Row,TRACE_DATA_DATETIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTRACE_DATA_DATETIMERow(ByVal row As TRACE_DATA_DATETIMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRACE_DATA_DATETIMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRACE_DATA_INTDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRACE_DATA_INTRow)
        
        Private columnENGINE_ID As Global.System.Data.DataColumn
        
        Private columnTRACE_COLUMNS_ID As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnDATA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRACE_DATA_INT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TRACE_COLUMNS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRACE_COLUMNS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRACE_DATA_INTRow
            Get
                Return CType(Me.Rows(index),TRACE_DATA_INTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_INTRowChanging As TRACE_DATA_INTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_INTRowChanged As TRACE_DATA_INTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_INTRowDeleting As TRACE_DATA_INTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_INTRowDeleted As TRACE_DATA_INTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTRACE_DATA_INTRow(ByVal row As TRACE_DATA_INTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTRACE_DATA_INTRow(ByVal parentENGINE_LISTRowByFK_TRACE_DATA_INT_ENGINE_LIST As ENGINE_LISTRow, ByVal parentTRACE_COLUMNSRowByFK_TRACE_DATA_INT_TRACE_COLUMNS As TRACE_COLUMNSRow, ByVal REV_NO As Integer, ByVal DATA As Integer) As TRACE_DATA_INTRow
            Dim rowTRACE_DATA_INTRow As TRACE_DATA_INTRow = CType(Me.NewRow,TRACE_DATA_INTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, REV_NO, DATA}
            If (Not (parentENGINE_LISTRowByFK_TRACE_DATA_INT_ENGINE_LIST) Is Nothing) Then
                columnValuesArray(0) = parentENGINE_LISTRowByFK_TRACE_DATA_INT_ENGINE_LIST(0)
            End If
            If (Not (parentTRACE_COLUMNSRowByFK_TRACE_DATA_INT_TRACE_COLUMNS) Is Nothing) Then
                columnValuesArray(1) = parentTRACE_COLUMNSRowByFK_TRACE_DATA_INT_TRACE_COLUMNS(0)
            End If
            rowTRACE_DATA_INTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRACE_DATA_INTRow)
            Return rowTRACE_DATA_INTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByENGINE_IDTRACE_COLUMNS_IDREV_NO(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer) As TRACE_DATA_INTRow
            Return CType(Me.Rows.Find(New Object() {ENGINE_ID, TRACE_COLUMNS_ID, REV_NO}),TRACE_DATA_INTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRACE_DATA_INTDataTable = CType(MyBase.Clone,TRACE_DATA_INTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRACE_DATA_INTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnENGINE_ID = MyBase.Columns("ENGINE_ID")
            Me.columnTRACE_COLUMNS_ID = MyBase.Columns("TRACE_COLUMNS_ID")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnDATA = MyBase.Columns("DATA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnENGINE_ID = New Global.System.Data.DataColumn("ENGINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_ID)
            Me.columnTRACE_COLUMNS_ID = New Global.System.Data.DataColumn("TRACE_COLUMNS_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRACE_COLUMNS_ID)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnDATA = New Global.System.Data.DataColumn("DATA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnENGINE_ID, Me.columnTRACE_COLUMNS_ID, Me.columnREV_NO}, true))
            Me.columnENGINE_ID.AllowDBNull = false
            Me.columnTRACE_COLUMNS_ID.AllowDBNull = false
            Me.columnREV_NO.AllowDBNull = false
            Me.columnDATA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTRACE_DATA_INTRow() As TRACE_DATA_INTRow
            Return CType(Me.NewRow,TRACE_DATA_INTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRACE_DATA_INTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRACE_DATA_INTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRACE_DATA_INTRowChangedEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_INTRowChanged(Me, New TRACE_DATA_INTRowChangeEvent(CType(e.Row,TRACE_DATA_INTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRACE_DATA_INTRowChangingEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_INTRowChanging(Me, New TRACE_DATA_INTRowChangeEvent(CType(e.Row,TRACE_DATA_INTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRACE_DATA_INTRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_INTRowDeleted(Me, New TRACE_DATA_INTRowChangeEvent(CType(e.Row,TRACE_DATA_INTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRACE_DATA_INTRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_INTRowDeleting(Me, New TRACE_DATA_INTRowChangeEvent(CType(e.Row,TRACE_DATA_INTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTRACE_DATA_INTRow(ByVal row As TRACE_DATA_INTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRACE_DATA_INTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRACE_DATA_STRDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRACE_DATA_STRRow)
        
        Private columnENGINE_ID As Global.System.Data.DataColumn
        
        Private columnTRACE_COLUMNS_ID As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnDATA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRACE_DATA_STR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TRACE_COLUMNS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRACE_COLUMNS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRACE_DATA_STRRow
            Get
                Return CType(Me.Rows(index),TRACE_DATA_STRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_STRRowChanging As TRACE_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_STRRowChanged As TRACE_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_STRRowDeleting As TRACE_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRACE_DATA_STRRowDeleted As TRACE_DATA_STRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTRACE_DATA_STRRow(ByVal row As TRACE_DATA_STRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTRACE_DATA_STRRow(ByVal parentENGINE_LISTRowByFK_TRACE_DATA_STR_ENGINE_LIST As ENGINE_LISTRow, ByVal parentTRACE_COLUMNSRowByFK_TRACE_DATA_STR_TRACE_COLUMNS As TRACE_COLUMNSRow, ByVal REV_NO As Integer, ByVal DATA As String) As TRACE_DATA_STRRow
            Dim rowTRACE_DATA_STRRow As TRACE_DATA_STRRow = CType(Me.NewRow,TRACE_DATA_STRRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, REV_NO, DATA}
            If (Not (parentENGINE_LISTRowByFK_TRACE_DATA_STR_ENGINE_LIST) Is Nothing) Then
                columnValuesArray(0) = parentENGINE_LISTRowByFK_TRACE_DATA_STR_ENGINE_LIST(0)
            End If
            If (Not (parentTRACE_COLUMNSRowByFK_TRACE_DATA_STR_TRACE_COLUMNS) Is Nothing) Then
                columnValuesArray(1) = parentTRACE_COLUMNSRowByFK_TRACE_DATA_STR_TRACE_COLUMNS(0)
            End If
            rowTRACE_DATA_STRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRACE_DATA_STRRow)
            Return rowTRACE_DATA_STRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByENGINE_IDTRACE_COLUMNS_IDREV_NO(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer) As TRACE_DATA_STRRow
            Return CType(Me.Rows.Find(New Object() {ENGINE_ID, TRACE_COLUMNS_ID, REV_NO}),TRACE_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRACE_DATA_STRDataTable = CType(MyBase.Clone,TRACE_DATA_STRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRACE_DATA_STRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnENGINE_ID = MyBase.Columns("ENGINE_ID")
            Me.columnTRACE_COLUMNS_ID = MyBase.Columns("TRACE_COLUMNS_ID")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnDATA = MyBase.Columns("DATA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnENGINE_ID = New Global.System.Data.DataColumn("ENGINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_ID)
            Me.columnTRACE_COLUMNS_ID = New Global.System.Data.DataColumn("TRACE_COLUMNS_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRACE_COLUMNS_ID)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnDATA = New Global.System.Data.DataColumn("DATA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnENGINE_ID, Me.columnTRACE_COLUMNS_ID, Me.columnREV_NO}, true))
            Me.columnENGINE_ID.AllowDBNull = false
            Me.columnTRACE_COLUMNS_ID.AllowDBNull = false
            Me.columnREV_NO.AllowDBNull = false
            Me.columnDATA.AllowDBNull = false
            Me.columnDATA.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTRACE_DATA_STRRow() As TRACE_DATA_STRRow
            Return CType(Me.NewRow,TRACE_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRACE_DATA_STRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRACE_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRACE_DATA_STRRowChangedEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_STRRowChanged(Me, New TRACE_DATA_STRRowChangeEvent(CType(e.Row,TRACE_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRACE_DATA_STRRowChangingEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_STRRowChanging(Me, New TRACE_DATA_STRRowChangeEvent(CType(e.Row,TRACE_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRACE_DATA_STRRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_STRRowDeleted(Me, New TRACE_DATA_STRRowChangeEvent(CType(e.Row,TRACE_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRACE_DATA_STRRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRACE_DATA_STRRowDeleting(Me, New TRACE_DATA_STRRowChangeEvent(CType(e.Row,TRACE_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTRACE_DATA_STRRow(ByVal row As TRACE_DATA_STRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRACE_DATA_STRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WORKING_COLUMNSDataTable
        Inherits Global.System.Data.TypedTableBase(Of WORKING_COLUMNSRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnWORKING_TYPE_ID As Global.System.Data.DataColumn
        
        Private columnSEQ As Global.System.Data.DataColumn
        
        Private columnCOLUMN_NAME As Global.System.Data.DataColumn
        
        Private columnDATA_TYPE As Global.System.Data.DataColumn
        
        Private columnCOLUMN_REGEX As Global.System.Data.DataColumn
        
        Private columnCAN_EDIT As Global.System.Data.DataColumn
        
        Private columnCAN_ADD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WORKING_COLUMNS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WORKING_TYPE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWORKING_TYPE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COLUMN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATA_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COLUMN_REGEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMN_REGEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CAN_EDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAN_EDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CAN_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAN_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WORKING_COLUMNSRow
            Get
                Return CType(Me.Rows(index),WORKING_COLUMNSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_COLUMNSRowChanging As WORKING_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_COLUMNSRowChanged As WORKING_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_COLUMNSRowDeleting As WORKING_COLUMNSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_COLUMNSRowDeleted As WORKING_COLUMNSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWORKING_COLUMNSRow(ByVal row As WORKING_COLUMNSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWORKING_COLUMNSRow(ByVal parentWORKING_TYPERowByFK_WORKING_COLUMNS_WORKING_TYPE As WORKING_TYPERow, ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal COLUMN_REGEX As String, ByVal CAN_EDIT As Boolean, ByVal CAN_ADD As Boolean) As WORKING_COLUMNSRow
            Dim rowWORKING_COLUMNSRow As WORKING_COLUMNSRow = CType(Me.NewRow,WORKING_COLUMNSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, CAN_EDIT, CAN_ADD}
            If (Not (parentWORKING_TYPERowByFK_WORKING_COLUMNS_WORKING_TYPE) Is Nothing) Then
                columnValuesArray(1) = parentWORKING_TYPERowByFK_WORKING_COLUMNS_WORKING_TYPE(0)
            End If
            rowWORKING_COLUMNSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWORKING_COLUMNSRow)
            Return rowWORKING_COLUMNSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As WORKING_COLUMNSRow
            Return CType(Me.Rows.Find(New Object() {ID}),WORKING_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WORKING_COLUMNSDataTable = CType(MyBase.Clone,WORKING_COLUMNSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WORKING_COLUMNSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnWORKING_TYPE_ID = MyBase.Columns("WORKING_TYPE_ID")
            Me.columnSEQ = MyBase.Columns("SEQ")
            Me.columnCOLUMN_NAME = MyBase.Columns("COLUMN_NAME")
            Me.columnDATA_TYPE = MyBase.Columns("DATA_TYPE")
            Me.columnCOLUMN_REGEX = MyBase.Columns("COLUMN_REGEX")
            Me.columnCAN_EDIT = MyBase.Columns("CAN_EDIT")
            Me.columnCAN_ADD = MyBase.Columns("CAN_ADD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnWORKING_TYPE_ID = New Global.System.Data.DataColumn("WORKING_TYPE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWORKING_TYPE_ID)
            Me.columnSEQ = New Global.System.Data.DataColumn("SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ)
            Me.columnCOLUMN_NAME = New Global.System.Data.DataColumn("COLUMN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMN_NAME)
            Me.columnDATA_TYPE = New Global.System.Data.DataColumn("DATA_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_TYPE)
            Me.columnCOLUMN_REGEX = New Global.System.Data.DataColumn("COLUMN_REGEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMN_REGEX)
            Me.columnCAN_EDIT = New Global.System.Data.DataColumn("CAN_EDIT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAN_EDIT)
            Me.columnCAN_ADD = New Global.System.Data.DataColumn("CAN_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAN_ADD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnWORKING_TYPE_ID.AllowDBNull = false
            Me.columnSEQ.AllowDBNull = false
            Me.columnCOLUMN_NAME.AllowDBNull = false
            Me.columnCOLUMN_NAME.MaxLength = 255
            Me.columnDATA_TYPE.AllowDBNull = false
            Me.columnCOLUMN_REGEX.AllowDBNull = false
            Me.columnCOLUMN_REGEX.MaxLength = 255
            Me.columnCAN_EDIT.AllowDBNull = false
            Me.columnCAN_ADD.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWORKING_COLUMNSRow() As WORKING_COLUMNSRow
            Return CType(Me.NewRow,WORKING_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WORKING_COLUMNSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WORKING_COLUMNSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WORKING_COLUMNSRowChangedEvent) Is Nothing) Then
                RaiseEvent WORKING_COLUMNSRowChanged(Me, New WORKING_COLUMNSRowChangeEvent(CType(e.Row,WORKING_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WORKING_COLUMNSRowChangingEvent) Is Nothing) Then
                RaiseEvent WORKING_COLUMNSRowChanging(Me, New WORKING_COLUMNSRowChangeEvent(CType(e.Row,WORKING_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WORKING_COLUMNSRowDeletedEvent) Is Nothing) Then
                RaiseEvent WORKING_COLUMNSRowDeleted(Me, New WORKING_COLUMNSRowChangeEvent(CType(e.Row,WORKING_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WORKING_COLUMNSRowDeletingEvent) Is Nothing) Then
                RaiseEvent WORKING_COLUMNSRowDeleting(Me, New WORKING_COLUMNSRowChangeEvent(CType(e.Row,WORKING_COLUMNSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWORKING_COLUMNSRow(ByVal row As WORKING_COLUMNSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WORKING_COLUMNSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WORKING_DATA_DATETIMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of WORKING_DATA_DATETIMERow)
        
        Private columnENGINE_ID As Global.System.Data.DataColumn
        
        Private columnWORKING_COLUMNS_ID As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnDATA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WORKING_DATA_DATETIME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WORKING_COLUMNS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWORKING_COLUMNS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WORKING_DATA_DATETIMERow
            Get
                Return CType(Me.Rows(index),WORKING_DATA_DATETIMERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_DATETIMERowChanging As WORKING_DATA_DATETIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_DATETIMERowChanged As WORKING_DATA_DATETIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_DATETIMERowDeleting As WORKING_DATA_DATETIMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_DATETIMERowDeleted As WORKING_DATA_DATETIMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWORKING_DATA_DATETIMERow(ByVal row As WORKING_DATA_DATETIMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWORKING_DATA_DATETIMERow(ByVal parentENGINE_LISTRowByFK_WORKING_DATA_DATETIME_ENGINE_LIST As ENGINE_LISTRow, ByVal parentWORKING_COLUMNSRowByFK_WORKING_DATA_DATETIME_WORKING_COLUMNS As WORKING_COLUMNSRow, ByVal REV_NO As Integer, ByVal DATA As Date) As WORKING_DATA_DATETIMERow
            Dim rowWORKING_DATA_DATETIMERow As WORKING_DATA_DATETIMERow = CType(Me.NewRow,WORKING_DATA_DATETIMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, REV_NO, DATA}
            If (Not (parentENGINE_LISTRowByFK_WORKING_DATA_DATETIME_ENGINE_LIST) Is Nothing) Then
                columnValuesArray(0) = parentENGINE_LISTRowByFK_WORKING_DATA_DATETIME_ENGINE_LIST(0)
            End If
            If (Not (parentWORKING_COLUMNSRowByFK_WORKING_DATA_DATETIME_WORKING_COLUMNS) Is Nothing) Then
                columnValuesArray(1) = parentWORKING_COLUMNSRowByFK_WORKING_DATA_DATETIME_WORKING_COLUMNS(0)
            End If
            rowWORKING_DATA_DATETIMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWORKING_DATA_DATETIMERow)
            Return rowWORKING_DATA_DATETIMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByENGINE_IDWORKING_COLUMNS_IDREV_NO(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer) As WORKING_DATA_DATETIMERow
            Return CType(Me.Rows.Find(New Object() {ENGINE_ID, WORKING_COLUMNS_ID, REV_NO}),WORKING_DATA_DATETIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WORKING_DATA_DATETIMEDataTable = CType(MyBase.Clone,WORKING_DATA_DATETIMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WORKING_DATA_DATETIMEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnENGINE_ID = MyBase.Columns("ENGINE_ID")
            Me.columnWORKING_COLUMNS_ID = MyBase.Columns("WORKING_COLUMNS_ID")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnDATA = MyBase.Columns("DATA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnENGINE_ID = New Global.System.Data.DataColumn("ENGINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_ID)
            Me.columnWORKING_COLUMNS_ID = New Global.System.Data.DataColumn("WORKING_COLUMNS_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWORKING_COLUMNS_ID)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnDATA = New Global.System.Data.DataColumn("DATA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnENGINE_ID, Me.columnWORKING_COLUMNS_ID, Me.columnREV_NO}, true))
            Me.columnENGINE_ID.AllowDBNull = false
            Me.columnWORKING_COLUMNS_ID.AllowDBNull = false
            Me.columnREV_NO.AllowDBNull = false
            Me.columnDATA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWORKING_DATA_DATETIMERow() As WORKING_DATA_DATETIMERow
            Return CType(Me.NewRow,WORKING_DATA_DATETIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WORKING_DATA_DATETIMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WORKING_DATA_DATETIMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WORKING_DATA_DATETIMERowChangedEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_DATETIMERowChanged(Me, New WORKING_DATA_DATETIMERowChangeEvent(CType(e.Row,WORKING_DATA_DATETIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WORKING_DATA_DATETIMERowChangingEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_DATETIMERowChanging(Me, New WORKING_DATA_DATETIMERowChangeEvent(CType(e.Row,WORKING_DATA_DATETIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WORKING_DATA_DATETIMERowDeletedEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_DATETIMERowDeleted(Me, New WORKING_DATA_DATETIMERowChangeEvent(CType(e.Row,WORKING_DATA_DATETIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WORKING_DATA_DATETIMERowDeletingEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_DATETIMERowDeleting(Me, New WORKING_DATA_DATETIMERowChangeEvent(CType(e.Row,WORKING_DATA_DATETIMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWORKING_DATA_DATETIMERow(ByVal row As WORKING_DATA_DATETIMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WORKING_DATA_DATETIMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WORKING_DATA_INTDataTable
        Inherits Global.System.Data.TypedTableBase(Of WORKING_DATA_INTRow)
        
        Private columnENGINE_ID As Global.System.Data.DataColumn
        
        Private columnWORKING_COLUMNS_ID As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnDATA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WORKING_DATA_INT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WORKING_COLUMNS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWORKING_COLUMNS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WORKING_DATA_INTRow
            Get
                Return CType(Me.Rows(index),WORKING_DATA_INTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_INTRowChanging As WORKING_DATA_INTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_INTRowChanged As WORKING_DATA_INTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_INTRowDeleting As WORKING_DATA_INTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_INTRowDeleted As WORKING_DATA_INTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWORKING_DATA_INTRow(ByVal row As WORKING_DATA_INTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWORKING_DATA_INTRow(ByVal parentENGINE_LISTRowByFK_WORKING_DATA_INT_ENGINE_LIST As ENGINE_LISTRow, ByVal parentWORKING_COLUMNSRowByFK_WORKING_DATA_INT_WORKING_COLUMNS As WORKING_COLUMNSRow, ByVal REV_NO As Integer, ByVal DATA As Integer) As WORKING_DATA_INTRow
            Dim rowWORKING_DATA_INTRow As WORKING_DATA_INTRow = CType(Me.NewRow,WORKING_DATA_INTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, REV_NO, DATA}
            If (Not (parentENGINE_LISTRowByFK_WORKING_DATA_INT_ENGINE_LIST) Is Nothing) Then
                columnValuesArray(0) = parentENGINE_LISTRowByFK_WORKING_DATA_INT_ENGINE_LIST(0)
            End If
            If (Not (parentWORKING_COLUMNSRowByFK_WORKING_DATA_INT_WORKING_COLUMNS) Is Nothing) Then
                columnValuesArray(1) = parentWORKING_COLUMNSRowByFK_WORKING_DATA_INT_WORKING_COLUMNS(0)
            End If
            rowWORKING_DATA_INTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWORKING_DATA_INTRow)
            Return rowWORKING_DATA_INTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByENGINE_IDWORKING_COLUMNS_IDREV_NO(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer) As WORKING_DATA_INTRow
            Return CType(Me.Rows.Find(New Object() {ENGINE_ID, WORKING_COLUMNS_ID, REV_NO}),WORKING_DATA_INTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WORKING_DATA_INTDataTable = CType(MyBase.Clone,WORKING_DATA_INTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WORKING_DATA_INTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnENGINE_ID = MyBase.Columns("ENGINE_ID")
            Me.columnWORKING_COLUMNS_ID = MyBase.Columns("WORKING_COLUMNS_ID")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnDATA = MyBase.Columns("DATA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnENGINE_ID = New Global.System.Data.DataColumn("ENGINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_ID)
            Me.columnWORKING_COLUMNS_ID = New Global.System.Data.DataColumn("WORKING_COLUMNS_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWORKING_COLUMNS_ID)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnDATA = New Global.System.Data.DataColumn("DATA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnENGINE_ID, Me.columnWORKING_COLUMNS_ID, Me.columnREV_NO}, true))
            Me.columnENGINE_ID.AllowDBNull = false
            Me.columnWORKING_COLUMNS_ID.AllowDBNull = false
            Me.columnREV_NO.AllowDBNull = false
            Me.columnDATA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWORKING_DATA_INTRow() As WORKING_DATA_INTRow
            Return CType(Me.NewRow,WORKING_DATA_INTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WORKING_DATA_INTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WORKING_DATA_INTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WORKING_DATA_INTRowChangedEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_INTRowChanged(Me, New WORKING_DATA_INTRowChangeEvent(CType(e.Row,WORKING_DATA_INTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WORKING_DATA_INTRowChangingEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_INTRowChanging(Me, New WORKING_DATA_INTRowChangeEvent(CType(e.Row,WORKING_DATA_INTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WORKING_DATA_INTRowDeletedEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_INTRowDeleted(Me, New WORKING_DATA_INTRowChangeEvent(CType(e.Row,WORKING_DATA_INTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WORKING_DATA_INTRowDeletingEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_INTRowDeleting(Me, New WORKING_DATA_INTRowChangeEvent(CType(e.Row,WORKING_DATA_INTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWORKING_DATA_INTRow(ByVal row As WORKING_DATA_INTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WORKING_DATA_INTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WORKING_DATA_STRDataTable
        Inherits Global.System.Data.TypedTableBase(Of WORKING_DATA_STRRow)
        
        Private columnENGINE_ID As Global.System.Data.DataColumn
        
        Private columnWORKING_COLUMNS_ID As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnDATA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WORKING_DATA_STR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WORKING_COLUMNS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWORKING_COLUMNS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WORKING_DATA_STRRow
            Get
                Return CType(Me.Rows(index),WORKING_DATA_STRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_STRRowChanging As WORKING_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_STRRowChanged As WORKING_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_STRRowDeleting As WORKING_DATA_STRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_DATA_STRRowDeleted As WORKING_DATA_STRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWORKING_DATA_STRRow(ByVal row As WORKING_DATA_STRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWORKING_DATA_STRRow(ByVal parentENGINE_LISTRowByFK_WORKING_DATA_STR_ENGINE_LIST As ENGINE_LISTRow, ByVal parentWORKING_COLUMNSRowByFK_WORKING_DATA_STR_WORKING_COLUMNS As WORKING_COLUMNSRow, ByVal REV_NO As Integer, ByVal DATA As String) As WORKING_DATA_STRRow
            Dim rowWORKING_DATA_STRRow As WORKING_DATA_STRRow = CType(Me.NewRow,WORKING_DATA_STRRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, REV_NO, DATA}
            If (Not (parentENGINE_LISTRowByFK_WORKING_DATA_STR_ENGINE_LIST) Is Nothing) Then
                columnValuesArray(0) = parentENGINE_LISTRowByFK_WORKING_DATA_STR_ENGINE_LIST(0)
            End If
            If (Not (parentWORKING_COLUMNSRowByFK_WORKING_DATA_STR_WORKING_COLUMNS) Is Nothing) Then
                columnValuesArray(1) = parentWORKING_COLUMNSRowByFK_WORKING_DATA_STR_WORKING_COLUMNS(0)
            End If
            rowWORKING_DATA_STRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWORKING_DATA_STRRow)
            Return rowWORKING_DATA_STRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByENGINE_IDWORKING_COLUMNS_IDREV_NO(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer) As WORKING_DATA_STRRow
            Return CType(Me.Rows.Find(New Object() {ENGINE_ID, WORKING_COLUMNS_ID, REV_NO}),WORKING_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WORKING_DATA_STRDataTable = CType(MyBase.Clone,WORKING_DATA_STRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WORKING_DATA_STRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnENGINE_ID = MyBase.Columns("ENGINE_ID")
            Me.columnWORKING_COLUMNS_ID = MyBase.Columns("WORKING_COLUMNS_ID")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnDATA = MyBase.Columns("DATA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnENGINE_ID = New Global.System.Data.DataColumn("ENGINE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINE_ID)
            Me.columnWORKING_COLUMNS_ID = New Global.System.Data.DataColumn("WORKING_COLUMNS_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWORKING_COLUMNS_ID)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnDATA = New Global.System.Data.DataColumn("DATA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnENGINE_ID, Me.columnWORKING_COLUMNS_ID, Me.columnREV_NO}, true))
            Me.columnENGINE_ID.AllowDBNull = false
            Me.columnWORKING_COLUMNS_ID.AllowDBNull = false
            Me.columnREV_NO.AllowDBNull = false
            Me.columnDATA.AllowDBNull = false
            Me.columnDATA.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWORKING_DATA_STRRow() As WORKING_DATA_STRRow
            Return CType(Me.NewRow,WORKING_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WORKING_DATA_STRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WORKING_DATA_STRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WORKING_DATA_STRRowChangedEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_STRRowChanged(Me, New WORKING_DATA_STRRowChangeEvent(CType(e.Row,WORKING_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WORKING_DATA_STRRowChangingEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_STRRowChanging(Me, New WORKING_DATA_STRRowChangeEvent(CType(e.Row,WORKING_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WORKING_DATA_STRRowDeletedEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_STRRowDeleted(Me, New WORKING_DATA_STRRowChangeEvent(CType(e.Row,WORKING_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WORKING_DATA_STRRowDeletingEvent) Is Nothing) Then
                RaiseEvent WORKING_DATA_STRRowDeleting(Me, New WORKING_DATA_STRRowChangeEvent(CType(e.Row,WORKING_DATA_STRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWORKING_DATA_STRRow(ByVal row As WORKING_DATA_STRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WORKING_DATA_STRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WORKING_TYPEDataTable
        Inherits Global.System.Data.TypedTableBase(Of WORKING_TYPERow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnSEQ As Global.System.Data.DataColumn
        
        Private columnWORKING_TYPE_NAME As Global.System.Data.DataColumn
        
        Private columnMAX_REV As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WORKING_TYPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WORKING_TYPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWORKING_TYPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAX_REVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAX_REV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WORKING_TYPERow
            Get
                Return CType(Me.Rows(index),WORKING_TYPERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_TYPERowChanging As WORKING_TYPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_TYPERowChanged As WORKING_TYPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_TYPERowDeleting As WORKING_TYPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WORKING_TYPERowDeleted As WORKING_TYPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWORKING_TYPERow(ByVal row As WORKING_TYPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWORKING_TYPERow(ByVal SEQ As Integer, ByVal WORKING_TYPE_NAME As String, ByVal MAX_REV As Integer) As WORKING_TYPERow
            Dim rowWORKING_TYPERow As WORKING_TYPERow = CType(Me.NewRow,WORKING_TYPERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEQ, WORKING_TYPE_NAME, MAX_REV}
            rowWORKING_TYPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWORKING_TYPERow)
            Return rowWORKING_TYPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As WORKING_TYPERow
            Return CType(Me.Rows.Find(New Object() {ID}),WORKING_TYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WORKING_TYPEDataTable = CType(MyBase.Clone,WORKING_TYPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WORKING_TYPEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnSEQ = MyBase.Columns("SEQ")
            Me.columnWORKING_TYPE_NAME = MyBase.Columns("WORKING_TYPE_NAME")
            Me.columnMAX_REV = MyBase.Columns("MAX_REV")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnSEQ = New Global.System.Data.DataColumn("SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ)
            Me.columnWORKING_TYPE_NAME = New Global.System.Data.DataColumn("WORKING_TYPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWORKING_TYPE_NAME)
            Me.columnMAX_REV = New Global.System.Data.DataColumn("MAX_REV", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAX_REV)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnSEQ.AllowDBNull = false
            Me.columnWORKING_TYPE_NAME.AllowDBNull = false
            Me.columnWORKING_TYPE_NAME.MaxLength = 255
            Me.columnMAX_REV.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWORKING_TYPERow() As WORKING_TYPERow
            Return CType(Me.NewRow,WORKING_TYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WORKING_TYPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WORKING_TYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WORKING_TYPERowChangedEvent) Is Nothing) Then
                RaiseEvent WORKING_TYPERowChanged(Me, New WORKING_TYPERowChangeEvent(CType(e.Row,WORKING_TYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WORKING_TYPERowChangingEvent) Is Nothing) Then
                RaiseEvent WORKING_TYPERowChanging(Me, New WORKING_TYPERowChangeEvent(CType(e.Row,WORKING_TYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WORKING_TYPERowDeletedEvent) Is Nothing) Then
                RaiseEvent WORKING_TYPERowDeleted(Me, New WORKING_TYPERowChangeEvent(CType(e.Row,WORKING_TYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WORKING_TYPERowDeletingEvent) Is Nothing) Then
                RaiseEvent WORKING_TYPERowDeleting(Me, New WORKING_TYPERowChangeEvent(CType(e.Row,WORKING_TYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWORKING_TYPERow(ByVal row As WORKING_TYPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As iemt_pdt_es01_developmentDataSet = New iemt_pdt_es01_developmentDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WORKING_TYPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BALL_ENGINE_LISTRow
        Inherits Global.System.Data.DataRow
        
        Private tableBALL_ENGINE_LIST As BALL_ENGINE_LISTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBALL_ENGINE_LIST = CType(Me.Table,BALL_ENGINE_LISTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_TYPE() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.ENGINE_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.ENGINE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_NO() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.ENGINE_NOColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.ENGINE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_ASM_NO() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.ENGINE_ASM_NOColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.ENGINE_ASM_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BOOK() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.BOOKColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.BOOKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property YEAR() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.YEARColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MODEL_CODE() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.MODEL_CODEColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UNIT_NO() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.UNIT_NOColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.UNIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AT_MT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.AT_MTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.AT_MTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMISSION() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.EMISSIONColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.EMISSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INJ_MODEL_CODE() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INJ_MODEL_CODEColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INJ_MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_001() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_001Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_001Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_002() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_002Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_002Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_003() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_003Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_003Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_004() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_004Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_004Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_005() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_005Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_005Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_006() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_006Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_006Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_007() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_007Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_007Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_008() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_008Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_008Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_009() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_009Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_009Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_010() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_010Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_010Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_011() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_011Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_011Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_012() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_012Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_012Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_013() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_013Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_013Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_014() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_014Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_014Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_015() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_015Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_015Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_016() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_016Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_016Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_017() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SPARE_017Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SPARE_017Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SB_DATA_SB_PARTS_NO() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SB_DATA_SB_PARTS_NOColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SB_DATA_SB_PARTS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SB_DATA_SB_SERIAL_NO() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SB_DATA_SB_SERIAL_NOColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SB_DATA_SB_SERIAL_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SB_DATA_GASKET_GRADE() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.SB_DATA_GASKET_GRADEColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.SB_DATA_GASKET_GRADEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINE_ON_TIME() As Date
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.LINE_ON_TIMEColumn),Date)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.LINE_ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINE_OFF_TIME() As Date
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.LINE_OFF_TIMEColumn),Date)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.LINE_OFF_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_BCT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_BCTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_BCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_CRT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_CRTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_CRTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_CTM() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_CTMColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_CTMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_SPARE01() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_SPARE01Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_SPARE01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_SPARE02() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_SPARE02Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_SPARE02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_SPARE03() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_SPARE03Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_SBLO_SPARE03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_CCT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_CCTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_CCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_DPT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_DPTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_DPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_FWT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_FWTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_FWTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_SPARE01() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_SPARE01Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_SPARE01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_SPARE02() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_SPARE02Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_SPARE02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_SPARE03() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_SPARE03Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MALO_SPARE03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_HDT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_HDTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_HDTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_CCT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_CCTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_CCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_HCT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_HCTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_HCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_PPT() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_PPTColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_PPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_SPARE01() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_SPARE01Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_SPARE01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_SPARE02() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_SPARE02Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_SPARE02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_SPARE03() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_SPARE03Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_SPARE03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_SPARE04() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_SPARE04Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.RPCOCF_MBLO_SPARE04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION01() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION01Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION02() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION02Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION03() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION03Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION04() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION04Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION05() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION05Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION06() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION06Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION06Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION_TIME01() As Date
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION_TIME01Column),Date)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION_TIME01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION11() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION11Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION12() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION12Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION13() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION13Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION14() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION14Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION15() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION15Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION16() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION16Column),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION16Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION_TIME02() As Date
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION_TIME02Column),Date)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.INSPSJ_INSPECTION_TIME02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_BY() As String
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.CREATED_BYColumn),String)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.CREATED_BYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_BY() As String
            Get
                Try 
                    Return CType(Me(Me.tableBALL_ENGINE_LIST.UPDATED_BYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_BY' in table 'BALL_ENGINE_LIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.UPDATED_BYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_WHEN() As Date
            Get
                Return CType(Me(Me.tableBALL_ENGINE_LIST.CREATED_WHENColumn),Date)
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.CREATED_WHENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_WHEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableBALL_ENGINE_LIST.UPDATED_WHENColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_WHEN' in table 'BALL_ENGINE_LIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBALL_ENGINE_LIST.UPDATED_WHENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_BYNull() As Boolean
            Return Me.IsNull(Me.tableBALL_ENGINE_LIST.UPDATED_BYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_BYNull()
            Me(Me.tableBALL_ENGINE_LIST.UPDATED_BYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_WHENNull() As Boolean
            Return Me.IsNull(Me.tableBALL_ENGINE_LIST.UPDATED_WHENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_WHENNull()
            Me(Me.tableBALL_ENGINE_LIST.UPDATED_WHENColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ENGINE_LISTRow
        Inherits Global.System.Data.DataRow
        
        Private tableENGINE_LIST As ENGINE_LISTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableENGINE_LIST = CType(Me.Table,ENGINE_LISTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableENGINE_LIST.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableENGINE_LIST.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_TYPE() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.ENGINE_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.ENGINE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_NO() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.ENGINE_NOColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.ENGINE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_ASM_NO() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.ENGINE_ASM_NOColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.ENGINE_ASM_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BOOK() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.BOOKColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.BOOKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property YEAR() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.YEARColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MODEL_CODE() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.MODEL_CODEColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UNIT_NO() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.UNIT_NOColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.UNIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AT_MT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.AT_MTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.AT_MTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMISSION() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.EMISSIONColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.EMISSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INJ_MODEL_CODE() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INJ_MODEL_CODEColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INJ_MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SPARE_001() As String
            Get
                Try 
                    Return CType(Me(Me.tableENGINE_LIST.SPARE_001Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPARE_001' in table 'ENGINE_LIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINE_LIST.SPARE_001Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SB_DATA_SB_PARTS_NO() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.SB_DATA_SB_PARTS_NOColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.SB_DATA_SB_PARTS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SB_DATA_SB_SERIAL_NO() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.SB_DATA_SB_SERIAL_NOColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.SB_DATA_SB_SERIAL_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SB_DATA_GASKET_GRADE() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.SB_DATA_GASKET_GRADEColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.SB_DATA_GASKET_GRADEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINE_ON_TIME() As Date
            Get
                Return CType(Me(Me.tableENGINE_LIST.LINE_ON_TIMEColumn),Date)
            End Get
            Set
                Me(Me.tableENGINE_LIST.LINE_ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINE_OFF_TIME() As Date
            Get
                Return CType(Me(Me.tableENGINE_LIST.LINE_OFF_TIMEColumn),Date)
            End Get
            Set
                Me(Me.tableENGINE_LIST.LINE_OFF_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_BCT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_SBLO_BCTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_SBLO_BCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_CRT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_SBLO_CRTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_SBLO_CRTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_CTM() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_SBLO_CTMColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_SBLO_CTMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_SPARE01() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_SBLO_SPARE01Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_SBLO_SPARE01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_SPARE02() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_SBLO_SPARE02Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_SBLO_SPARE02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_SBLO_SPARE03() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_SBLO_SPARE03Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_SBLO_SPARE03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_CCT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MALO_CCTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MALO_CCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_DPT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MALO_DPTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MALO_DPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_FWT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MALO_FWTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MALO_FWTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_SPARE01() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MALO_SPARE01Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MALO_SPARE01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_SPARE02() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MALO_SPARE02Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MALO_SPARE02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MALO_SPARE03() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MALO_SPARE03Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MALO_SPARE03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_HDT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MBLO_HDTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MBLO_HDTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_CCT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MBLO_CCTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MBLO_CCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_HCT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MBLO_HCTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MBLO_HCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_PPT() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MBLO_PPTColumn),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MBLO_PPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_SPARE01() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MBLO_SPARE01Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MBLO_SPARE01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_SPARE02() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MBLO_SPARE02Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MBLO_SPARE02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_SPARE03() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MBLO_SPARE03Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MBLO_SPARE03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RPCOCF_MBLO_SPARE04() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.RPCOCF_MBLO_SPARE04Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.RPCOCF_MBLO_SPARE04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION01() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION01Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION02() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION02Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION03() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION03Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION04() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION04Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION05() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION05Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION06() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION06Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION06Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION_TIME01() As Date
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION_TIME01Column),Date)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION_TIME01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION11() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION11Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION12() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION12Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION13() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION13Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION14() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION14Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION15() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION15Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION16() As String
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION16Column),String)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION16Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INSPSJ_INSPECTION_TIME02() As Date
            Get
                Return CType(Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION_TIME02Column),Date)
            End Get
            Set
                Me(Me.tableENGINE_LIST.INSPSJ_INSPECTION_TIME02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_BY() As String
            Get
                Try 
                    Return CType(Me(Me.tableENGINE_LIST.UPDATED_BYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_BY' in table 'ENGINE_LIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINE_LIST.UPDATED_BYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_WHEN() As Date
            Get
                Return CType(Me(Me.tableENGINE_LIST.CREATED_WHENColumn),Date)
            End Get
            Set
                Me(Me.tableENGINE_LIST.CREATED_WHENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_WHEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableENGINE_LIST.UPDATED_WHENColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_WHEN' in table 'ENGINE_LIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINE_LIST.UPDATED_WHENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSPARE_001Null() As Boolean
            Return Me.IsNull(Me.tableENGINE_LIST.SPARE_001Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSPARE_001Null()
            Me(Me.tableENGINE_LIST.SPARE_001Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_BYNull() As Boolean
            Return Me.IsNull(Me.tableENGINE_LIST.UPDATED_BYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_BYNull()
            Me(Me.tableENGINE_LIST.UPDATED_BYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_WHENNull() As Boolean
            Return Me.IsNull(Me.tableENGINE_LIST.UPDATED_WHENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_WHENNull()
            Me(Me.tableENGINE_LIST.UPDATED_WHENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTRACE_DATA_DATETIMERows() As TRACE_DATA_DATETIMERow()
            If (Me.Table.ChildRelations("FK_TRACE_DATA_DATETIME_ENGINE_LIST") Is Nothing) Then
                Return New TRACE_DATA_DATETIMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRACE_DATA_DATETIME_ENGINE_LIST")),TRACE_DATA_DATETIMERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTRACE_DATA_INTRows() As TRACE_DATA_INTRow()
            If (Me.Table.ChildRelations("FK_TRACE_DATA_INT_ENGINE_LIST") Is Nothing) Then
                Return New TRACE_DATA_INTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRACE_DATA_INT_ENGINE_LIST")),TRACE_DATA_INTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTRACE_DATA_STRRows() As TRACE_DATA_STRRow()
            If (Me.Table.ChildRelations("FK_TRACE_DATA_STR_ENGINE_LIST") Is Nothing) Then
                Return New TRACE_DATA_STRRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRACE_DATA_STR_ENGINE_LIST")),TRACE_DATA_STRRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetWORKING_DATA_DATETIMERows() As WORKING_DATA_DATETIMERow()
            If (Me.Table.ChildRelations("FK_WORKING_DATA_DATETIME_ENGINE_LIST") Is Nothing) Then
                Return New WORKING_DATA_DATETIMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_WORKING_DATA_DATETIME_ENGINE_LIST")),WORKING_DATA_DATETIMERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetWORKING_DATA_INTRows() As WORKING_DATA_INTRow()
            If (Me.Table.ChildRelations("FK_WORKING_DATA_INT_ENGINE_LIST") Is Nothing) Then
                Return New WORKING_DATA_INTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_WORKING_DATA_INT_ENGINE_LIST")),WORKING_DATA_INTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetWORKING_DATA_STRRows() As WORKING_DATA_STRRow()
            If (Me.Table.ChildRelations("FK_WORKING_DATA_STR_ENGINE_LIST") Is Nothing) Then
                Return New WORKING_DATA_STRRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_WORKING_DATA_STR_ENGINE_LIST")),WORKING_DATA_STRRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class IMPORT_CELL_MAPPINGRow
        Inherits Global.System.Data.DataRow
        
        Private tableIMPORT_CELL_MAPPING As IMPORT_CELL_MAPPINGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPORT_CELL_MAPPING = CType(Me.Table,IMPORT_CELL_MAPPINGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableIMPORT_CELL_MAPPING.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableIMPORT_CELL_MAPPING.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA_CATEGORY() As Byte
            Get
                Return CType(Me(Me.tableIMPORT_CELL_MAPPING.DATA_CATEGORYColumn),Byte)
            End Get
            Set
                Me(Me.tableIMPORT_CELL_MAPPING.DATA_CATEGORYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COLUMN_ID() As Integer
            Get
                Return CType(Me(Me.tableIMPORT_CELL_MAPPING.COLUMN_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableIMPORT_CELL_MAPPING.COLUMN_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property POSITION() As Integer
            Get
                Return CType(Me(Me.tableIMPORT_CELL_MAPPING.POSITIONColumn),Integer)
            End Get
            Set
                Me(Me.tableIMPORT_CELL_MAPPING.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LENGTH() As Integer
            Get
                Return CType(Me(Me.tableIMPORT_CELL_MAPPING.LENGTHColumn),Integer)
            End Get
            Set
                Me(Me.tableIMPORT_CELL_MAPPING.LENGTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REV() As Integer
            Get
                Return CType(Me(Me.tableIMPORT_CELL_MAPPING.REVColumn),Integer)
            End Get
            Set
                Me(Me.tableIMPORT_CELL_MAPPING.REVColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class IMPORT_ENGINE_MAPPINGRow
        Inherits Global.System.Data.DataRow
        
        Private tableIMPORT_ENGINE_MAPPING As IMPORT_ENGINE_MAPPINGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPORT_ENGINE_MAPPING = CType(Me.Table,IMPORT_ENGINE_MAPPINGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableIMPORT_ENGINE_MAPPING.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableIMPORT_ENGINE_MAPPING.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COLUMN_NAME() As String
            Get
                Return CType(Me(Me.tableIMPORT_ENGINE_MAPPING.COLUMN_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableIMPORT_ENGINE_MAPPING.COLUMN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA_TYPE() As Byte
            Get
                Return CType(Me(Me.tableIMPORT_ENGINE_MAPPING.DATA_TYPEColumn),Byte)
            End Get
            Set
                Me(Me.tableIMPORT_ENGINE_MAPPING.DATA_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property POSITION() As Integer
            Get
                Return CType(Me(Me.tableIMPORT_ENGINE_MAPPING.POSITIONColumn),Integer)
            End Get
            Set
                Me(Me.tableIMPORT_ENGINE_MAPPING.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LENGTH() As Integer
            Get
                Return CType(Me(Me.tableIMPORT_ENGINE_MAPPING.LENGTHColumn),Integer)
            End Get
            Set
                Me(Me.tableIMPORT_ENGINE_MAPPING.LENGTHColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class schema_migrationsRow
        Inherits Global.System.Data.DataRow
        
        Private tableschema_migrations As schema_migrationsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableschema_migrations = CType(Me.Table,schema_migrationsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VERSION() As Date
            Get
                Return CType(Me(Me.tableschema_migrations.VERSIONColumn),Date)
            End Get
            Set
                Me(Me.tableschema_migrations.VERSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCR() As String
            Get
                Return CType(Me(Me.tableschema_migrations.DESCRColumn),String)
            End Get
            Set
                Me(Me.tableschema_migrations.DESCRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SQL_SCRIPT() As String
            Get
                Return CType(Me(Me.tableschema_migrations.SQL_SCRIPTColumn),String)
            End Get
            Set
                Me(Me.tableschema_migrations.SQL_SCRIPTColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class schema_migrations_comparerRow
        Inherits Global.System.Data.DataRow
        
        Private tableschema_migrations_comparer As schema_migrations_comparerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableschema_migrations_comparer = CType(Me.Table,schema_migrations_comparerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VERSION() As Date
            Get
                Return CType(Me(Me.tableschema_migrations_comparer.VERSIONColumn),Date)
            End Get
            Set
                Me(Me.tableschema_migrations_comparer.VERSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCR() As String
            Get
                Return CType(Me(Me.tableschema_migrations_comparer.DESCRColumn),String)
            End Get
            Set
                Me(Me.tableschema_migrations_comparer.DESCRColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TRACE_COLUMNSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRACE_COLUMNS As TRACE_COLUMNSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRACE_COLUMNS = CType(Me.Table,TRACE_COLUMNSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableTRACE_COLUMNS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_COLUMNS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ() As Integer
            Get
                Return CType(Me(Me.tableTRACE_COLUMNS.SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_COLUMNS.SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COLUMN_NAME() As String
            Get
                Return CType(Me(Me.tableTRACE_COLUMNS.COLUMN_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableTRACE_COLUMNS.COLUMN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA_TYPE() As Byte
            Get
                Return CType(Me(Me.tableTRACE_COLUMNS.DATA_TYPEColumn),Byte)
            End Get
            Set
                Me(Me.tableTRACE_COLUMNS.DATA_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COLUMN_REGEX() As String
            Get
                Return CType(Me(Me.tableTRACE_COLUMNS.COLUMN_REGEXColumn),String)
            End Get
            Set
                Me(Me.tableTRACE_COLUMNS.COLUMN_REGEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CAN_EDIT() As Boolean
            Get
                Return CType(Me(Me.tableTRACE_COLUMNS.CAN_EDITColumn),Boolean)
            End Get
            Set
                Me(Me.tableTRACE_COLUMNS.CAN_EDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CAN_ADD() As Boolean
            Get
                Return CType(Me(Me.tableTRACE_COLUMNS.CAN_ADDColumn),Boolean)
            End Get
            Set
                Me(Me.tableTRACE_COLUMNS.CAN_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTRACE_DATA_DATETIMERows() As TRACE_DATA_DATETIMERow()
            If (Me.Table.ChildRelations("FK_TRACE_DATA_DATETIME_TRACE_COLUMNS") Is Nothing) Then
                Return New TRACE_DATA_DATETIMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRACE_DATA_DATETIME_TRACE_COLUMNS")),TRACE_DATA_DATETIMERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTRACE_DATA_INTRows() As TRACE_DATA_INTRow()
            If (Me.Table.ChildRelations("FK_TRACE_DATA_INT_TRACE_COLUMNS") Is Nothing) Then
                Return New TRACE_DATA_INTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRACE_DATA_INT_TRACE_COLUMNS")),TRACE_DATA_INTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTRACE_DATA_STRRows() As TRACE_DATA_STRRow()
            If (Me.Table.ChildRelations("FK_TRACE_DATA_STR_TRACE_COLUMNS") Is Nothing) Then
                Return New TRACE_DATA_STRRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TRACE_DATA_STR_TRACE_COLUMNS")),TRACE_DATA_STRRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TRACE_DATA_DATETIMERow
        Inherits Global.System.Data.DataRow
        
        Private tableTRACE_DATA_DATETIME As TRACE_DATA_DATETIMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRACE_DATA_DATETIME = CType(Me.Table,TRACE_DATA_DATETIMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_ID() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_DATETIME.ENGINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_DATETIME.ENGINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TRACE_COLUMNS_ID() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_DATETIME.TRACE_COLUMNS_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_DATETIME.TRACE_COLUMNS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REV_NO() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_DATETIME.REV_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_DATETIME.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA() As Date
            Get
                Return CType(Me(Me.tableTRACE_DATA_DATETIME.DATAColumn),Date)
            End Get
            Set
                Me(Me.tableTRACE_DATA_DATETIME.DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_LISTRow() As ENGINE_LISTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRACE_DATA_DATETIME_ENGINE_LIST")),ENGINE_LISTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRACE_DATA_DATETIME_ENGINE_LIST"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TRACE_COLUMNSRow() As TRACE_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRACE_DATA_DATETIME_TRACE_COLUMNS")),TRACE_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRACE_DATA_DATETIME_TRACE_COLUMNS"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TRACE_DATA_INTRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRACE_DATA_INT As TRACE_DATA_INTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRACE_DATA_INT = CType(Me.Table,TRACE_DATA_INTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_ID() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_INT.ENGINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_INT.ENGINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TRACE_COLUMNS_ID() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_INT.TRACE_COLUMNS_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_INT.TRACE_COLUMNS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REV_NO() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_INT.REV_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_INT.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_INT.DATAColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_INT.DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_LISTRow() As ENGINE_LISTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRACE_DATA_INT_ENGINE_LIST")),ENGINE_LISTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRACE_DATA_INT_ENGINE_LIST"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TRACE_COLUMNSRow() As TRACE_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRACE_DATA_INT_TRACE_COLUMNS")),TRACE_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRACE_DATA_INT_TRACE_COLUMNS"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TRACE_DATA_STRRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRACE_DATA_STR As TRACE_DATA_STRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRACE_DATA_STR = CType(Me.Table,TRACE_DATA_STRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_ID() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_STR.ENGINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_STR.ENGINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TRACE_COLUMNS_ID() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_STR.TRACE_COLUMNS_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_STR.TRACE_COLUMNS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REV_NO() As Integer
            Get
                Return CType(Me(Me.tableTRACE_DATA_STR.REV_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableTRACE_DATA_STR.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA() As String
            Get
                Return CType(Me(Me.tableTRACE_DATA_STR.DATAColumn),String)
            End Get
            Set
                Me(Me.tableTRACE_DATA_STR.DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_LISTRow() As ENGINE_LISTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRACE_DATA_STR_ENGINE_LIST")),ENGINE_LISTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRACE_DATA_STR_ENGINE_LIST"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TRACE_COLUMNSRow() As TRACE_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TRACE_DATA_STR_TRACE_COLUMNS")),TRACE_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TRACE_DATA_STR_TRACE_COLUMNS"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WORKING_COLUMNSRow
        Inherits Global.System.Data.DataRow
        
        Private tableWORKING_COLUMNS As WORKING_COLUMNSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWORKING_COLUMNS = CType(Me.Table,WORKING_COLUMNSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_COLUMNS.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_COLUMNS.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_TYPE_ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_COLUMNS.WORKING_TYPE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_COLUMNS.WORKING_TYPE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ() As Integer
            Get
                Return CType(Me(Me.tableWORKING_COLUMNS.SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_COLUMNS.SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COLUMN_NAME() As String
            Get
                Return CType(Me(Me.tableWORKING_COLUMNS.COLUMN_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableWORKING_COLUMNS.COLUMN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA_TYPE() As Byte
            Get
                Return CType(Me(Me.tableWORKING_COLUMNS.DATA_TYPEColumn),Byte)
            End Get
            Set
                Me(Me.tableWORKING_COLUMNS.DATA_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COLUMN_REGEX() As String
            Get
                Return CType(Me(Me.tableWORKING_COLUMNS.COLUMN_REGEXColumn),String)
            End Get
            Set
                Me(Me.tableWORKING_COLUMNS.COLUMN_REGEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CAN_EDIT() As Boolean
            Get
                Return CType(Me(Me.tableWORKING_COLUMNS.CAN_EDITColumn),Boolean)
            End Get
            Set
                Me(Me.tableWORKING_COLUMNS.CAN_EDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CAN_ADD() As Boolean
            Get
                Return CType(Me(Me.tableWORKING_COLUMNS.CAN_ADDColumn),Boolean)
            End Get
            Set
                Me(Me.tableWORKING_COLUMNS.CAN_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_TYPERow() As WORKING_TYPERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_WORKING_COLUMNS_WORKING_TYPE")),WORKING_TYPERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_WORKING_COLUMNS_WORKING_TYPE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetWORKING_DATA_DATETIMERows() As WORKING_DATA_DATETIMERow()
            If (Me.Table.ChildRelations("FK_WORKING_DATA_DATETIME_WORKING_COLUMNS") Is Nothing) Then
                Return New WORKING_DATA_DATETIMERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_WORKING_DATA_DATETIME_WORKING_COLUMNS")),WORKING_DATA_DATETIMERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetWORKING_DATA_INTRows() As WORKING_DATA_INTRow()
            If (Me.Table.ChildRelations("FK_WORKING_DATA_INT_WORKING_COLUMNS") Is Nothing) Then
                Return New WORKING_DATA_INTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_WORKING_DATA_INT_WORKING_COLUMNS")),WORKING_DATA_INTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetWORKING_DATA_STRRows() As WORKING_DATA_STRRow()
            If (Me.Table.ChildRelations("FK_WORKING_DATA_STR_WORKING_COLUMNS") Is Nothing) Then
                Return New WORKING_DATA_STRRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_WORKING_DATA_STR_WORKING_COLUMNS")),WORKING_DATA_STRRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WORKING_DATA_DATETIMERow
        Inherits Global.System.Data.DataRow
        
        Private tableWORKING_DATA_DATETIME As WORKING_DATA_DATETIMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWORKING_DATA_DATETIME = CType(Me.Table,WORKING_DATA_DATETIMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_DATETIME.ENGINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_DATETIME.ENGINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_COLUMNS_ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_DATETIME.WORKING_COLUMNS_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_DATETIME.WORKING_COLUMNS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REV_NO() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_DATETIME.REV_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_DATETIME.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA() As Date
            Get
                Return CType(Me(Me.tableWORKING_DATA_DATETIME.DATAColumn),Date)
            End Get
            Set
                Me(Me.tableWORKING_DATA_DATETIME.DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_LISTRow() As ENGINE_LISTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_WORKING_DATA_DATETIME_ENGINE_LIST")),ENGINE_LISTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_WORKING_DATA_DATETIME_ENGINE_LIST"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_COLUMNSRow() As WORKING_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_WORKING_DATA_DATETIME_WORKING_COLUMNS")),WORKING_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_WORKING_DATA_DATETIME_WORKING_COLUMNS"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WORKING_DATA_INTRow
        Inherits Global.System.Data.DataRow
        
        Private tableWORKING_DATA_INT As WORKING_DATA_INTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWORKING_DATA_INT = CType(Me.Table,WORKING_DATA_INTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_INT.ENGINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_INT.ENGINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_COLUMNS_ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_INT.WORKING_COLUMNS_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_INT.WORKING_COLUMNS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REV_NO() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_INT.REV_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_INT.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_INT.DATAColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_INT.DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_LISTRow() As ENGINE_LISTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_WORKING_DATA_INT_ENGINE_LIST")),ENGINE_LISTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_WORKING_DATA_INT_ENGINE_LIST"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_COLUMNSRow() As WORKING_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_WORKING_DATA_INT_WORKING_COLUMNS")),WORKING_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_WORKING_DATA_INT_WORKING_COLUMNS"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WORKING_DATA_STRRow
        Inherits Global.System.Data.DataRow
        
        Private tableWORKING_DATA_STR As WORKING_DATA_STRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWORKING_DATA_STR = CType(Me.Table,WORKING_DATA_STRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_STR.ENGINE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_STR.ENGINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_COLUMNS_ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_STR.WORKING_COLUMNS_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_STR.WORKING_COLUMNS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REV_NO() As Integer
            Get
                Return CType(Me(Me.tableWORKING_DATA_STR.REV_NOColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_DATA_STR.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATA() As String
            Get
                Return CType(Me(Me.tableWORKING_DATA_STR.DATAColumn),String)
            End Get
            Set
                Me(Me.tableWORKING_DATA_STR.DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINE_LISTRow() As ENGINE_LISTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_WORKING_DATA_STR_ENGINE_LIST")),ENGINE_LISTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_WORKING_DATA_STR_ENGINE_LIST"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_COLUMNSRow() As WORKING_COLUMNSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_WORKING_DATA_STR_WORKING_COLUMNS")),WORKING_COLUMNSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_WORKING_DATA_STR_WORKING_COLUMNS"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WORKING_TYPERow
        Inherits Global.System.Data.DataRow
        
        Private tableWORKING_TYPE As WORKING_TYPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWORKING_TYPE = CType(Me.Table,WORKING_TYPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableWORKING_TYPE.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_TYPE.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQ() As Integer
            Get
                Return CType(Me(Me.tableWORKING_TYPE.SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_TYPE.SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WORKING_TYPE_NAME() As String
            Get
                Return CType(Me(Me.tableWORKING_TYPE.WORKING_TYPE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableWORKING_TYPE.WORKING_TYPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAX_REV() As Integer
            Get
                Return CType(Me(Me.tableWORKING_TYPE.MAX_REVColumn),Integer)
            End Get
            Set
                Me(Me.tableWORKING_TYPE.MAX_REVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetWORKING_COLUMNSRows() As WORKING_COLUMNSRow()
            If (Me.Table.ChildRelations("FK_WORKING_COLUMNS_WORKING_TYPE") Is Nothing) Then
                Return New WORKING_COLUMNSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_WORKING_COLUMNS_WORKING_TYPE")),WORKING_COLUMNSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class BALL_ENGINE_LISTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BALL_ENGINE_LISTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As BALL_ENGINE_LISTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As BALL_ENGINE_LISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ENGINE_LISTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ENGINE_LISTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ENGINE_LISTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ENGINE_LISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class IMPORT_CELL_MAPPINGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMPORT_CELL_MAPPINGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As IMPORT_CELL_MAPPINGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As IMPORT_CELL_MAPPINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class IMPORT_ENGINE_MAPPINGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMPORT_ENGINE_MAPPINGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As IMPORT_ENGINE_MAPPINGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As IMPORT_ENGINE_MAPPINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class schema_migrationsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As schema_migrationsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As schema_migrationsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As schema_migrationsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class schema_migrations_comparerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As schema_migrations_comparerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As schema_migrations_comparerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As schema_migrations_comparerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TRACE_COLUMNSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRACE_COLUMNSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TRACE_COLUMNSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TRACE_COLUMNSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TRACE_DATA_DATETIMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRACE_DATA_DATETIMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TRACE_DATA_DATETIMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TRACE_DATA_DATETIMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TRACE_DATA_INTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRACE_DATA_INTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TRACE_DATA_INTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TRACE_DATA_INTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TRACE_DATA_STRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRACE_DATA_STRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TRACE_DATA_STRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TRACE_DATA_STRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WORKING_COLUMNSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WORKING_COLUMNSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WORKING_COLUMNSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WORKING_COLUMNSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WORKING_DATA_DATETIMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WORKING_DATA_DATETIMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WORKING_DATA_DATETIMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WORKING_DATA_DATETIMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WORKING_DATA_INTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WORKING_DATA_INTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WORKING_DATA_INTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WORKING_DATA_INTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WORKING_DATA_STRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WORKING_DATA_STRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WORKING_DATA_STRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WORKING_DATA_STRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WORKING_TYPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WORKING_TYPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WORKING_TYPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WORKING_TYPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace iemt_pdt_es01_developmentDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BALL_ENGINE_LISTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BALL_ENGINE_LIST"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ENGINE_TYPE", "ENGINE_TYPE")
            tableMapping.ColumnMappings.Add("ENGINE_NO", "ENGINE_NO")
            tableMapping.ColumnMappings.Add("ENGINE_ASM_NO", "ENGINE_ASM_NO")
            tableMapping.ColumnMappings.Add("BOOK", "BOOK")
            tableMapping.ColumnMappings.Add("YEAR", "YEAR")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT_NO", "UNIT_NO")
            tableMapping.ColumnMappings.Add("AT_MT", "AT_MT")
            tableMapping.ColumnMappings.Add("EMISSION", "EMISSION")
            tableMapping.ColumnMappings.Add("INJ_MODEL_CODE", "INJ_MODEL_CODE")
            tableMapping.ColumnMappings.Add("SPARE_001", "SPARE_001")
            tableMapping.ColumnMappings.Add("SPARE_002", "SPARE_002")
            tableMapping.ColumnMappings.Add("SPARE_003", "SPARE_003")
            tableMapping.ColumnMappings.Add("SPARE_004", "SPARE_004")
            tableMapping.ColumnMappings.Add("SPARE_005", "SPARE_005")
            tableMapping.ColumnMappings.Add("SPARE_006", "SPARE_006")
            tableMapping.ColumnMappings.Add("SPARE_007", "SPARE_007")
            tableMapping.ColumnMappings.Add("SPARE_008", "SPARE_008")
            tableMapping.ColumnMappings.Add("SPARE_009", "SPARE_009")
            tableMapping.ColumnMappings.Add("SPARE_010", "SPARE_010")
            tableMapping.ColumnMappings.Add("SPARE_011", "SPARE_011")
            tableMapping.ColumnMappings.Add("SPARE_012", "SPARE_012")
            tableMapping.ColumnMappings.Add("SPARE_013", "SPARE_013")
            tableMapping.ColumnMappings.Add("SPARE_014", "SPARE_014")
            tableMapping.ColumnMappings.Add("SPARE_015", "SPARE_015")
            tableMapping.ColumnMappings.Add("SPARE_016", "SPARE_016")
            tableMapping.ColumnMappings.Add("SPARE_017", "SPARE_017")
            tableMapping.ColumnMappings.Add("SB_DATA_SB_PARTS_NO", "SB_DATA_SB_PARTS_NO")
            tableMapping.ColumnMappings.Add("SB_DATA_SB_SERIAL_NO", "SB_DATA_SB_SERIAL_NO")
            tableMapping.ColumnMappings.Add("SB_DATA_GASKET_GRADE", "SB_DATA_GASKET_GRADE")
            tableMapping.ColumnMappings.Add("LINE_ON_TIME", "LINE_ON_TIME")
            tableMapping.ColumnMappings.Add("LINE_OFF_TIME", "LINE_OFF_TIME")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_BCT", "RPCOCF_SBLO_BCT")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_CRT", "RPCOCF_SBLO_CRT")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_CTM", "RPCOCF_SBLO_CTM")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_SPARE01", "RPCOCF_SBLO_SPARE01")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_SPARE02", "RPCOCF_SBLO_SPARE02")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_SPARE03", "RPCOCF_SBLO_SPARE03")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_CCT", "RPCOCF_MALO_CCT")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_DPT", "RPCOCF_MALO_DPT")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_FWT", "RPCOCF_MALO_FWT")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_SPARE01", "RPCOCF_MALO_SPARE01")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_SPARE02", "RPCOCF_MALO_SPARE02")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_SPARE03", "RPCOCF_MALO_SPARE03")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_HDT", "RPCOCF_MBLO_HDT")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_CCT", "RPCOCF_MBLO_CCT")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_HCT", "RPCOCF_MBLO_HCT")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_PPT", "RPCOCF_MBLO_PPT")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_SPARE01", "RPCOCF_MBLO_SPARE01")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_SPARE02", "RPCOCF_MBLO_SPARE02")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_SPARE03", "RPCOCF_MBLO_SPARE03")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_SPARE04", "RPCOCF_MBLO_SPARE04")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION01", "INSPSJ_INSPECTION01")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION02", "INSPSJ_INSPECTION02")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION03", "INSPSJ_INSPECTION03")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION04", "INSPSJ_INSPECTION04")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION05", "INSPSJ_INSPECTION05")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION06", "INSPSJ_INSPECTION06")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION_TIME01", "INSPSJ_INSPECTION_TIME01")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION11", "INSPSJ_INSPECTION11")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION12", "INSPSJ_INSPECTION12")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION13", "INSPSJ_INSPECTION13")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION14", "INSPSJ_INSPECTION14")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION15", "INSPSJ_INSPECTION15")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION16", "INSPSJ_INSPECTION16")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION_TIME02", "INSPSJ_INSPECTION_TIME02")
            tableMapping.ColumnMappings.Add("CREATED_BY", "CREATED_BY")
            tableMapping.ColumnMappings.Add("UPDATED_BY", "UPDATED_BY")
            tableMapping.ColumnMappings.Add("CREATED_WHEN", "CREATED_WHEN")
            tableMapping.ColumnMappings.Add("UPDATED_WHEN", "UPDATED_WHEN")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[BALL_ENGINE_LIST] WHERE (([ID] = @Original_ID) AND ([ENGINE_TY"& _ 
                "PE] = @Original_ENGINE_TYPE) AND ([ENGINE_NO] = @Original_ENGINE_NO) AND ([ENGIN"& _ 
                "E_ASM_NO] = @Original_ENGINE_ASM_NO) AND ([BOOK] = @Original_BOOK) AND ([YEAR] ="& _ 
                " @Original_YEAR) AND ([MODEL_CODE] = @Original_MODEL_CODE) AND ([LOT_NO] = @Orig"& _ 
                "inal_LOT_NO) AND ([UNIT_NO] = @Original_UNIT_NO) AND ([AT_MT] = @Original_AT_MT)"& _ 
                " AND ([EMISSION] = @Original_EMISSION) AND ([INJ_MODEL_CODE] = @Original_INJ_MOD"& _ 
                "EL_CODE) AND ([SPARE_001] = @Original_SPARE_001) AND ([SPARE_002] = @Original_SP"& _ 
                "ARE_002) AND ([SPARE_003] = @Original_SPARE_003) AND ([SPARE_004] = @Original_SP"& _ 
                "ARE_004) AND ([SPARE_005] = @Original_SPARE_005) AND ([SPARE_006] = @Original_SP"& _ 
                "ARE_006) AND ([SPARE_007] = @Original_SPARE_007) AND ([SPARE_008] = @Original_SP"& _ 
                "ARE_008) AND ([SPARE_009] = @Original_SPARE_009) AND ([SPARE_010] = @Original_SP"& _ 
                "ARE_010) AND ([SPARE_011] = @Original_SPARE_011) AND ([SPARE_012] = @Original_SP"& _ 
                "ARE_012) AND ([SPARE_013] = @Original_SPARE_013) AND ([SPARE_014] = @Original_SP"& _ 
                "ARE_014) AND ([SPARE_015] = @Original_SPARE_015) AND ([SPARE_016] = @Original_SP"& _ 
                "ARE_016) AND ([SPARE_017] = @Original_SPARE_017) AND ([SB_DATA_SB_PARTS_NO] = @O"& _ 
                "riginal_SB_DATA_SB_PARTS_NO) AND ([SB_DATA_SB_SERIAL_NO] = @Original_SB_DATA_SB_"& _ 
                "SERIAL_NO) AND ([SB_DATA_GASKET_GRADE] = @Original_SB_DATA_GASKET_GRADE) AND ([L"& _ 
                "INE_ON_TIME] = @Original_LINE_ON_TIME) AND ([LINE_OFF_TIME] = @Original_LINE_OFF"& _ 
                "_TIME) AND ([RPCOCF_SBLO_BCT] = @Original_RPCOCF_SBLO_BCT) AND ([RPCOCF_SBLO_CRT"& _ 
                "] = @Original_RPCOCF_SBLO_CRT) AND ([RPCOCF_SBLO_CTM] = @Original_RPCOCF_SBLO_CT"& _ 
                "M) AND ([RPCOCF_SBLO_SPARE01] = @Original_RPCOCF_SBLO_SPARE01) AND ([RPCOCF_SBLO"& _ 
                "_SPARE02] = @Original_RPCOCF_SBLO_SPARE02) AND ([RPCOCF_SBLO_SPARE03] = @Origina"& _ 
                "l_RPCOCF_SBLO_SPARE03) AND ([RPCOCF_MALO_CCT] = @Original_RPCOCF_MALO_CCT) AND ("& _ 
                "[RPCOCF_MALO_DPT] = @Original_RPCOCF_MALO_DPT) AND ([RPCOCF_MALO_FWT] = @Origina"& _ 
                "l_RPCOCF_MALO_FWT) AND ([RPCOCF_MALO_SPARE01] = @Original_RPCOCF_MALO_SPARE01) A"& _ 
                "ND ([RPCOCF_MALO_SPARE02] = @Original_RPCOCF_MALO_SPARE02) AND ([RPCOCF_MALO_SPA"& _ 
                "RE03] = @Original_RPCOCF_MALO_SPARE03) AND ([RPCOCF_MBLO_HDT] = @Original_RPCOCF"& _ 
                "_MBLO_HDT) AND ([RPCOCF_MBLO_CCT] = @Original_RPCOCF_MBLO_CCT) AND ([RPCOCF_MBLO"& _ 
                "_HCT] = @Original_RPCOCF_MBLO_HCT) AND ([RPCOCF_MBLO_PPT] = @Original_RPCOCF_MBL"& _ 
                "O_PPT) AND ([RPCOCF_MBLO_SPARE01] = @Original_RPCOCF_MBLO_SPARE01) AND ([RPCOCF_"& _ 
                "MBLO_SPARE02] = @Original_RPCOCF_MBLO_SPARE02) AND ([RPCOCF_MBLO_SPARE03] = @Ori"& _ 
                "ginal_RPCOCF_MBLO_SPARE03) AND ([RPCOCF_MBLO_SPARE04] = @Original_RPCOCF_MBLO_SP"& _ 
                "ARE04) AND ([INSPSJ_INSPECTION01] = @Original_INSPSJ_INSPECTION01) AND ([INSPSJ_"& _ 
                "INSPECTION02] = @Original_INSPSJ_INSPECTION02) AND ([INSPSJ_INSPECTION03] = @Ori"& _ 
                "ginal_INSPSJ_INSPECTION03) AND ([INSPSJ_INSPECTION04] = @Original_INSPSJ_INSPECT"& _ 
                "ION04) AND ([INSPSJ_INSPECTION05] = @Original_INSPSJ_INSPECTION05) AND ([INSPSJ_"& _ 
                "INSPECTION06] = @Original_INSPSJ_INSPECTION06) AND ([INSPSJ_INSPECTION_TIME01] ="& _ 
                " @Original_INSPSJ_INSPECTION_TIME01) AND ([INSPSJ_INSPECTION11] = @Original_INSP"& _ 
                "SJ_INSPECTION11) AND ([INSPSJ_INSPECTION12] = @Original_INSPSJ_INSPECTION12) AND"& _ 
                " ([INSPSJ_INSPECTION13] = @Original_INSPSJ_INSPECTION13) AND ([INSPSJ_INSPECTION"& _ 
                "14] = @Original_INSPSJ_INSPECTION14) AND ([INSPSJ_INSPECTION15] = @Original_INSP"& _ 
                "SJ_INSPECTION15) AND ([INSPSJ_INSPECTION16] = @Original_INSPSJ_INSPECTION16) AND"& _ 
                " ([INSPSJ_INSPECTION_TIME02] = @Original_INSPSJ_INSPECTION_TIME02) AND ([CREATED"& _ 
                "_BY] = @Original_CREATED_BY) AND ((@IsNull_UPDATED_BY = 1 AND [UPDATED_BY] IS NU"& _ 
                "LL) OR ([UPDATED_BY] = @Original_UPDATED_BY)) AND ([CREATED_WHEN] = @Original_CR"& _ 
                "EATED_WHEN) AND ((@IsNull_UPDATED_WHEN = 1 AND [UPDATED_WHEN] IS NULL) OR ([UPDA"& _ 
                "TED_WHEN] = @Original_UPDATED_WHEN)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ASM_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ASM_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BOOK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOOK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AT_MT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AT_MT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMISSION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMISSION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INJ_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INJ_MODEL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_001", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_002", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_002", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_003", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_003", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_004", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_004", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_005", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_005", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_006", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_006", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_007", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_007", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_008", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_008", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_009", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_009", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_010", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_010", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_011", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_011", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_012", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_012", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_013", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_013", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_014", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_014", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_015", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_015", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_016", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_016", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_017", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_017", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_SB_PARTS_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_PARTS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_SB_SERIAL_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_SERIAL_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_GASKET_GRADE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_GASKET_GRADE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_ON_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ON_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_OFF_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_OFF_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_BCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_BCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_CRT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CRT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_CTM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CTM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_CCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_DPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_DPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_FWT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_FWT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_HDT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HDT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_CCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_HCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_PPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_PPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION05", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION06", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION06", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION_TIME01", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION11", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION11", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION12", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION12", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION13", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION14", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION14", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION15", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION15", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION16", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION16", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION_TIME02", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_BY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_BY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_WHEN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[BALL_ENGINE_LIST] ([ENGINE_TYPE], [ENGINE_NO], [ENGINE_ASM_NO]"& _ 
                ", [BOOK], [YEAR], [MODEL_CODE], [LOT_NO], [UNIT_NO], [AT_MT], [EMISSION], [INJ_M"& _ 
                "ODEL_CODE], [SPARE_001], [SPARE_002], [SPARE_003], [SPARE_004], [SPARE_005], [SP"& _ 
                "ARE_006], [SPARE_007], [SPARE_008], [SPARE_009], [SPARE_010], [SPARE_011], [SPAR"& _ 
                "E_012], [SPARE_013], [SPARE_014], [SPARE_015], [SPARE_016], [SPARE_017], [SB_DAT"& _ 
                "A_SB_PARTS_NO], [SB_DATA_SB_SERIAL_NO], [SB_DATA_GASKET_GRADE], [LINE_ON_TIME], "& _ 
                "[LINE_OFF_TIME], [RPCOCF_SBLO_BCT], [RPCOCF_SBLO_CRT], [RPCOCF_SBLO_CTM], [RPCOC"& _ 
                "F_SBLO_SPARE01], [RPCOCF_SBLO_SPARE02], [RPCOCF_SBLO_SPARE03], [RPCOCF_MALO_CCT]"& _ 
                ", [RPCOCF_MALO_DPT], [RPCOCF_MALO_FWT], [RPCOCF_MALO_SPARE01], [RPCOCF_MALO_SPAR"& _ 
                "E02], [RPCOCF_MALO_SPARE03], [RPCOCF_MBLO_HDT], [RPCOCF_MBLO_CCT], [RPCOCF_MBLO_"& _ 
                "HCT], [RPCOCF_MBLO_PPT], [RPCOCF_MBLO_SPARE01], [RPCOCF_MBLO_SPARE02], [RPCOCF_M"& _ 
                "BLO_SPARE03], [RPCOCF_MBLO_SPARE04], [INSPSJ_INSPECTION01], [INSPSJ_INSPECTION02"& _ 
                "], [INSPSJ_INSPECTION03], [INSPSJ_INSPECTION04], [INSPSJ_INSPECTION05], [INSPSJ_"& _ 
                "INSPECTION06], [INSPSJ_INSPECTION_TIME01], [INSPSJ_INSPECTION11], [INSPSJ_INSPEC"& _ 
                "TION12], [INSPSJ_INSPECTION13], [INSPSJ_INSPECTION14], [INSPSJ_INSPECTION15], [I"& _ 
                "NSPSJ_INSPECTION16], [INSPSJ_INSPECTION_TIME02], [CREATED_BY], [UPDATED_BY], [CR"& _ 
                "EATED_WHEN], [UPDATED_WHEN]) VALUES (@ENGINE_TYPE, @ENGINE_NO, @ENGINE_ASM_NO, @"& _ 
                "BOOK, @YEAR, @MODEL_CODE, @LOT_NO, @UNIT_NO, @AT_MT, @EMISSION, @INJ_MODEL_CODE,"& _ 
                " @SPARE_001, @SPARE_002, @SPARE_003, @SPARE_004, @SPARE_005, @SPARE_006, @SPARE_"& _ 
                "007, @SPARE_008, @SPARE_009, @SPARE_010, @SPARE_011, @SPARE_012, @SPARE_013, @SP"& _ 
                "ARE_014, @SPARE_015, @SPARE_016, @SPARE_017, @SB_DATA_SB_PARTS_NO, @SB_DATA_SB_S"& _ 
                "ERIAL_NO, @SB_DATA_GASKET_GRADE, @LINE_ON_TIME, @LINE_OFF_TIME, @RPCOCF_SBLO_BCT"& _ 
                ", @RPCOCF_SBLO_CRT, @RPCOCF_SBLO_CTM, @RPCOCF_SBLO_SPARE01, @RPCOCF_SBLO_SPARE02"& _ 
                ", @RPCOCF_SBLO_SPARE03, @RPCOCF_MALO_CCT, @RPCOCF_MALO_DPT, @RPCOCF_MALO_FWT, @R"& _ 
                "PCOCF_MALO_SPARE01, @RPCOCF_MALO_SPARE02, @RPCOCF_MALO_SPARE03, @RPCOCF_MBLO_HDT"& _ 
                ", @RPCOCF_MBLO_CCT, @RPCOCF_MBLO_HCT, @RPCOCF_MBLO_PPT, @RPCOCF_MBLO_SPARE01, @R"& _ 
                "PCOCF_MBLO_SPARE02, @RPCOCF_MBLO_SPARE03, @RPCOCF_MBLO_SPARE04, @INSPSJ_INSPECTI"& _ 
                "ON01, @INSPSJ_INSPECTION02, @INSPSJ_INSPECTION03, @INSPSJ_INSPECTION04, @INSPSJ_"& _ 
                "INSPECTION05, @INSPSJ_INSPECTION06, @INSPSJ_INSPECTION_TIME01, @INSPSJ_INSPECTIO"& _ 
                "N11, @INSPSJ_INSPECTION12, @INSPSJ_INSPECTION13, @INSPSJ_INSPECTION14, @INSPSJ_I"& _ 
                "NSPECTION15, @INSPSJ_INSPECTION16, @INSPSJ_INSPECTION_TIME02, @CREATED_BY, @UPDA"& _ 
                "TED_BY, @CREATED_WHEN, @UPDATED_WHEN);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, ENGINE_TYPE, ENGINE_NO, ENGIN"& _ 
                "E_ASM_NO, BOOK, YEAR, MODEL_CODE, LOT_NO, UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CO"& _ 
                "DE, SPARE_001, SPARE_002, SPARE_003, SPARE_004, SPARE_005, SPARE_006, SPARE_007,"& _ 
                " SPARE_008, SPARE_009, SPARE_010, SPARE_011, SPARE_012, SPARE_013, SPARE_014, SP"& _ 
                "ARE_015, SPARE_016, SPARE_017, SB_DATA_SB_PARTS_NO, SB_DATA_SB_SERIAL_NO, SB_DAT"& _ 
                "A_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TIME, RPCOCF_SBLO_BCT, RPCOCF_SBLO_CRT, R"& _ 
                "PCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCOCF_SBLO_SPARE02, RPCOCF_SBLO_SPARE03, R"& _ 
                "PCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_MALO_FWT, RPCOCF_MALO_SPARE01, RPCOCF_MA"& _ 
                "LO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_MBLO_HDT, RPCOCF_MBLO_CCT, RPCOCF_MBLO_H"& _ 
                "CT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01, RPCOCF_MBLO_SPARE02, RPCOCF_MBLO_SPARE"& _ 
                "03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTION01, INSPSJ_INSPECTION02, INSPSJ_INSPEC"& _ 
                "TION03, INSPSJ_INSPECTION04, INSPSJ_INSPECTION05, INSPSJ_INSPECTION06, INSPSJ_IN"& _ 
                "SPECTION_TIME01, INSPSJ_INSPECTION11, INSPSJ_INSPECTION12, INSPSJ_INSPECTION13, "& _ 
                "INSPSJ_INSPECTION14, INSPSJ_INSPECTION15, INSPSJ_INSPECTION16, INSPSJ_INSPECTION"& _ 
                "_TIME02, CREATED_BY, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN FROM BALL_ENGINE_LIS"& _ 
                "T WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ASM_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ASM_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOOK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOOK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AT_MT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AT_MT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMISSION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMISSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INJ_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INJ_MODEL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_001", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_002", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_002", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_003", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_003", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_004", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_004", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_005", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_005", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_006", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_006", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_007", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_007", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_008", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_008", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_009", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_009", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_010", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_010", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_011", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_011", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_012", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_012", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_013", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_013", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_014", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_014", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_015", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_015", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_016", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_016", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_017", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_017", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_SB_PARTS_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_PARTS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_SB_SERIAL_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_SERIAL_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_GASKET_GRADE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_GASKET_GRADE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_ON_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_OFF_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_OFF_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_BCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_BCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_CRT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CRT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_CTM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CTM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_CCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_DPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_DPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_FWT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_FWT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_HDT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HDT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_CCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_HCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_PPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_PPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION05", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION06", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION06", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION_TIME01", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION11", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION12", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION13", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION14", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION14", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION15", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION16", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION16", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION_TIME02", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[BALL_ENGINE_LIST] SET [ENGINE_TYPE] = @ENGINE_TYPE, [ENGINE_NO] = @"& _ 
                "ENGINE_NO, [ENGINE_ASM_NO] = @ENGINE_ASM_NO, [BOOK] = @BOOK, [YEAR] = @YEAR, [MO"& _ 
                "DEL_CODE] = @MODEL_CODE, [LOT_NO] = @LOT_NO, [UNIT_NO] = @UNIT_NO, [AT_MT] = @AT"& _ 
                "_MT, [EMISSION] = @EMISSION, [INJ_MODEL_CODE] = @INJ_MODEL_CODE, [SPARE_001] = @"& _ 
                "SPARE_001, [SPARE_002] = @SPARE_002, [SPARE_003] = @SPARE_003, [SPARE_004] = @SP"& _ 
                "ARE_004, [SPARE_005] = @SPARE_005, [SPARE_006] = @SPARE_006, [SPARE_007] = @SPAR"& _ 
                "E_007, [SPARE_008] = @SPARE_008, [SPARE_009] = @SPARE_009, [SPARE_010] = @SPARE_"& _ 
                "010, [SPARE_011] = @SPARE_011, [SPARE_012] = @SPARE_012, [SPARE_013] = @SPARE_01"& _ 
                "3, [SPARE_014] = @SPARE_014, [SPARE_015] = @SPARE_015, [SPARE_016] = @SPARE_016,"& _ 
                " [SPARE_017] = @SPARE_017, [SB_DATA_SB_PARTS_NO] = @SB_DATA_SB_PARTS_NO, [SB_DAT"& _ 
                "A_SB_SERIAL_NO] = @SB_DATA_SB_SERIAL_NO, [SB_DATA_GASKET_GRADE] = @SB_DATA_GASKE"& _ 
                "T_GRADE, [LINE_ON_TIME] = @LINE_ON_TIME, [LINE_OFF_TIME] = @LINE_OFF_TIME, [RPCO"& _ 
                "CF_SBLO_BCT] = @RPCOCF_SBLO_BCT, [RPCOCF_SBLO_CRT] = @RPCOCF_SBLO_CRT, [RPCOCF_S"& _ 
                "BLO_CTM] = @RPCOCF_SBLO_CTM, [RPCOCF_SBLO_SPARE01] = @RPCOCF_SBLO_SPARE01, [RPCO"& _ 
                "CF_SBLO_SPARE02] = @RPCOCF_SBLO_SPARE02, [RPCOCF_SBLO_SPARE03] = @RPCOCF_SBLO_SP"& _ 
                "ARE03, [RPCOCF_MALO_CCT] = @RPCOCF_MALO_CCT, [RPCOCF_MALO_DPT] = @RPCOCF_MALO_DP"& _ 
                "T, [RPCOCF_MALO_FWT] = @RPCOCF_MALO_FWT, [RPCOCF_MALO_SPARE01] = @RPCOCF_MALO_SP"& _ 
                "ARE01, [RPCOCF_MALO_SPARE02] = @RPCOCF_MALO_SPARE02, [RPCOCF_MALO_SPARE03] = @RP"& _ 
                "COCF_MALO_SPARE03, [RPCOCF_MBLO_HDT] = @RPCOCF_MBLO_HDT, [RPCOCF_MBLO_CCT] = @RP"& _ 
                "COCF_MBLO_CCT, [RPCOCF_MBLO_HCT] = @RPCOCF_MBLO_HCT, [RPCOCF_MBLO_PPT] = @RPCOCF"& _ 
                "_MBLO_PPT, [RPCOCF_MBLO_SPARE01] = @RPCOCF_MBLO_SPARE01, [RPCOCF_MBLO_SPARE02] ="& _ 
                " @RPCOCF_MBLO_SPARE02, [RPCOCF_MBLO_SPARE03] = @RPCOCF_MBLO_SPARE03, [RPCOCF_MBL"& _ 
                "O_SPARE04] = @RPCOCF_MBLO_SPARE04, [INSPSJ_INSPECTION01] = @INSPSJ_INSPECTION01,"& _ 
                " [INSPSJ_INSPECTION02] = @INSPSJ_INSPECTION02, [INSPSJ_INSPECTION03] = @INSPSJ_I"& _ 
                "NSPECTION03, [INSPSJ_INSPECTION04] = @INSPSJ_INSPECTION04, [INSPSJ_INSPECTION05]"& _ 
                " = @INSPSJ_INSPECTION05, [INSPSJ_INSPECTION06] = @INSPSJ_INSPECTION06, [INSPSJ_I"& _ 
                "NSPECTION_TIME01] = @INSPSJ_INSPECTION_TIME01, [INSPSJ_INSPECTION11] = @INSPSJ_I"& _ 
                "NSPECTION11, [INSPSJ_INSPECTION12] = @INSPSJ_INSPECTION12, [INSPSJ_INSPECTION13]"& _ 
                " = @INSPSJ_INSPECTION13, [INSPSJ_INSPECTION14] = @INSPSJ_INSPECTION14, [INSPSJ_I"& _ 
                "NSPECTION15] = @INSPSJ_INSPECTION15, [INSPSJ_INSPECTION16] = @INSPSJ_INSPECTION1"& _ 
                "6, [INSPSJ_INSPECTION_TIME02] = @INSPSJ_INSPECTION_TIME02, [CREATED_BY] = @CREAT"& _ 
                "ED_BY, [UPDATED_BY] = @UPDATED_BY, [CREATED_WHEN] = @CREATED_WHEN, [UPDATED_WHEN"& _ 
                "] = @UPDATED_WHEN WHERE (([ID] = @Original_ID) AND ([ENGINE_TYPE] = @Original_EN"& _ 
                "GINE_TYPE) AND ([ENGINE_NO] = @Original_ENGINE_NO) AND ([ENGINE_ASM_NO] = @Origi"& _ 
                "nal_ENGINE_ASM_NO) AND ([BOOK] = @Original_BOOK) AND ([YEAR] = @Original_YEAR) A"& _ 
                "ND ([MODEL_CODE] = @Original_MODEL_CODE) AND ([LOT_NO] = @Original_LOT_NO) AND ("& _ 
                "[UNIT_NO] = @Original_UNIT_NO) AND ([AT_MT] = @Original_AT_MT) AND ([EMISSION] ="& _ 
                " @Original_EMISSION) AND ([INJ_MODEL_CODE] = @Original_INJ_MODEL_CODE) AND ([SPA"& _ 
                "RE_001] = @Original_SPARE_001) AND ([SPARE_002] = @Original_SPARE_002) AND ([SPA"& _ 
                "RE_003] = @Original_SPARE_003) AND ([SPARE_004] = @Original_SPARE_004) AND ([SPA"& _ 
                "RE_005] = @Original_SPARE_005) AND ([SPARE_006] = @Original_SPARE_006) AND ([SPA"& _ 
                "RE_007] = @Original_SPARE_007) AND ([SPARE_008] = @Original_SPARE_008) AND ([SPA"& _ 
                "RE_009] = @Original_SPARE_009) AND ([SPARE_010] = @Original_SPARE_010) AND ([SPA"& _ 
                "RE_011] = @Original_SPARE_011) AND ([SPARE_012] = @Original_SPARE_012) AND ([SPA"& _ 
                "RE_013] = @Original_SPARE_013) AND ([SPARE_014] = @Original_SPARE_014) AND ([SPA"& _ 
                "RE_015] = @Original_SPARE_015) AND ([SPARE_016] = @Original_SPARE_016) AND ([SPA"& _ 
                "RE_017] = @Original_SPARE_017) AND ([SB_DATA_SB_PARTS_NO] = @Original_SB_DATA_SB"& _ 
                "_PARTS_NO) AND ([SB_DATA_SB_SERIAL_NO] = @Original_SB_DATA_SB_SERIAL_NO) AND ([S"& _ 
                "B_DATA_GASKET_GRADE] = @Original_SB_DATA_GASKET_GRADE) AND ([LINE_ON_TIME] = @Or"& _ 
                "iginal_LINE_ON_TIME) AND ([LINE_OFF_TIME] = @Original_LINE_OFF_TIME) AND ([RPCOC"& _ 
                "F_SBLO_BCT] = @Original_RPCOCF_SBLO_BCT) AND ([RPCOCF_SBLO_CRT] = @Original_RPCO"& _ 
                "CF_SBLO_CRT) AND ([RPCOCF_SBLO_CTM] = @Original_RPCOCF_SBLO_CTM) AND ([RPCOCF_SB"& _ 
                "LO_SPARE01] = @Original_RPCOCF_SBLO_SPARE01) AND ([RPCOCF_SBLO_SPARE02] = @Origi"& _ 
                "nal_RPCOCF_SBLO_SPARE02) AND ([RPCOCF_SBLO_SPARE03] = @Original_RPCOCF_SBLO_SPAR"& _ 
                "E03) AND ([RPCOCF_MALO_CCT] = @Original_RPCOCF_MALO_CCT) AND ([RPCOCF_MALO_DPT] "& _ 
                "= @Original_RPCOCF_MALO_DPT) AND ([RPCOCF_MALO_FWT] = @Original_RPCOCF_MALO_FWT)"& _ 
                " AND ([RPCOCF_MALO_SPARE01] = @Original_RPCOCF_MALO_SPARE01) AND ([RPCOCF_MALO_S"& _ 
                "PARE02] = @Original_RPCOCF_MALO_SPARE02) AND ([RPCOCF_MALO_SPARE03] = @Original_"& _ 
                "RPCOCF_MALO_SPARE03) AND ([RPCOCF_MBLO_HDT] = @Original_RPCOCF_MBLO_HDT) AND ([R"& _ 
                "PCOCF_MBLO_CCT] = @Original_RPCOCF_MBLO_CCT) AND ([RPCOCF_MBLO_HCT] = @Original_"& _ 
                "RPCOCF_MBLO_HCT) AND ([RPCOCF_MBLO_PPT] = @Original_RPCOCF_MBLO_PPT) AND ([RPCOC"& _ 
                "F_MBLO_SPARE01] = @Original_RPCOCF_MBLO_SPARE01) AND ([RPCOCF_MBLO_SPARE02] = @O"& _ 
                "riginal_RPCOCF_MBLO_SPARE02) AND ([RPCOCF_MBLO_SPARE03] = @Original_RPCOCF_MBLO_"& _ 
                "SPARE03) AND ([RPCOCF_MBLO_SPARE04] = @Original_RPCOCF_MBLO_SPARE04) AND ([INSPS"& _ 
                "J_INSPECTION01] = @Original_INSPSJ_INSPECTION01) AND ([INSPSJ_INSPECTION02] = @O"& _ 
                "riginal_INSPSJ_INSPECTION02) AND ([INSPSJ_INSPECTION03] = @Original_INSPSJ_INSPE"& _ 
                "CTION03) AND ([INSPSJ_INSPECTION04] = @Original_INSPSJ_INSPECTION04) AND ([INSPS"& _ 
                "J_INSPECTION05] = @Original_INSPSJ_INSPECTION05) AND ([INSPSJ_INSPECTION06] = @O"& _ 
                "riginal_INSPSJ_INSPECTION06) AND ([INSPSJ_INSPECTION_TIME01] = @Original_INSPSJ_"& _ 
                "INSPECTION_TIME01) AND ([INSPSJ_INSPECTION11] = @Original_INSPSJ_INSPECTION11) A"& _ 
                "ND ([INSPSJ_INSPECTION12] = @Original_INSPSJ_INSPECTION12) AND ([INSPSJ_INSPECTI"& _ 
                "ON13] = @Original_INSPSJ_INSPECTION13) AND ([INSPSJ_INSPECTION14] = @Original_IN"& _ 
                "SPSJ_INSPECTION14) AND ([INSPSJ_INSPECTION15] = @Original_INSPSJ_INSPECTION15) A"& _ 
                "ND ([INSPSJ_INSPECTION16] = @Original_INSPSJ_INSPECTION16) AND ([INSPSJ_INSPECTI"& _ 
                "ON_TIME02] = @Original_INSPSJ_INSPECTION_TIME02) AND ([CREATED_BY] = @Original_C"& _ 
                "REATED_BY) AND ((@IsNull_UPDATED_BY = 1 AND [UPDATED_BY] IS NULL) OR ([UPDATED_B"& _ 
                "Y] = @Original_UPDATED_BY)) AND ([CREATED_WHEN] = @Original_CREATED_WHEN) AND (("& _ 
                "@IsNull_UPDATED_WHEN = 1 AND [UPDATED_WHEN] IS NULL) OR ([UPDATED_WHEN] = @Origi"& _ 
                "nal_UPDATED_WHEN)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, ENGINE_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YE"& _ 
                "AR, MODEL_CODE, LOT_NO, UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CODE, SPARE_001, SPA"& _ 
                "RE_002, SPARE_003, SPARE_004, SPARE_005, SPARE_006, SPARE_007, SPARE_008, SPARE_"& _ 
                "009, SPARE_010, SPARE_011, SPARE_012, SPARE_013, SPARE_014, SPARE_015, SPARE_016"& _ 
                ", SPARE_017, SB_DATA_SB_PARTS_NO, SB_DATA_SB_SERIAL_NO, SB_DATA_GASKET_GRADE, LI"& _ 
                "NE_ON_TIME, LINE_OFF_TIME, RPCOCF_SBLO_BCT, RPCOCF_SBLO_CRT, RPCOCF_SBLO_CTM, RP"& _ 
                "COCF_SBLO_SPARE01, RPCOCF_SBLO_SPARE02, RPCOCF_SBLO_SPARE03, RPCOCF_MALO_CCT, RP"& _ 
                "COCF_MALO_DPT, RPCOCF_MALO_FWT, RPCOCF_MALO_SPARE01, RPCOCF_MALO_SPARE02, RPCOCF"& _ 
                "_MALO_SPARE03, RPCOCF_MBLO_HDT, RPCOCF_MBLO_CCT, RPCOCF_MBLO_HCT, RPCOCF_MBLO_PP"& _ 
                "T, RPCOCF_MBLO_SPARE01, RPCOCF_MBLO_SPARE02, RPCOCF_MBLO_SPARE03, RPCOCF_MBLO_SP"& _ 
                "ARE04, INSPSJ_INSPECTION01, INSPSJ_INSPECTION02, INSPSJ_INSPECTION03, INSPSJ_INS"& _ 
                "PECTION04, INSPSJ_INSPECTION05, INSPSJ_INSPECTION06, INSPSJ_INSPECTION_TIME01, I"& _ 
                "NSPSJ_INSPECTION11, INSPSJ_INSPECTION12, INSPSJ_INSPECTION13, INSPSJ_INSPECTION1"& _ 
                "4, INSPSJ_INSPECTION15, INSPSJ_INSPECTION16, INSPSJ_INSPECTION_TIME02, CREATED_B"& _ 
                "Y, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN FROM BALL_ENGINE_LIST WHERE (ID = @ID)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ASM_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ASM_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOOK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOOK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AT_MT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AT_MT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMISSION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMISSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INJ_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INJ_MODEL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_001", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_002", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_002", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_003", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_003", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_004", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_004", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_005", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_005", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_006", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_006", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_007", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_007", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_008", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_008", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_009", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_009", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_010", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_010", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_011", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_011", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_012", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_012", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_013", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_013", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_014", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_014", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_015", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_015", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_016", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_016", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_017", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_017", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_SB_PARTS_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_PARTS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_SB_SERIAL_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_SERIAL_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_GASKET_GRADE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_GASKET_GRADE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_ON_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_OFF_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_OFF_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_BCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_BCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_CRT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CRT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_CTM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CTM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_CCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_DPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_DPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_FWT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_FWT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_HDT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HDT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_CCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_HCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_PPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_PPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION05", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION06", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION06", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION_TIME01", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION11", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION12", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION13", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION14", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION14", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION15", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION16", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION16", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION_TIME02", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ASM_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ASM_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BOOK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOOK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AT_MT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AT_MT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMISSION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMISSION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INJ_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INJ_MODEL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_001", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_002", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_002", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_003", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_003", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_004", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_004", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_005", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_005", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_006", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_006", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_007", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_007", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_008", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_008", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_009", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_009", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_010", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_010", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_011", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_011", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_012", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_012", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_013", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_013", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_014", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_014", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_015", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_015", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_016", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_016", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_017", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_017", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_SB_PARTS_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_PARTS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_SB_SERIAL_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_SERIAL_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_GASKET_GRADE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_GASKET_GRADE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_ON_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ON_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_OFF_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_OFF_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_BCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_BCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_CRT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CRT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_CTM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CTM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_CCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_DPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_DPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_FWT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_FWT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_HDT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HDT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_CCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_HCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_PPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_PPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION05", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION06", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION06", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION_TIME01", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION11", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION11", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION12", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION12", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION13", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION14", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION14", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION15", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION15", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION16", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION16", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION_TIME02", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_BY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_BY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_WHEN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, ENGINE_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YEAR, MODEL_CODE, LOT_NO,"& _ 
                " UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CODE, SPARE_001, SPARE_002, SPARE_003, SPAR"& _ 
                "E_004, SPARE_005, SPARE_006, SPARE_007, SPARE_008, SPARE_009, SPARE_010, SPARE_0"& _ 
                "11, SPARE_012, SPARE_013, SPARE_014, SPARE_015, SPARE_016, SPARE_017, SB_DATA_SB"& _ 
                "_PARTS_NO, SB_DATA_SB_SERIAL_NO, SB_DATA_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TI"& _ 
                "ME, RPCOCF_SBLO_BCT, RPCOCF_SBLO_CRT, RPCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCO"& _ 
                "CF_SBLO_SPARE02, RPCOCF_SBLO_SPARE03, RPCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_M"& _ 
                "ALO_FWT, RPCOCF_MALO_SPARE01, RPCOCF_MALO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_M"& _ 
                "BLO_HDT, RPCOCF_MBLO_CCT, RPCOCF_MBLO_HCT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01,"& _ 
                " RPCOCF_MBLO_SPARE02, RPCOCF_MBLO_SPARE03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTIO"& _ 
                "N01, INSPSJ_INSPECTION02, INSPSJ_INSPECTION03, INSPSJ_INSPECTION04, INSPSJ_INSPE"& _ 
                "CTION05, INSPSJ_INSPECTION06, INSPSJ_INSPECTION_TIME01, INSPSJ_INSPECTION11, INS"& _ 
                "PSJ_INSPECTION12, INSPSJ_INSPECTION13, INSPSJ_INSPECTION14, INSPSJ_INSPECTION15,"& _ 
                " INSPSJ_INSPECTION16, INSPSJ_INSPECTION_TIME02, CREATED_BY, UPDATED_BY, CREATED_"& _ 
                "WHEN, UPDATED_WHEN FROM dbo.BALL_ENGINE_LIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.BALL_ENGINE_LISTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.BALL_ENGINE_LISTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.BALL_ENGINE_LISTDataTable = New iemt_pdt_es01_developmentDataSet.BALL_ENGINE_LISTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.BALL_ENGINE_LISTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "BALL_ENGINE_LIST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ENGINE_TYPE As String,  _
                    ByVal Original_ENGINE_NO As String,  _
                    ByVal Original_ENGINE_ASM_NO As String,  _
                    ByVal Original_BOOK As String,  _
                    ByVal Original_YEAR As String,  _
                    ByVal Original_MODEL_CODE As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT_NO As String,  _
                    ByVal Original_AT_MT As String,  _
                    ByVal Original_EMISSION As String,  _
                    ByVal Original_INJ_MODEL_CODE As String,  _
                    ByVal Original_SPARE_001 As String,  _
                    ByVal Original_SPARE_002 As String,  _
                    ByVal Original_SPARE_003 As String,  _
                    ByVal Original_SPARE_004 As String,  _
                    ByVal Original_SPARE_005 As String,  _
                    ByVal Original_SPARE_006 As String,  _
                    ByVal Original_SPARE_007 As String,  _
                    ByVal Original_SPARE_008 As String,  _
                    ByVal Original_SPARE_009 As String,  _
                    ByVal Original_SPARE_010 As String,  _
                    ByVal Original_SPARE_011 As String,  _
                    ByVal Original_SPARE_012 As String,  _
                    ByVal Original_SPARE_013 As String,  _
                    ByVal Original_SPARE_014 As String,  _
                    ByVal Original_SPARE_015 As String,  _
                    ByVal Original_SPARE_016 As String,  _
                    ByVal Original_SPARE_017 As String,  _
                    ByVal Original_SB_DATA_SB_PARTS_NO As String,  _
                    ByVal Original_SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal Original_SB_DATA_GASKET_GRADE As String,  _
                    ByVal Original_LINE_ON_TIME As Date,  _
                    ByVal Original_LINE_OFF_TIME As Date,  _
                    ByVal Original_RPCOCF_SBLO_BCT As String,  _
                    ByVal Original_RPCOCF_SBLO_CRT As String,  _
                    ByVal Original_RPCOCF_SBLO_CTM As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MALO_CCT As String,  _
                    ByVal Original_RPCOCF_MALO_DPT As String,  _
                    ByVal Original_RPCOCF_MALO_FWT As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_HDT As String,  _
                    ByVal Original_RPCOCF_MBLO_CCT As String,  _
                    ByVal Original_RPCOCF_MBLO_HCT As String,  _
                    ByVal Original_RPCOCF_MBLO_PPT As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION01 As String,  _
                    ByVal Original_INSPSJ_INSPECTION02 As String,  _
                    ByVal Original_INSPSJ_INSPECTION03 As String,  _
                    ByVal Original_INSPSJ_INSPECTION04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION05 As String,  _
                    ByVal Original_INSPSJ_INSPECTION06 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal Original_INSPSJ_INSPECTION11 As String,  _
                    ByVal Original_INSPSJ_INSPECTION12 As String,  _
                    ByVal Original_INSPSJ_INSPECTION13 As String,  _
                    ByVal Original_INSPSJ_INSPECTION14 As String,  _
                    ByVal Original_INSPSJ_INSPECTION15 As String,  _
                    ByVal Original_INSPSJ_INSPECTION16 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal Original_CREATED_BY As String,  _
                    ByVal Original_UPDATED_BY As String,  _
                    ByVal Original_CREATED_WHEN As Date,  _
                    ByVal Original_UPDATED_WHEN As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_ENGINE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENGINE_TYPE,String)
            End If
            If (Original_ENGINE_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ENGINE_NO,String)
            End If
            If (Original_ENGINE_ASM_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_ASM_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINE_ASM_NO,String)
            End If
            If (Original_BOOK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BOOK")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_BOOK,String)
            End If
            If (Original_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_YEAR")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_YEAR,String)
            End If
            If (Original_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MODEL_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UNIT_NO,String)
            End If
            If (Original_AT_MT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AT_MT")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_AT_MT,String)
            End If
            If (Original_EMISSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EMISSION")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_EMISSION,String)
            End If
            If (Original_INJ_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INJ_MODEL_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_INJ_MODEL_CODE,String)
            End If
            If (Original_SPARE_001 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_001")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SPARE_001,String)
            End If
            If (Original_SPARE_002 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_002")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_SPARE_002,String)
            End If
            If (Original_SPARE_003 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_003")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SPARE_003,String)
            End If
            If (Original_SPARE_004 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_004")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_SPARE_004,String)
            End If
            If (Original_SPARE_005 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_005")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_SPARE_005,String)
            End If
            If (Original_SPARE_006 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_006")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_SPARE_006,String)
            End If
            If (Original_SPARE_007 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_007")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SPARE_007,String)
            End If
            If (Original_SPARE_008 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_008")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_SPARE_008,String)
            End If
            If (Original_SPARE_009 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_009")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SPARE_009,String)
            End If
            If (Original_SPARE_010 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_010")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_SPARE_010,String)
            End If
            If (Original_SPARE_011 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_011")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_SPARE_011,String)
            End If
            If (Original_SPARE_012 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_012")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_SPARE_012,String)
            End If
            If (Original_SPARE_013 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_013")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SPARE_013,String)
            End If
            If (Original_SPARE_014 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_014")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_SPARE_014,String)
            End If
            If (Original_SPARE_015 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_015")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_SPARE_015,String)
            End If
            If (Original_SPARE_016 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_016")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_SPARE_016,String)
            End If
            If (Original_SPARE_017 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_017")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_SPARE_017,String)
            End If
            If (Original_SB_DATA_SB_PARTS_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_SB_PARTS_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_SB_DATA_SB_PARTS_NO,String)
            End If
            If (Original_SB_DATA_SB_SERIAL_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_SB_SERIAL_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_SB_DATA_SB_SERIAL_NO,String)
            End If
            If (Original_SB_DATA_GASKET_GRADE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_GASKET_GRADE")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_SB_DATA_GASKET_GRADE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_LINE_ON_TIME,Date)
            Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_LINE_OFF_TIME,Date)
            If (Original_RPCOCF_SBLO_BCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_BCT")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_RPCOCF_SBLO_BCT,String)
            End If
            If (Original_RPCOCF_SBLO_CRT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_CRT")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_RPCOCF_SBLO_CRT,String)
            End If
            If (Original_RPCOCF_SBLO_CTM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_CTM")
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_RPCOCF_SBLO_CTM,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE01")
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_RPCOCF_SBLO_SPARE01,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE02")
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_RPCOCF_SBLO_SPARE02,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE03")
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_RPCOCF_SBLO_SPARE03,String)
            End If
            If (Original_RPCOCF_MALO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_CCT")
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_RPCOCF_MALO_CCT,String)
            End If
            If (Original_RPCOCF_MALO_DPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_DPT")
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_RPCOCF_MALO_DPT,String)
            End If
            If (Original_RPCOCF_MALO_FWT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_FWT")
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_RPCOCF_MALO_FWT,String)
            End If
            If (Original_RPCOCF_MALO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE01")
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_RPCOCF_MALO_SPARE01,String)
            End If
            If (Original_RPCOCF_MALO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE02")
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_RPCOCF_MALO_SPARE02,String)
            End If
            If (Original_RPCOCF_MALO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE03")
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_RPCOCF_MALO_SPARE03,String)
            End If
            If (Original_RPCOCF_MBLO_HDT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_HDT")
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_RPCOCF_MBLO_HDT,String)
            End If
            If (Original_RPCOCF_MBLO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_CCT")
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_RPCOCF_MBLO_CCT,String)
            End If
            If (Original_RPCOCF_MBLO_HCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_HCT")
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_RPCOCF_MBLO_HCT,String)
            End If
            If (Original_RPCOCF_MBLO_PPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_PPT")
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_RPCOCF_MBLO_PPT,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE01")
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_RPCOCF_MBLO_SPARE01,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE02")
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_RPCOCF_MBLO_SPARE02,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE03")
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_RPCOCF_MBLO_SPARE03,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE04")
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_RPCOCF_MBLO_SPARE04,String)
            End If
            If (Original_INSPSJ_INSPECTION01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION01")
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_INSPSJ_INSPECTION01,String)
            End If
            If (Original_INSPSJ_INSPECTION02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION02")
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_INSPSJ_INSPECTION02,String)
            End If
            If (Original_INSPSJ_INSPECTION03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION03")
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_INSPSJ_INSPECTION03,String)
            End If
            If (Original_INSPSJ_INSPECTION04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION04")
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_INSPSJ_INSPECTION04,String)
            End If
            If (Original_INSPSJ_INSPECTION05 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION05")
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_INSPSJ_INSPECTION05,String)
            End If
            If (Original_INSPSJ_INSPECTION06 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION06")
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_INSPSJ_INSPECTION06,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_INSPSJ_INSPECTION_TIME01,Date)
            If (Original_INSPSJ_INSPECTION11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION11")
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_INSPSJ_INSPECTION11,String)
            End If
            If (Original_INSPSJ_INSPECTION12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION12")
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_INSPSJ_INSPECTION12,String)
            End If
            If (Original_INSPSJ_INSPECTION13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION13")
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_INSPSJ_INSPECTION13,String)
            End If
            If (Original_INSPSJ_INSPECTION14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION14")
            Else
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_INSPSJ_INSPECTION14,String)
            End If
            If (Original_INSPSJ_INSPECTION15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION15")
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_INSPSJ_INSPECTION15,String)
            End If
            If (Original_INSPSJ_INSPECTION16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION16")
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_INSPSJ_INSPECTION16,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_INSPSJ_INSPECTION_TIME02,Date)
            If (Original_CREATED_BY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CREATED_BY")
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_CREATED_BY,String)
            End If
            If (Original_UPDATED_BY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_UPDATED_BY,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_CREATED_WHEN,Date)
            If (Original_UPDATED_WHEN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(Original_UPDATED_WHEN.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ENGINE_TYPE As String,  _
                    ByVal ENGINE_NO As String,  _
                    ByVal ENGINE_ASM_NO As String,  _
                    ByVal BOOK As String,  _
                    ByVal YEAR As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT_NO As String,  _
                    ByVal AT_MT As String,  _
                    ByVal EMISSION As String,  _
                    ByVal INJ_MODEL_CODE As String,  _
                    ByVal SPARE_001 As String,  _
                    ByVal SPARE_002 As String,  _
                    ByVal SPARE_003 As String,  _
                    ByVal SPARE_004 As String,  _
                    ByVal SPARE_005 As String,  _
                    ByVal SPARE_006 As String,  _
                    ByVal SPARE_007 As String,  _
                    ByVal SPARE_008 As String,  _
                    ByVal SPARE_009 As String,  _
                    ByVal SPARE_010 As String,  _
                    ByVal SPARE_011 As String,  _
                    ByVal SPARE_012 As String,  _
                    ByVal SPARE_013 As String,  _
                    ByVal SPARE_014 As String,  _
                    ByVal SPARE_015 As String,  _
                    ByVal SPARE_016 As String,  _
                    ByVal SPARE_017 As String,  _
                    ByVal SB_DATA_SB_PARTS_NO As String,  _
                    ByVal SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal SB_DATA_GASKET_GRADE As String,  _
                    ByVal LINE_ON_TIME As Date,  _
                    ByVal LINE_OFF_TIME As Date,  _
                    ByVal RPCOCF_SBLO_BCT As String,  _
                    ByVal RPCOCF_SBLO_CRT As String,  _
                    ByVal RPCOCF_SBLO_CTM As String,  _
                    ByVal RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MALO_CCT As String,  _
                    ByVal RPCOCF_MALO_DPT As String,  _
                    ByVal RPCOCF_MALO_FWT As String,  _
                    ByVal RPCOCF_MALO_SPARE01 As String,  _
                    ByVal RPCOCF_MALO_SPARE02 As String,  _
                    ByVal RPCOCF_MALO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_HDT As String,  _
                    ByVal RPCOCF_MBLO_CCT As String,  _
                    ByVal RPCOCF_MBLO_HCT As String,  _
                    ByVal RPCOCF_MBLO_PPT As String,  _
                    ByVal RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal INSPSJ_INSPECTION01 As String,  _
                    ByVal INSPSJ_INSPECTION02 As String,  _
                    ByVal INSPSJ_INSPECTION03 As String,  _
                    ByVal INSPSJ_INSPECTION04 As String,  _
                    ByVal INSPSJ_INSPECTION05 As String,  _
                    ByVal INSPSJ_INSPECTION06 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal INSPSJ_INSPECTION11 As String,  _
                    ByVal INSPSJ_INSPECTION12 As String,  _
                    ByVal INSPSJ_INSPECTION13 As String,  _
                    ByVal INSPSJ_INSPECTION14 As String,  _
                    ByVal INSPSJ_INSPECTION15 As String,  _
                    ByVal INSPSJ_INSPECTION16 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal CREATED_BY As String,  _
                    ByVal UPDATED_BY As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal UPDATED_WHEN As Global.System.Nullable(Of Date)) As Integer
            If (ENGINE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_TYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENGINE_TYPE,String)
            End If
            If (ENGINE_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENGINE_NO,String)
            End If
            If (ENGINE_ASM_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_ASM_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ENGINE_ASM_NO,String)
            End If
            If (BOOK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BOOK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(BOOK,String)
            End If
            If (YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("YEAR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(YEAR,String)
            End If
            If (MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MODEL_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LOT_NO,String)
            End If
            If (UNIT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(UNIT_NO,String)
            End If
            If (AT_MT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AT_MT")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(AT_MT,String)
            End If
            If (EMISSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EMISSION")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(EMISSION,String)
            End If
            If (INJ_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INJ_MODEL_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(INJ_MODEL_CODE,String)
            End If
            If (SPARE_001 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_001")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SPARE_001,String)
            End If
            If (SPARE_002 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_002")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SPARE_002,String)
            End If
            If (SPARE_003 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_003")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SPARE_003,String)
            End If
            If (SPARE_004 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_004")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SPARE_004,String)
            End If
            If (SPARE_005 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_005")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(SPARE_005,String)
            End If
            If (SPARE_006 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_006")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SPARE_006,String)
            End If
            If (SPARE_007 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_007")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SPARE_007,String)
            End If
            If (SPARE_008 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_008")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(SPARE_008,String)
            End If
            If (SPARE_009 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_009")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(SPARE_009,String)
            End If
            If (SPARE_010 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_010")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SPARE_010,String)
            End If
            If (SPARE_011 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_011")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SPARE_011,String)
            End If
            If (SPARE_012 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_012")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SPARE_012,String)
            End If
            If (SPARE_013 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_013")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SPARE_013,String)
            End If
            If (SPARE_014 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_014")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(SPARE_014,String)
            End If
            If (SPARE_015 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_015")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(SPARE_015,String)
            End If
            If (SPARE_016 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_016")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(SPARE_016,String)
            End If
            If (SPARE_017 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_017")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(SPARE_017,String)
            End If
            If (SB_DATA_SB_PARTS_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_SB_PARTS_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(SB_DATA_SB_PARTS_NO,String)
            End If
            If (SB_DATA_SB_SERIAL_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_SB_SERIAL_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(SB_DATA_SB_SERIAL_NO,String)
            End If
            If (SB_DATA_GASKET_GRADE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_GASKET_GRADE")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(SB_DATA_GASKET_GRADE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(31).Value = CType(LINE_ON_TIME,Date)
            Me.Adapter.InsertCommand.Parameters(32).Value = CType(LINE_OFF_TIME,Date)
            If (RPCOCF_SBLO_BCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_BCT")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(RPCOCF_SBLO_BCT,String)
            End If
            If (RPCOCF_SBLO_CRT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_CRT")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(RPCOCF_SBLO_CRT,String)
            End If
            If (RPCOCF_SBLO_CTM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_CTM")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(RPCOCF_SBLO_CTM,String)
            End If
            If (RPCOCF_SBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE01")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(RPCOCF_SBLO_SPARE01,String)
            End If
            If (RPCOCF_SBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE02")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(RPCOCF_SBLO_SPARE02,String)
            End If
            If (RPCOCF_SBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE03")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(RPCOCF_SBLO_SPARE03,String)
            End If
            If (RPCOCF_MALO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_CCT")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(RPCOCF_MALO_CCT,String)
            End If
            If (RPCOCF_MALO_DPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_DPT")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(RPCOCF_MALO_DPT,String)
            End If
            If (RPCOCF_MALO_FWT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_FWT")
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(RPCOCF_MALO_FWT,String)
            End If
            If (RPCOCF_MALO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE01")
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(RPCOCF_MALO_SPARE01,String)
            End If
            If (RPCOCF_MALO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE02")
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(RPCOCF_MALO_SPARE02,String)
            End If
            If (RPCOCF_MALO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE03")
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(RPCOCF_MALO_SPARE03,String)
            End If
            If (RPCOCF_MBLO_HDT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_HDT")
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(RPCOCF_MBLO_HDT,String)
            End If
            If (RPCOCF_MBLO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_CCT")
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(RPCOCF_MBLO_CCT,String)
            End If
            If (RPCOCF_MBLO_HCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_HCT")
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(RPCOCF_MBLO_HCT,String)
            End If
            If (RPCOCF_MBLO_PPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_PPT")
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(RPCOCF_MBLO_PPT,String)
            End If
            If (RPCOCF_MBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE01")
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(RPCOCF_MBLO_SPARE01,String)
            End If
            If (RPCOCF_MBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE02")
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(RPCOCF_MBLO_SPARE02,String)
            End If
            If (RPCOCF_MBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE03")
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(RPCOCF_MBLO_SPARE03,String)
            End If
            If (RPCOCF_MBLO_SPARE04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE04")
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(RPCOCF_MBLO_SPARE04,String)
            End If
            If (INSPSJ_INSPECTION01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION01")
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(INSPSJ_INSPECTION01,String)
            End If
            If (INSPSJ_INSPECTION02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION02")
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(INSPSJ_INSPECTION02,String)
            End If
            If (INSPSJ_INSPECTION03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION03")
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(INSPSJ_INSPECTION03,String)
            End If
            If (INSPSJ_INSPECTION04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION04")
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(INSPSJ_INSPECTION04,String)
            End If
            If (INSPSJ_INSPECTION05 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION05")
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(INSPSJ_INSPECTION05,String)
            End If
            If (INSPSJ_INSPECTION06 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION06")
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(INSPSJ_INSPECTION06,String)
            End If
            Me.Adapter.InsertCommand.Parameters(59).Value = CType(INSPSJ_INSPECTION_TIME01,Date)
            If (INSPSJ_INSPECTION11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION11")
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(INSPSJ_INSPECTION11,String)
            End If
            If (INSPSJ_INSPECTION12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION12")
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(INSPSJ_INSPECTION12,String)
            End If
            If (INSPSJ_INSPECTION13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION13")
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(INSPSJ_INSPECTION13,String)
            End If
            If (INSPSJ_INSPECTION14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION14")
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(INSPSJ_INSPECTION14,String)
            End If
            If (INSPSJ_INSPECTION15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION15")
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(INSPSJ_INSPECTION15,String)
            End If
            If (INSPSJ_INSPECTION16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION16")
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(INSPSJ_INSPECTION16,String)
            End If
            Me.Adapter.InsertCommand.Parameters(66).Value = CType(INSPSJ_INSPECTION_TIME02,Date)
            If (CREATED_BY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CREATED_BY")
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(CREATED_BY,String)
            End If
            If (UPDATED_BY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(UPDATED_BY,String)
            End If
            Me.Adapter.InsertCommand.Parameters(69).Value = CType(CREATED_WHEN,Date)
            If (UPDATED_WHEN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(UPDATED_WHEN.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ENGINE_TYPE As String,  _
                    ByVal ENGINE_NO As String,  _
                    ByVal ENGINE_ASM_NO As String,  _
                    ByVal BOOK As String,  _
                    ByVal YEAR As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT_NO As String,  _
                    ByVal AT_MT As String,  _
                    ByVal EMISSION As String,  _
                    ByVal INJ_MODEL_CODE As String,  _
                    ByVal SPARE_001 As String,  _
                    ByVal SPARE_002 As String,  _
                    ByVal SPARE_003 As String,  _
                    ByVal SPARE_004 As String,  _
                    ByVal SPARE_005 As String,  _
                    ByVal SPARE_006 As String,  _
                    ByVal SPARE_007 As String,  _
                    ByVal SPARE_008 As String,  _
                    ByVal SPARE_009 As String,  _
                    ByVal SPARE_010 As String,  _
                    ByVal SPARE_011 As String,  _
                    ByVal SPARE_012 As String,  _
                    ByVal SPARE_013 As String,  _
                    ByVal SPARE_014 As String,  _
                    ByVal SPARE_015 As String,  _
                    ByVal SPARE_016 As String,  _
                    ByVal SPARE_017 As String,  _
                    ByVal SB_DATA_SB_PARTS_NO As String,  _
                    ByVal SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal SB_DATA_GASKET_GRADE As String,  _
                    ByVal LINE_ON_TIME As Date,  _
                    ByVal LINE_OFF_TIME As Date,  _
                    ByVal RPCOCF_SBLO_BCT As String,  _
                    ByVal RPCOCF_SBLO_CRT As String,  _
                    ByVal RPCOCF_SBLO_CTM As String,  _
                    ByVal RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MALO_CCT As String,  _
                    ByVal RPCOCF_MALO_DPT As String,  _
                    ByVal RPCOCF_MALO_FWT As String,  _
                    ByVal RPCOCF_MALO_SPARE01 As String,  _
                    ByVal RPCOCF_MALO_SPARE02 As String,  _
                    ByVal RPCOCF_MALO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_HDT As String,  _
                    ByVal RPCOCF_MBLO_CCT As String,  _
                    ByVal RPCOCF_MBLO_HCT As String,  _
                    ByVal RPCOCF_MBLO_PPT As String,  _
                    ByVal RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal INSPSJ_INSPECTION01 As String,  _
                    ByVal INSPSJ_INSPECTION02 As String,  _
                    ByVal INSPSJ_INSPECTION03 As String,  _
                    ByVal INSPSJ_INSPECTION04 As String,  _
                    ByVal INSPSJ_INSPECTION05 As String,  _
                    ByVal INSPSJ_INSPECTION06 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal INSPSJ_INSPECTION11 As String,  _
                    ByVal INSPSJ_INSPECTION12 As String,  _
                    ByVal INSPSJ_INSPECTION13 As String,  _
                    ByVal INSPSJ_INSPECTION14 As String,  _
                    ByVal INSPSJ_INSPECTION15 As String,  _
                    ByVal INSPSJ_INSPECTION16 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal CREATED_BY As String,  _
                    ByVal UPDATED_BY As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal UPDATED_WHEN As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ENGINE_TYPE As String,  _
                    ByVal Original_ENGINE_NO As String,  _
                    ByVal Original_ENGINE_ASM_NO As String,  _
                    ByVal Original_BOOK As String,  _
                    ByVal Original_YEAR As String,  _
                    ByVal Original_MODEL_CODE As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT_NO As String,  _
                    ByVal Original_AT_MT As String,  _
                    ByVal Original_EMISSION As String,  _
                    ByVal Original_INJ_MODEL_CODE As String,  _
                    ByVal Original_SPARE_001 As String,  _
                    ByVal Original_SPARE_002 As String,  _
                    ByVal Original_SPARE_003 As String,  _
                    ByVal Original_SPARE_004 As String,  _
                    ByVal Original_SPARE_005 As String,  _
                    ByVal Original_SPARE_006 As String,  _
                    ByVal Original_SPARE_007 As String,  _
                    ByVal Original_SPARE_008 As String,  _
                    ByVal Original_SPARE_009 As String,  _
                    ByVal Original_SPARE_010 As String,  _
                    ByVal Original_SPARE_011 As String,  _
                    ByVal Original_SPARE_012 As String,  _
                    ByVal Original_SPARE_013 As String,  _
                    ByVal Original_SPARE_014 As String,  _
                    ByVal Original_SPARE_015 As String,  _
                    ByVal Original_SPARE_016 As String,  _
                    ByVal Original_SPARE_017 As String,  _
                    ByVal Original_SB_DATA_SB_PARTS_NO As String,  _
                    ByVal Original_SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal Original_SB_DATA_GASKET_GRADE As String,  _
                    ByVal Original_LINE_ON_TIME As Date,  _
                    ByVal Original_LINE_OFF_TIME As Date,  _
                    ByVal Original_RPCOCF_SBLO_BCT As String,  _
                    ByVal Original_RPCOCF_SBLO_CRT As String,  _
                    ByVal Original_RPCOCF_SBLO_CTM As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MALO_CCT As String,  _
                    ByVal Original_RPCOCF_MALO_DPT As String,  _
                    ByVal Original_RPCOCF_MALO_FWT As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_HDT As String,  _
                    ByVal Original_RPCOCF_MBLO_CCT As String,  _
                    ByVal Original_RPCOCF_MBLO_HCT As String,  _
                    ByVal Original_RPCOCF_MBLO_PPT As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION01 As String,  _
                    ByVal Original_INSPSJ_INSPECTION02 As String,  _
                    ByVal Original_INSPSJ_INSPECTION03 As String,  _
                    ByVal Original_INSPSJ_INSPECTION04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION05 As String,  _
                    ByVal Original_INSPSJ_INSPECTION06 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal Original_INSPSJ_INSPECTION11 As String,  _
                    ByVal Original_INSPSJ_INSPECTION12 As String,  _
                    ByVal Original_INSPSJ_INSPECTION13 As String,  _
                    ByVal Original_INSPSJ_INSPECTION14 As String,  _
                    ByVal Original_INSPSJ_INSPECTION15 As String,  _
                    ByVal Original_INSPSJ_INSPECTION16 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal Original_CREATED_BY As String,  _
                    ByVal Original_UPDATED_BY As String,  _
                    ByVal Original_CREATED_WHEN As Date,  _
                    ByVal Original_UPDATED_WHEN As Global.System.Nullable(Of Date),  _
                    ByVal ID As Integer) As Integer
            If (ENGINE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENGINE_TYPE,String)
            End If
            If (ENGINE_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENGINE_NO,String)
            End If
            If (ENGINE_ASM_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_ASM_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ENGINE_ASM_NO,String)
            End If
            If (BOOK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BOOK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(BOOK,String)
            End If
            If (YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(YEAR,String)
            End If
            If (MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MODEL_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LOT_NO,String)
            End If
            If (UNIT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(UNIT_NO,String)
            End If
            If (AT_MT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AT_MT")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(AT_MT,String)
            End If
            If (EMISSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EMISSION")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(EMISSION,String)
            End If
            If (INJ_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INJ_MODEL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(INJ_MODEL_CODE,String)
            End If
            If (SPARE_001 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_001")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SPARE_001,String)
            End If
            If (SPARE_002 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_002")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SPARE_002,String)
            End If
            If (SPARE_003 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_003")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SPARE_003,String)
            End If
            If (SPARE_004 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_004")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SPARE_004,String)
            End If
            If (SPARE_005 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_005")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SPARE_005,String)
            End If
            If (SPARE_006 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_006")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SPARE_006,String)
            End If
            If (SPARE_007 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_007")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SPARE_007,String)
            End If
            If (SPARE_008 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_008")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(SPARE_008,String)
            End If
            If (SPARE_009 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_009")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SPARE_009,String)
            End If
            If (SPARE_010 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_010")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SPARE_010,String)
            End If
            If (SPARE_011 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_011")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SPARE_011,String)
            End If
            If (SPARE_012 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_012")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SPARE_012,String)
            End If
            If (SPARE_013 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_013")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SPARE_013,String)
            End If
            If (SPARE_014 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_014")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(SPARE_014,String)
            End If
            If (SPARE_015 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_015")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(SPARE_015,String)
            End If
            If (SPARE_016 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_016")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(SPARE_016,String)
            End If
            If (SPARE_017 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPARE_017")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(SPARE_017,String)
            End If
            If (SB_DATA_SB_PARTS_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_SB_PARTS_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(SB_DATA_SB_PARTS_NO,String)
            End If
            If (SB_DATA_SB_SERIAL_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_SB_SERIAL_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(SB_DATA_SB_SERIAL_NO,String)
            End If
            If (SB_DATA_GASKET_GRADE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_GASKET_GRADE")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(SB_DATA_GASKET_GRADE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(LINE_ON_TIME,Date)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(LINE_OFF_TIME,Date)
            If (RPCOCF_SBLO_BCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_BCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(RPCOCF_SBLO_BCT,String)
            End If
            If (RPCOCF_SBLO_CRT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_CRT")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(RPCOCF_SBLO_CRT,String)
            End If
            If (RPCOCF_SBLO_CTM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_CTM")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(RPCOCF_SBLO_CTM,String)
            End If
            If (RPCOCF_SBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(RPCOCF_SBLO_SPARE01,String)
            End If
            If (RPCOCF_SBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(RPCOCF_SBLO_SPARE02,String)
            End If
            If (RPCOCF_SBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(RPCOCF_SBLO_SPARE03,String)
            End If
            If (RPCOCF_MALO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_CCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(RPCOCF_MALO_CCT,String)
            End If
            If (RPCOCF_MALO_DPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_DPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(RPCOCF_MALO_DPT,String)
            End If
            If (RPCOCF_MALO_FWT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_FWT")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(RPCOCF_MALO_FWT,String)
            End If
            If (RPCOCF_MALO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(RPCOCF_MALO_SPARE01,String)
            End If
            If (RPCOCF_MALO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(RPCOCF_MALO_SPARE02,String)
            End If
            If (RPCOCF_MALO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(RPCOCF_MALO_SPARE03,String)
            End If
            If (RPCOCF_MBLO_HDT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_HDT")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(RPCOCF_MBLO_HDT,String)
            End If
            If (RPCOCF_MBLO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_CCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(RPCOCF_MBLO_CCT,String)
            End If
            If (RPCOCF_MBLO_HCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_HCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(RPCOCF_MBLO_HCT,String)
            End If
            If (RPCOCF_MBLO_PPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_PPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(RPCOCF_MBLO_PPT,String)
            End If
            If (RPCOCF_MBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(RPCOCF_MBLO_SPARE01,String)
            End If
            If (RPCOCF_MBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(RPCOCF_MBLO_SPARE02,String)
            End If
            If (RPCOCF_MBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(RPCOCF_MBLO_SPARE03,String)
            End If
            If (RPCOCF_MBLO_SPARE04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE04")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(RPCOCF_MBLO_SPARE04,String)
            End If
            If (INSPSJ_INSPECTION01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION01")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(INSPSJ_INSPECTION01,String)
            End If
            If (INSPSJ_INSPECTION02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION02")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(INSPSJ_INSPECTION02,String)
            End If
            If (INSPSJ_INSPECTION03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION03")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(INSPSJ_INSPECTION03,String)
            End If
            If (INSPSJ_INSPECTION04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION04")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(INSPSJ_INSPECTION04,String)
            End If
            If (INSPSJ_INSPECTION05 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION05")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(INSPSJ_INSPECTION05,String)
            End If
            If (INSPSJ_INSPECTION06 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION06")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(INSPSJ_INSPECTION06,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(INSPSJ_INSPECTION_TIME01,Date)
            If (INSPSJ_INSPECTION11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION11")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(INSPSJ_INSPECTION11,String)
            End If
            If (INSPSJ_INSPECTION12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION12")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(INSPSJ_INSPECTION12,String)
            End If
            If (INSPSJ_INSPECTION13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION13")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(INSPSJ_INSPECTION13,String)
            End If
            If (INSPSJ_INSPECTION14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION14")
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(INSPSJ_INSPECTION14,String)
            End If
            If (INSPSJ_INSPECTION15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION15")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(INSPSJ_INSPECTION15,String)
            End If
            If (INSPSJ_INSPECTION16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION16")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(INSPSJ_INSPECTION16,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(INSPSJ_INSPECTION_TIME02,Date)
            If (CREATED_BY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CREATED_BY")
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(CREATED_BY,String)
            End If
            If (UPDATED_BY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(UPDATED_BY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(69).Value = CType(CREATED_WHEN,Date)
            If (UPDATED_WHEN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(UPDATED_WHEN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_ID,Integer)
            If (Original_ENGINE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_ENGINE_TYPE,String)
            End If
            If (Original_ENGINE_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_ENGINE_NO,String)
            End If
            If (Original_ENGINE_ASM_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_ASM_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_ENGINE_ASM_NO,String)
            End If
            If (Original_BOOK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BOOK")
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_BOOK,String)
            End If
            If (Original_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_YEAR,String)
            End If
            If (Original_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_MODEL_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_UNIT_NO,String)
            End If
            If (Original_AT_MT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AT_MT")
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_AT_MT,String)
            End If
            If (Original_EMISSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EMISSION")
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_EMISSION,String)
            End If
            If (Original_INJ_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INJ_MODEL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_INJ_MODEL_CODE,String)
            End If
            If (Original_SPARE_001 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_001")
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_SPARE_001,String)
            End If
            If (Original_SPARE_002 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_002")
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_SPARE_002,String)
            End If
            If (Original_SPARE_003 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_003")
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_SPARE_003,String)
            End If
            If (Original_SPARE_004 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_004")
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_SPARE_004,String)
            End If
            If (Original_SPARE_005 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_005")
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_SPARE_005,String)
            End If
            If (Original_SPARE_006 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_006")
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_SPARE_006,String)
            End If
            If (Original_SPARE_007 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_007")
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_SPARE_007,String)
            End If
            If (Original_SPARE_008 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_008")
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_SPARE_008,String)
            End If
            If (Original_SPARE_009 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_009")
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_SPARE_009,String)
            End If
            If (Original_SPARE_010 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_010")
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_SPARE_010,String)
            End If
            If (Original_SPARE_011 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_011")
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_SPARE_011,String)
            End If
            If (Original_SPARE_012 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_012")
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_SPARE_012,String)
            End If
            If (Original_SPARE_013 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_013")
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_SPARE_013,String)
            End If
            If (Original_SPARE_014 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_014")
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_SPARE_014,String)
            End If
            If (Original_SPARE_015 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_015")
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_SPARE_015,String)
            End If
            If (Original_SPARE_016 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_016")
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_SPARE_016,String)
            End If
            If (Original_SPARE_017 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPARE_017")
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_SPARE_017,String)
            End If
            If (Original_SB_DATA_SB_PARTS_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_SB_PARTS_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_SB_DATA_SB_PARTS_NO,String)
            End If
            If (Original_SB_DATA_SB_SERIAL_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_SB_SERIAL_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_SB_DATA_SB_SERIAL_NO,String)
            End If
            If (Original_SB_DATA_GASKET_GRADE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_GASKET_GRADE")
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_SB_DATA_GASKET_GRADE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_LINE_ON_TIME,Date)
            Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_LINE_OFF_TIME,Date)
            If (Original_RPCOCF_SBLO_BCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_BCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_RPCOCF_SBLO_BCT,String)
            End If
            If (Original_RPCOCF_SBLO_CRT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_CRT")
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_RPCOCF_SBLO_CRT,String)
            End If
            If (Original_RPCOCF_SBLO_CTM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_CTM")
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_RPCOCF_SBLO_CTM,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_RPCOCF_SBLO_SPARE01,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_RPCOCF_SBLO_SPARE02,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_RPCOCF_SBLO_SPARE03,String)
            End If
            If (Original_RPCOCF_MALO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_CCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_RPCOCF_MALO_CCT,String)
            End If
            If (Original_RPCOCF_MALO_DPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_DPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_RPCOCF_MALO_DPT,String)
            End If
            If (Original_RPCOCF_MALO_FWT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_FWT")
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_RPCOCF_MALO_FWT,String)
            End If
            If (Original_RPCOCF_MALO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(Original_RPCOCF_MALO_SPARE01,String)
            End If
            If (Original_RPCOCF_MALO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_RPCOCF_MALO_SPARE02,String)
            End If
            If (Original_RPCOCF_MALO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(Original_RPCOCF_MALO_SPARE03,String)
            End If
            If (Original_RPCOCF_MBLO_HDT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_HDT")
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_RPCOCF_MBLO_HDT,String)
            End If
            If (Original_RPCOCF_MBLO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_CCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_RPCOCF_MBLO_CCT,String)
            End If
            If (Original_RPCOCF_MBLO_HCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_HCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(Original_RPCOCF_MBLO_HCT,String)
            End If
            If (Original_RPCOCF_MBLO_PPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_PPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_RPCOCF_MBLO_PPT,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(Original_RPCOCF_MBLO_SPARE01,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_RPCOCF_MBLO_SPARE02,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(Original_RPCOCF_MBLO_SPARE03,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE04")
            Else
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(Original_RPCOCF_MBLO_SPARE04,String)
            End If
            If (Original_INSPSJ_INSPECTION01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION01")
            Else
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(Original_INSPSJ_INSPECTION01,String)
            End If
            If (Original_INSPSJ_INSPECTION02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION02")
            Else
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(Original_INSPSJ_INSPECTION02,String)
            End If
            If (Original_INSPSJ_INSPECTION03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION03")
            Else
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(Original_INSPSJ_INSPECTION03,String)
            End If
            If (Original_INSPSJ_INSPECTION04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION04")
            Else
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(Original_INSPSJ_INSPECTION04,String)
            End If
            If (Original_INSPSJ_INSPECTION05 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION05")
            Else
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(Original_INSPSJ_INSPECTION05,String)
            End If
            If (Original_INSPSJ_INSPECTION06 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION06")
            Else
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(Original_INSPSJ_INSPECTION06,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(131).Value = CType(Original_INSPSJ_INSPECTION_TIME01,Date)
            If (Original_INSPSJ_INSPECTION11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION11")
            Else
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(Original_INSPSJ_INSPECTION11,String)
            End If
            If (Original_INSPSJ_INSPECTION12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION12")
            Else
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(Original_INSPSJ_INSPECTION12,String)
            End If
            If (Original_INSPSJ_INSPECTION13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION13")
            Else
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(Original_INSPSJ_INSPECTION13,String)
            End If
            If (Original_INSPSJ_INSPECTION14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION14")
            Else
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(Original_INSPSJ_INSPECTION14,String)
            End If
            If (Original_INSPSJ_INSPECTION15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION15")
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(Original_INSPSJ_INSPECTION15,String)
            End If
            If (Original_INSPSJ_INSPECTION16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION16")
            Else
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(Original_INSPSJ_INSPECTION16,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(138).Value = CType(Original_INSPSJ_INSPECTION_TIME02,Date)
            If (Original_CREATED_BY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CREATED_BY")
            Else
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(Original_CREATED_BY,String)
            End If
            If (Original_UPDATED_BY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(Original_UPDATED_BY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(142).Value = CType(Original_CREATED_WHEN,Date)
            If (Original_UPDATED_WHEN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(Original_UPDATED_WHEN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(145).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ENGINE_TYPE As String,  _
                    ByVal ENGINE_NO As String,  _
                    ByVal ENGINE_ASM_NO As String,  _
                    ByVal BOOK As String,  _
                    ByVal YEAR As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT_NO As String,  _
                    ByVal AT_MT As String,  _
                    ByVal EMISSION As String,  _
                    ByVal INJ_MODEL_CODE As String,  _
                    ByVal SPARE_001 As String,  _
                    ByVal SPARE_002 As String,  _
                    ByVal SPARE_003 As String,  _
                    ByVal SPARE_004 As String,  _
                    ByVal SPARE_005 As String,  _
                    ByVal SPARE_006 As String,  _
                    ByVal SPARE_007 As String,  _
                    ByVal SPARE_008 As String,  _
                    ByVal SPARE_009 As String,  _
                    ByVal SPARE_010 As String,  _
                    ByVal SPARE_011 As String,  _
                    ByVal SPARE_012 As String,  _
                    ByVal SPARE_013 As String,  _
                    ByVal SPARE_014 As String,  _
                    ByVal SPARE_015 As String,  _
                    ByVal SPARE_016 As String,  _
                    ByVal SPARE_017 As String,  _
                    ByVal SB_DATA_SB_PARTS_NO As String,  _
                    ByVal SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal SB_DATA_GASKET_GRADE As String,  _
                    ByVal LINE_ON_TIME As Date,  _
                    ByVal LINE_OFF_TIME As Date,  _
                    ByVal RPCOCF_SBLO_BCT As String,  _
                    ByVal RPCOCF_SBLO_CRT As String,  _
                    ByVal RPCOCF_SBLO_CTM As String,  _
                    ByVal RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MALO_CCT As String,  _
                    ByVal RPCOCF_MALO_DPT As String,  _
                    ByVal RPCOCF_MALO_FWT As String,  _
                    ByVal RPCOCF_MALO_SPARE01 As String,  _
                    ByVal RPCOCF_MALO_SPARE02 As String,  _
                    ByVal RPCOCF_MALO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_HDT As String,  _
                    ByVal RPCOCF_MBLO_CCT As String,  _
                    ByVal RPCOCF_MBLO_HCT As String,  _
                    ByVal RPCOCF_MBLO_PPT As String,  _
                    ByVal RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal INSPSJ_INSPECTION01 As String,  _
                    ByVal INSPSJ_INSPECTION02 As String,  _
                    ByVal INSPSJ_INSPECTION03 As String,  _
                    ByVal INSPSJ_INSPECTION04 As String,  _
                    ByVal INSPSJ_INSPECTION05 As String,  _
                    ByVal INSPSJ_INSPECTION06 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal INSPSJ_INSPECTION11 As String,  _
                    ByVal INSPSJ_INSPECTION12 As String,  _
                    ByVal INSPSJ_INSPECTION13 As String,  _
                    ByVal INSPSJ_INSPECTION14 As String,  _
                    ByVal INSPSJ_INSPECTION15 As String,  _
                    ByVal INSPSJ_INSPECTION16 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal CREATED_BY As String,  _
                    ByVal UPDATED_BY As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal UPDATED_WHEN As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ENGINE_TYPE As String,  _
                    ByVal Original_ENGINE_NO As String,  _
                    ByVal Original_ENGINE_ASM_NO As String,  _
                    ByVal Original_BOOK As String,  _
                    ByVal Original_YEAR As String,  _
                    ByVal Original_MODEL_CODE As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT_NO As String,  _
                    ByVal Original_AT_MT As String,  _
                    ByVal Original_EMISSION As String,  _
                    ByVal Original_INJ_MODEL_CODE As String,  _
                    ByVal Original_SPARE_001 As String,  _
                    ByVal Original_SPARE_002 As String,  _
                    ByVal Original_SPARE_003 As String,  _
                    ByVal Original_SPARE_004 As String,  _
                    ByVal Original_SPARE_005 As String,  _
                    ByVal Original_SPARE_006 As String,  _
                    ByVal Original_SPARE_007 As String,  _
                    ByVal Original_SPARE_008 As String,  _
                    ByVal Original_SPARE_009 As String,  _
                    ByVal Original_SPARE_010 As String,  _
                    ByVal Original_SPARE_011 As String,  _
                    ByVal Original_SPARE_012 As String,  _
                    ByVal Original_SPARE_013 As String,  _
                    ByVal Original_SPARE_014 As String,  _
                    ByVal Original_SPARE_015 As String,  _
                    ByVal Original_SPARE_016 As String,  _
                    ByVal Original_SPARE_017 As String,  _
                    ByVal Original_SB_DATA_SB_PARTS_NO As String,  _
                    ByVal Original_SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal Original_SB_DATA_GASKET_GRADE As String,  _
                    ByVal Original_LINE_ON_TIME As Date,  _
                    ByVal Original_LINE_OFF_TIME As Date,  _
                    ByVal Original_RPCOCF_SBLO_BCT As String,  _
                    ByVal Original_RPCOCF_SBLO_CRT As String,  _
                    ByVal Original_RPCOCF_SBLO_CTM As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MALO_CCT As String,  _
                    ByVal Original_RPCOCF_MALO_DPT As String,  _
                    ByVal Original_RPCOCF_MALO_FWT As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_HDT As String,  _
                    ByVal Original_RPCOCF_MBLO_CCT As String,  _
                    ByVal Original_RPCOCF_MBLO_HCT As String,  _
                    ByVal Original_RPCOCF_MBLO_PPT As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION01 As String,  _
                    ByVal Original_INSPSJ_INSPECTION02 As String,  _
                    ByVal Original_INSPSJ_INSPECTION03 As String,  _
                    ByVal Original_INSPSJ_INSPECTION04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION05 As String,  _
                    ByVal Original_INSPSJ_INSPECTION06 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal Original_INSPSJ_INSPECTION11 As String,  _
                    ByVal Original_INSPSJ_INSPECTION12 As String,  _
                    ByVal Original_INSPSJ_INSPECTION13 As String,  _
                    ByVal Original_INSPSJ_INSPECTION14 As String,  _
                    ByVal Original_INSPSJ_INSPECTION15 As String,  _
                    ByVal Original_INSPSJ_INSPECTION16 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal Original_CREATED_BY As String,  _
                    ByVal Original_UPDATED_BY As String,  _
                    ByVal Original_CREATED_WHEN As Date,  _
                    ByVal Original_UPDATED_WHEN As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(ENGINE_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YEAR, MODEL_CODE, LOT_NO, UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CODE, SPARE_001, SPARE_002, SPARE_003, SPARE_004, SPARE_005, SPARE_006, SPARE_007, SPARE_008, SPARE_009, SPARE_010, SPARE_011, SPARE_012, SPARE_013, SPARE_014, SPARE_015, SPARE_016, SPARE_017, SB_DATA_SB_PARTS_NO, SB_DATA_SB_SERIAL_NO, SB_DATA_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TIME, RPCOCF_SBLO_BCT, RPCOCF_SBLO_CRT, RPCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCOCF_SBLO_SPARE02, RPCOCF_SBLO_SPARE03, RPCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_MALO_FWT, RPCOCF_MALO_SPARE01, RPCOCF_MALO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_MBLO_HDT, RPCOCF_MBLO_CCT, RPCOCF_MBLO_HCT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01, RPCOCF_MBLO_SPARE02, RPCOCF_MBLO_SPARE03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTION01, INSPSJ_INSPECTION02, INSPSJ_INSPECTION03, INSPSJ_INSPECTION04, INSPSJ_INSPECTION05, INSPSJ_INSPECTION06, INSPSJ_INSPECTION_TIME01, INSPSJ_INSPECTION11, INSPSJ_INSPECTION12, INSPSJ_INSPECTION13, INSPSJ_INSPECTION14, INSPSJ_INSPECTION15, INSPSJ_INSPECTION16, INSPSJ_INSPECTION_TIME02, CREATED_BY, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN, Original_ID, Original_ENGINE_TYPE, Original_ENGINE_NO, Original_ENGINE_ASM_NO, Original_BOOK, Original_YEAR, Original_MODEL_CODE, Original_LOT_NO, Original_UNIT_NO, Original_AT_MT, Original_EMISSION, Original_INJ_MODEL_CODE, Original_SPARE_001, Original_SPARE_002, Original_SPARE_003, Original_SPARE_004, Original_SPARE_005, Original_SPARE_006, Original_SPARE_007, Original_SPARE_008, Original_SPARE_009, Original_SPARE_010, Original_SPARE_011, Original_SPARE_012, Original_SPARE_013, Original_SPARE_014, Original_SPARE_015, Original_SPARE_016, Original_SPARE_017, Original_SB_DATA_SB_PARTS_NO, Original_SB_DATA_SB_SERIAL_NO, Original_SB_DATA_GASKET_GRADE, Original_LINE_ON_TIME, Original_LINE_OFF_TIME, Original_RPCOCF_SBLO_BCT, Original_RPCOCF_SBLO_CRT, Original_RPCOCF_SBLO_CTM, Original_RPCOCF_SBLO_SPARE01, Original_RPCOCF_SBLO_SPARE02, Original_RPCOCF_SBLO_SPARE03, Original_RPCOCF_MALO_CCT, Original_RPCOCF_MALO_DPT, Original_RPCOCF_MALO_FWT, Original_RPCOCF_MALO_SPARE01, Original_RPCOCF_MALO_SPARE02, Original_RPCOCF_MALO_SPARE03, Original_RPCOCF_MBLO_HDT, Original_RPCOCF_MBLO_CCT, Original_RPCOCF_MBLO_HCT, Original_RPCOCF_MBLO_PPT, Original_RPCOCF_MBLO_SPARE01, Original_RPCOCF_MBLO_SPARE02, Original_RPCOCF_MBLO_SPARE03, Original_RPCOCF_MBLO_SPARE04, Original_INSPSJ_INSPECTION01, Original_INSPSJ_INSPECTION02, Original_INSPSJ_INSPECTION03, Original_INSPSJ_INSPECTION04, Original_INSPSJ_INSPECTION05, Original_INSPSJ_INSPECTION06, Original_INSPSJ_INSPECTION_TIME01, Original_INSPSJ_INSPECTION11, Original_INSPSJ_INSPECTION12, Original_INSPSJ_INSPECTION13, Original_INSPSJ_INSPECTION14, Original_INSPSJ_INSPECTION15, Original_INSPSJ_INSPECTION16, Original_INSPSJ_INSPECTION_TIME02, Original_CREATED_BY, Original_UPDATED_BY, Original_CREATED_WHEN, Original_UPDATED_WHEN, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ENGINE_LISTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ENGINE_LIST"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ENGINE_TYPE", "ENGINE_TYPE")
            tableMapping.ColumnMappings.Add("ENGINE_NO", "ENGINE_NO")
            tableMapping.ColumnMappings.Add("ENGINE_ASM_NO", "ENGINE_ASM_NO")
            tableMapping.ColumnMappings.Add("BOOK", "BOOK")
            tableMapping.ColumnMappings.Add("YEAR", "YEAR")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT_NO", "UNIT_NO")
            tableMapping.ColumnMappings.Add("AT_MT", "AT_MT")
            tableMapping.ColumnMappings.Add("EMISSION", "EMISSION")
            tableMapping.ColumnMappings.Add("INJ_MODEL_CODE", "INJ_MODEL_CODE")
            tableMapping.ColumnMappings.Add("SPARE_001", "SPARE_001")
            tableMapping.ColumnMappings.Add("SB_DATA_SB_PARTS_NO", "SB_DATA_SB_PARTS_NO")
            tableMapping.ColumnMappings.Add("SB_DATA_SB_SERIAL_NO", "SB_DATA_SB_SERIAL_NO")
            tableMapping.ColumnMappings.Add("SB_DATA_GASKET_GRADE", "SB_DATA_GASKET_GRADE")
            tableMapping.ColumnMappings.Add("LINE_ON_TIME", "LINE_ON_TIME")
            tableMapping.ColumnMappings.Add("LINE_OFF_TIME", "LINE_OFF_TIME")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_BCT", "RPCOCF_SBLO_BCT")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_CRT", "RPCOCF_SBLO_CRT")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_CTM", "RPCOCF_SBLO_CTM")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_SPARE01", "RPCOCF_SBLO_SPARE01")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_SPARE02", "RPCOCF_SBLO_SPARE02")
            tableMapping.ColumnMappings.Add("RPCOCF_SBLO_SPARE03", "RPCOCF_SBLO_SPARE03")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_CCT", "RPCOCF_MALO_CCT")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_DPT", "RPCOCF_MALO_DPT")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_FWT", "RPCOCF_MALO_FWT")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_SPARE01", "RPCOCF_MALO_SPARE01")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_SPARE02", "RPCOCF_MALO_SPARE02")
            tableMapping.ColumnMappings.Add("RPCOCF_MALO_SPARE03", "RPCOCF_MALO_SPARE03")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_HDT", "RPCOCF_MBLO_HDT")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_CCT", "RPCOCF_MBLO_CCT")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_HCT", "RPCOCF_MBLO_HCT")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_PPT", "RPCOCF_MBLO_PPT")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_SPARE01", "RPCOCF_MBLO_SPARE01")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_SPARE02", "RPCOCF_MBLO_SPARE02")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_SPARE03", "RPCOCF_MBLO_SPARE03")
            tableMapping.ColumnMappings.Add("RPCOCF_MBLO_SPARE04", "RPCOCF_MBLO_SPARE04")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION01", "INSPSJ_INSPECTION01")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION02", "INSPSJ_INSPECTION02")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION03", "INSPSJ_INSPECTION03")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION04", "INSPSJ_INSPECTION04")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION05", "INSPSJ_INSPECTION05")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION06", "INSPSJ_INSPECTION06")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION_TIME01", "INSPSJ_INSPECTION_TIME01")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION11", "INSPSJ_INSPECTION11")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION12", "INSPSJ_INSPECTION12")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION13", "INSPSJ_INSPECTION13")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION14", "INSPSJ_INSPECTION14")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION15", "INSPSJ_INSPECTION15")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION16", "INSPSJ_INSPECTION16")
            tableMapping.ColumnMappings.Add("INSPSJ_INSPECTION_TIME02", "INSPSJ_INSPECTION_TIME02")
            tableMapping.ColumnMappings.Add("UPDATED_BY", "UPDATED_BY")
            tableMapping.ColumnMappings.Add("CREATED_WHEN", "CREATED_WHEN")
            tableMapping.ColumnMappings.Add("UPDATED_WHEN", "UPDATED_WHEN")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ENGINE_LIST] WHERE (([ID] = @Original_ID) AND ([ENGINE_TYPE] ="& _ 
                " @Original_ENGINE_TYPE) AND ([ENGINE_NO] = @Original_ENGINE_NO) AND ([ENGINE_ASM"& _ 
                "_NO] = @Original_ENGINE_ASM_NO) AND ([BOOK] = @Original_BOOK) AND ([YEAR] = @Ori"& _ 
                "ginal_YEAR) AND ([MODEL_CODE] = @Original_MODEL_CODE) AND ([LOT_NO] = @Original_"& _ 
                "LOT_NO) AND ([UNIT_NO] = @Original_UNIT_NO) AND ([AT_MT] = @Original_AT_MT) AND "& _ 
                "([EMISSION] = @Original_EMISSION) AND ([INJ_MODEL_CODE] = @Original_INJ_MODEL_CO"& _ 
                "DE) AND ((@IsNull_SPARE_001 = 1 AND [SPARE_001] IS NULL) OR ([SPARE_001] = @Orig"& _ 
                "inal_SPARE_001)) AND ([SB_DATA_SB_PARTS_NO] = @Original_SB_DATA_SB_PARTS_NO) AND"& _ 
                " ([SB_DATA_SB_SERIAL_NO] = @Original_SB_DATA_SB_SERIAL_NO) AND ([SB_DATA_GASKET_"& _ 
                "GRADE] = @Original_SB_DATA_GASKET_GRADE) AND ([LINE_ON_TIME] = @Original_LINE_ON"& _ 
                "_TIME) AND ([LINE_OFF_TIME] = @Original_LINE_OFF_TIME) AND ([RPCOCF_SBLO_BCT] = "& _ 
                "@Original_RPCOCF_SBLO_BCT) AND ([RPCOCF_SBLO_CRT] = @Original_RPCOCF_SBLO_CRT) A"& _ 
                "ND ([RPCOCF_SBLO_CTM] = @Original_RPCOCF_SBLO_CTM) AND ([RPCOCF_SBLO_SPARE01] = "& _ 
                "@Original_RPCOCF_SBLO_SPARE01) AND ([RPCOCF_SBLO_SPARE02] = @Original_RPCOCF_SBL"& _ 
                "O_SPARE02) AND ([RPCOCF_SBLO_SPARE03] = @Original_RPCOCF_SBLO_SPARE03) AND ([RPC"& _ 
                "OCF_MALO_CCT] = @Original_RPCOCF_MALO_CCT) AND ([RPCOCF_MALO_DPT] = @Original_RP"& _ 
                "COCF_MALO_DPT) AND ([RPCOCF_MALO_FWT] = @Original_RPCOCF_MALO_FWT) AND ([RPCOCF_"& _ 
                "MALO_SPARE01] = @Original_RPCOCF_MALO_SPARE01) AND ([RPCOCF_MALO_SPARE02] = @Ori"& _ 
                "ginal_RPCOCF_MALO_SPARE02) AND ([RPCOCF_MALO_SPARE03] = @Original_RPCOCF_MALO_SP"& _ 
                "ARE03) AND ([RPCOCF_MBLO_HDT] = @Original_RPCOCF_MBLO_HDT) AND ([RPCOCF_MBLO_CCT"& _ 
                "] = @Original_RPCOCF_MBLO_CCT) AND ([RPCOCF_MBLO_HCT] = @Original_RPCOCF_MBLO_HC"& _ 
                "T) AND ([RPCOCF_MBLO_PPT] = @Original_RPCOCF_MBLO_PPT) AND ([RPCOCF_MBLO_SPARE01"& _ 
                "] = @Original_RPCOCF_MBLO_SPARE01) AND ([RPCOCF_MBLO_SPARE02] = @Original_RPCOCF"& _ 
                "_MBLO_SPARE02) AND ([RPCOCF_MBLO_SPARE03] = @Original_RPCOCF_MBLO_SPARE03) AND ("& _ 
                "[RPCOCF_MBLO_SPARE04] = @Original_RPCOCF_MBLO_SPARE04) AND ([INSPSJ_INSPECTION01"& _ 
                "] = @Original_INSPSJ_INSPECTION01) AND ([INSPSJ_INSPECTION02] = @Original_INSPSJ"& _ 
                "_INSPECTION02) AND ([INSPSJ_INSPECTION03] = @Original_INSPSJ_INSPECTION03) AND ("& _ 
                "[INSPSJ_INSPECTION04] = @Original_INSPSJ_INSPECTION04) AND ([INSPSJ_INSPECTION05"& _ 
                "] = @Original_INSPSJ_INSPECTION05) AND ([INSPSJ_INSPECTION06] = @Original_INSPSJ"& _ 
                "_INSPECTION06) AND ([INSPSJ_INSPECTION_TIME01] = @Original_INSPSJ_INSPECTION_TIM"& _ 
                "E01) AND ([INSPSJ_INSPECTION11] = @Original_INSPSJ_INSPECTION11) AND ([INSPSJ_IN"& _ 
                "SPECTION12] = @Original_INSPSJ_INSPECTION12) AND ([INSPSJ_INSPECTION13] = @Origi"& _ 
                "nal_INSPSJ_INSPECTION13) AND ([INSPSJ_INSPECTION14] = @Original_INSPSJ_INSPECTIO"& _ 
                "N14) AND ([INSPSJ_INSPECTION15] = @Original_INSPSJ_INSPECTION15) AND ([INSPSJ_IN"& _ 
                "SPECTION16] = @Original_INSPSJ_INSPECTION16) AND ([INSPSJ_INSPECTION_TIME02] = @"& _ 
                "Original_INSPSJ_INSPECTION_TIME02) AND ((@IsNull_UPDATED_BY = 1 AND [UPDATED_BY]"& _ 
                " IS NULL) OR ([UPDATED_BY] = @Original_UPDATED_BY)) AND ([CREATED_WHEN] = @Origi"& _ 
                "nal_CREATED_WHEN) AND ((@IsNull_UPDATED_WHEN = 1 AND [UPDATED_WHEN] IS NULL) OR "& _ 
                "([UPDATED_WHEN] = @Original_UPDATED_WHEN)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ASM_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ASM_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BOOK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOOK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AT_MT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AT_MT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMISSION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMISSION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INJ_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INJ_MODEL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPARE_001", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_001", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_SB_PARTS_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_PARTS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_SB_SERIAL_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_SERIAL_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_GASKET_GRADE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_GASKET_GRADE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_ON_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ON_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_OFF_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_OFF_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_BCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_BCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_CRT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CRT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_CTM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CTM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_CCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_DPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_DPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_FWT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_FWT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_HDT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HDT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_CCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_HCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_PPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_PPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION05", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION06", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION06", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION_TIME01", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION11", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION11", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION12", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION12", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION13", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION14", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION14", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION15", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION15", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION16", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION16", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION_TIME02", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_BY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_WHEN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ENGINE_LIST] ([ENGINE_TYPE], [ENGINE_NO], [ENGINE_ASM_NO], [BO"& _ 
                "OK], [YEAR], [MODEL_CODE], [LOT_NO], [UNIT_NO], [AT_MT], [EMISSION], [INJ_MODEL_"& _ 
                "CODE], [SPARE_001], [SB_DATA_SB_PARTS_NO], [SB_DATA_SB_SERIAL_NO], [SB_DATA_GASK"& _ 
                "ET_GRADE], [LINE_ON_TIME], [LINE_OFF_TIME], [RPCOCF_SBLO_BCT], [RPCOCF_SBLO_CRT]"& _ 
                ", [RPCOCF_SBLO_CTM], [RPCOCF_SBLO_SPARE01], [RPCOCF_SBLO_SPARE02], [RPCOCF_SBLO_"& _ 
                "SPARE03], [RPCOCF_MALO_CCT], [RPCOCF_MALO_DPT], [RPCOCF_MALO_FWT], [RPCOCF_MALO_"& _ 
                "SPARE01], [RPCOCF_MALO_SPARE02], [RPCOCF_MALO_SPARE03], [RPCOCF_MBLO_HDT], [RPCO"& _ 
                "CF_MBLO_CCT], [RPCOCF_MBLO_HCT], [RPCOCF_MBLO_PPT], [RPCOCF_MBLO_SPARE01], [RPCO"& _ 
                "CF_MBLO_SPARE02], [RPCOCF_MBLO_SPARE03], [RPCOCF_MBLO_SPARE04], [INSPSJ_INSPECTI"& _ 
                "ON01], [INSPSJ_INSPECTION02], [INSPSJ_INSPECTION03], [INSPSJ_INSPECTION04], [INS"& _ 
                "PSJ_INSPECTION05], [INSPSJ_INSPECTION06], [INSPSJ_INSPECTION_TIME01], [INSPSJ_IN"& _ 
                "SPECTION11], [INSPSJ_INSPECTION12], [INSPSJ_INSPECTION13], [INSPSJ_INSPECTION14]"& _ 
                ", [INSPSJ_INSPECTION15], [INSPSJ_INSPECTION16], [INSPSJ_INSPECTION_TIME02], [UPD"& _ 
                "ATED_BY], [CREATED_WHEN], [UPDATED_WHEN]) VALUES (@ENGINE_TYPE, @ENGINE_NO, @ENG"& _ 
                "INE_ASM_NO, @BOOK, @YEAR, @MODEL_CODE, @LOT_NO, @UNIT_NO, @AT_MT, @EMISSION, @IN"& _ 
                "J_MODEL_CODE, @SPARE_001, @SB_DATA_SB_PARTS_NO, @SB_DATA_SB_SERIAL_NO, @SB_DATA_"& _ 
                "GASKET_GRADE, @LINE_ON_TIME, @LINE_OFF_TIME, @RPCOCF_SBLO_BCT, @RPCOCF_SBLO_CRT,"& _ 
                " @RPCOCF_SBLO_CTM, @RPCOCF_SBLO_SPARE01, @RPCOCF_SBLO_SPARE02, @RPCOCF_SBLO_SPAR"& _ 
                "E03, @RPCOCF_MALO_CCT, @RPCOCF_MALO_DPT, @RPCOCF_MALO_FWT, @RPCOCF_MALO_SPARE01,"& _ 
                " @RPCOCF_MALO_SPARE02, @RPCOCF_MALO_SPARE03, @RPCOCF_MBLO_HDT, @RPCOCF_MBLO_CCT,"& _ 
                " @RPCOCF_MBLO_HCT, @RPCOCF_MBLO_PPT, @RPCOCF_MBLO_SPARE01, @RPCOCF_MBLO_SPARE02,"& _ 
                " @RPCOCF_MBLO_SPARE03, @RPCOCF_MBLO_SPARE04, @INSPSJ_INSPECTION01, @INSPSJ_INSPE"& _ 
                "CTION02, @INSPSJ_INSPECTION03, @INSPSJ_INSPECTION04, @INSPSJ_INSPECTION05, @INSP"& _ 
                "SJ_INSPECTION06, @INSPSJ_INSPECTION_TIME01, @INSPSJ_INSPECTION11, @INSPSJ_INSPEC"& _ 
                "TION12, @INSPSJ_INSPECTION13, @INSPSJ_INSPECTION14, @INSPSJ_INSPECTION15, @INSPS"& _ 
                "J_INSPECTION16, @INSPSJ_INSPECTION_TIME02, @UPDATED_BY, @CREATED_WHEN, @UPDATED_"& _ 
                "WHEN);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, ENGINE_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YEAR, MODEL_CODE"& _ 
                ", LOT_NO, UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CODE, SPARE_001, SB_DATA_SB_PARTS_"& _ 
                "NO, SB_DATA_SB_SERIAL_NO, SB_DATA_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TIME, RPC"& _ 
                "OCF_SBLO_BCT, RPCOCF_SBLO_CRT, RPCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCOCF_SBLO"& _ 
                "_SPARE02, RPCOCF_SBLO_SPARE03, RPCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_MALO_FWT"& _ 
                ", RPCOCF_MALO_SPARE01, RPCOCF_MALO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_MBLO_HDT"& _ 
                ", RPCOCF_MBLO_CCT, RPCOCF_MBLO_HCT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01, RPCOCF"& _ 
                "_MBLO_SPARE02, RPCOCF_MBLO_SPARE03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTION01, IN"& _ 
                "SPSJ_INSPECTION02, INSPSJ_INSPECTION03, INSPSJ_INSPECTION04, INSPSJ_INSPECTION05"& _ 
                ", INSPSJ_INSPECTION06, INSPSJ_INSPECTION_TIME01, INSPSJ_INSPECTION11, INSPSJ_INS"& _ 
                "PECTION12, INSPSJ_INSPECTION13, INSPSJ_INSPECTION14, INSPSJ_INSPECTION15, INSPSJ"& _ 
                "_INSPECTION16, INSPSJ_INSPECTION_TIME02, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN "& _ 
                "FROM ENGINE_LIST WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ASM_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ASM_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOOK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOOK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AT_MT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AT_MT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMISSION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMISSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INJ_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INJ_MODEL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_001", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_SB_PARTS_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_PARTS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_SB_SERIAL_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_SERIAL_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_GASKET_GRADE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_GASKET_GRADE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_ON_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_OFF_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_OFF_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_BCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_BCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_CRT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CRT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_CTM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CTM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_CCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_DPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_DPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_FWT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_FWT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_HDT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HDT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_CCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_HCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_PPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_PPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION05", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION06", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION06", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION_TIME01", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION11", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION12", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION13", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION14", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION14", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION15", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION16", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION16", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION_TIME02", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ENGINE_LIST] SET [ENGINE_TYPE] = @ENGINE_TYPE, [ENGINE_NO] = @ENGIN"& _ 
                "E_NO, [ENGINE_ASM_NO] = @ENGINE_ASM_NO, [BOOK] = @BOOK, [YEAR] = @YEAR, [MODEL_C"& _ 
                "ODE] = @MODEL_CODE, [LOT_NO] = @LOT_NO, [UNIT_NO] = @UNIT_NO, [AT_MT] = @AT_MT, "& _ 
                "[EMISSION] = @EMISSION, [INJ_MODEL_CODE] = @INJ_MODEL_CODE, [SPARE_001] = @SPARE"& _ 
                "_001, [SB_DATA_SB_PARTS_NO] = @SB_DATA_SB_PARTS_NO, [SB_DATA_SB_SERIAL_NO] = @SB"& _ 
                "_DATA_SB_SERIAL_NO, [SB_DATA_GASKET_GRADE] = @SB_DATA_GASKET_GRADE, [LINE_ON_TIM"& _ 
                "E] = @LINE_ON_TIME, [LINE_OFF_TIME] = @LINE_OFF_TIME, [RPCOCF_SBLO_BCT] = @RPCOC"& _ 
                "F_SBLO_BCT, [RPCOCF_SBLO_CRT] = @RPCOCF_SBLO_CRT, [RPCOCF_SBLO_CTM] = @RPCOCF_SB"& _ 
                "LO_CTM, [RPCOCF_SBLO_SPARE01] = @RPCOCF_SBLO_SPARE01, [RPCOCF_SBLO_SPARE02] = @R"& _ 
                "PCOCF_SBLO_SPARE02, [RPCOCF_SBLO_SPARE03] = @RPCOCF_SBLO_SPARE03, [RPCOCF_MALO_C"& _ 
                "CT] = @RPCOCF_MALO_CCT, [RPCOCF_MALO_DPT] = @RPCOCF_MALO_DPT, [RPCOCF_MALO_FWT] "& _ 
                "= @RPCOCF_MALO_FWT, [RPCOCF_MALO_SPARE01] = @RPCOCF_MALO_SPARE01, [RPCOCF_MALO_S"& _ 
                "PARE02] = @RPCOCF_MALO_SPARE02, [RPCOCF_MALO_SPARE03] = @RPCOCF_MALO_SPARE03, [R"& _ 
                "PCOCF_MBLO_HDT] = @RPCOCF_MBLO_HDT, [RPCOCF_MBLO_CCT] = @RPCOCF_MBLO_CCT, [RPCOC"& _ 
                "F_MBLO_HCT] = @RPCOCF_MBLO_HCT, [RPCOCF_MBLO_PPT] = @RPCOCF_MBLO_PPT, [RPCOCF_MB"& _ 
                "LO_SPARE01] = @RPCOCF_MBLO_SPARE01, [RPCOCF_MBLO_SPARE02] = @RPCOCF_MBLO_SPARE02"& _ 
                ", [RPCOCF_MBLO_SPARE03] = @RPCOCF_MBLO_SPARE03, [RPCOCF_MBLO_SPARE04] = @RPCOCF_"& _ 
                "MBLO_SPARE04, [INSPSJ_INSPECTION01] = @INSPSJ_INSPECTION01, [INSPSJ_INSPECTION02"& _ 
                "] = @INSPSJ_INSPECTION02, [INSPSJ_INSPECTION03] = @INSPSJ_INSPECTION03, [INSPSJ_"& _ 
                "INSPECTION04] = @INSPSJ_INSPECTION04, [INSPSJ_INSPECTION05] = @INSPSJ_INSPECTION"& _ 
                "05, [INSPSJ_INSPECTION06] = @INSPSJ_INSPECTION06, [INSPSJ_INSPECTION_TIME01] = @"& _ 
                "INSPSJ_INSPECTION_TIME01, [INSPSJ_INSPECTION11] = @INSPSJ_INSPECTION11, [INSPSJ_"& _ 
                "INSPECTION12] = @INSPSJ_INSPECTION12, [INSPSJ_INSPECTION13] = @INSPSJ_INSPECTION"& _ 
                "13, [INSPSJ_INSPECTION14] = @INSPSJ_INSPECTION14, [INSPSJ_INSPECTION15] = @INSPS"& _ 
                "J_INSPECTION15, [INSPSJ_INSPECTION16] = @INSPSJ_INSPECTION16, [INSPSJ_INSPECTION"& _ 
                "_TIME02] = @INSPSJ_INSPECTION_TIME02, [UPDATED_BY] = @UPDATED_BY, [CREATED_WHEN]"& _ 
                " = @CREATED_WHEN, [UPDATED_WHEN] = @UPDATED_WHEN WHERE (([ID] = @Original_ID) AN"& _ 
                "D ([ENGINE_TYPE] = @Original_ENGINE_TYPE) AND ([ENGINE_NO] = @Original_ENGINE_NO"& _ 
                ") AND ([ENGINE_ASM_NO] = @Original_ENGINE_ASM_NO) AND ([BOOK] = @Original_BOOK) "& _ 
                "AND ([YEAR] = @Original_YEAR) AND ([MODEL_CODE] = @Original_MODEL_CODE) AND ([LO"& _ 
                "T_NO] = @Original_LOT_NO) AND ([UNIT_NO] = @Original_UNIT_NO) AND ([AT_MT] = @Or"& _ 
                "iginal_AT_MT) AND ([EMISSION] = @Original_EMISSION) AND ([INJ_MODEL_CODE] = @Ori"& _ 
                "ginal_INJ_MODEL_CODE) AND ((@IsNull_SPARE_001 = 1 AND [SPARE_001] IS NULL) OR (["& _ 
                "SPARE_001] = @Original_SPARE_001)) AND ([SB_DATA_SB_PARTS_NO] = @Original_SB_DAT"& _ 
                "A_SB_PARTS_NO) AND ([SB_DATA_SB_SERIAL_NO] = @Original_SB_DATA_SB_SERIAL_NO) AND"& _ 
                " ([SB_DATA_GASKET_GRADE] = @Original_SB_DATA_GASKET_GRADE) AND ([LINE_ON_TIME] ="& _ 
                " @Original_LINE_ON_TIME) AND ([LINE_OFF_TIME] = @Original_LINE_OFF_TIME) AND ([R"& _ 
                "PCOCF_SBLO_BCT] = @Original_RPCOCF_SBLO_BCT) AND ([RPCOCF_SBLO_CRT] = @Original_"& _ 
                "RPCOCF_SBLO_CRT) AND ([RPCOCF_SBLO_CTM] = @Original_RPCOCF_SBLO_CTM) AND ([RPCOC"& _ 
                "F_SBLO_SPARE01] = @Original_RPCOCF_SBLO_SPARE01) AND ([RPCOCF_SBLO_SPARE02] = @O"& _ 
                "riginal_RPCOCF_SBLO_SPARE02) AND ([RPCOCF_SBLO_SPARE03] = @Original_RPCOCF_SBLO_"& _ 
                "SPARE03) AND ([RPCOCF_MALO_CCT] = @Original_RPCOCF_MALO_CCT) AND ([RPCOCF_MALO_D"& _ 
                "PT] = @Original_RPCOCF_MALO_DPT) AND ([RPCOCF_MALO_FWT] = @Original_RPCOCF_MALO_"& _ 
                "FWT) AND ([RPCOCF_MALO_SPARE01] = @Original_RPCOCF_MALO_SPARE01) AND ([RPCOCF_MA"& _ 
                "LO_SPARE02] = @Original_RPCOCF_MALO_SPARE02) AND ([RPCOCF_MALO_SPARE03] = @Origi"& _ 
                "nal_RPCOCF_MALO_SPARE03) AND ([RPCOCF_MBLO_HDT] = @Original_RPCOCF_MBLO_HDT) AND"& _ 
                " ([RPCOCF_MBLO_CCT] = @Original_RPCOCF_MBLO_CCT) AND ([RPCOCF_MBLO_HCT] = @Origi"& _ 
                "nal_RPCOCF_MBLO_HCT) AND ([RPCOCF_MBLO_PPT] = @Original_RPCOCF_MBLO_PPT) AND ([R"& _ 
                "PCOCF_MBLO_SPARE01] = @Original_RPCOCF_MBLO_SPARE01) AND ([RPCOCF_MBLO_SPARE02] "& _ 
                "= @Original_RPCOCF_MBLO_SPARE02) AND ([RPCOCF_MBLO_SPARE03] = @Original_RPCOCF_M"& _ 
                "BLO_SPARE03) AND ([RPCOCF_MBLO_SPARE04] = @Original_RPCOCF_MBLO_SPARE04) AND ([I"& _ 
                "NSPSJ_INSPECTION01] = @Original_INSPSJ_INSPECTION01) AND ([INSPSJ_INSPECTION02] "& _ 
                "= @Original_INSPSJ_INSPECTION02) AND ([INSPSJ_INSPECTION03] = @Original_INSPSJ_I"& _ 
                "NSPECTION03) AND ([INSPSJ_INSPECTION04] = @Original_INSPSJ_INSPECTION04) AND ([I"& _ 
                "NSPSJ_INSPECTION05] = @Original_INSPSJ_INSPECTION05) AND ([INSPSJ_INSPECTION06] "& _ 
                "= @Original_INSPSJ_INSPECTION06) AND ([INSPSJ_INSPECTION_TIME01] = @Original_INS"& _ 
                "PSJ_INSPECTION_TIME01) AND ([INSPSJ_INSPECTION11] = @Original_INSPSJ_INSPECTION1"& _ 
                "1) AND ([INSPSJ_INSPECTION12] = @Original_INSPSJ_INSPECTION12) AND ([INSPSJ_INSP"& _ 
                "ECTION13] = @Original_INSPSJ_INSPECTION13) AND ([INSPSJ_INSPECTION14] = @Origina"& _ 
                "l_INSPSJ_INSPECTION14) AND ([INSPSJ_INSPECTION15] = @Original_INSPSJ_INSPECTION1"& _ 
                "5) AND ([INSPSJ_INSPECTION16] = @Original_INSPSJ_INSPECTION16) AND ([INSPSJ_INSP"& _ 
                "ECTION_TIME02] = @Original_INSPSJ_INSPECTION_TIME02) AND ((@IsNull_UPDATED_BY = "& _ 
                "1 AND [UPDATED_BY] IS NULL) OR ([UPDATED_BY] = @Original_UPDATED_BY)) AND ([CREA"& _ 
                "TED_WHEN] = @Original_CREATED_WHEN) AND ((@IsNull_UPDATED_WHEN = 1 AND [UPDATED_"& _ 
                "WHEN] IS NULL) OR ([UPDATED_WHEN] = @Original_UPDATED_WHEN)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, ENGIN"& _ 
                "E_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YEAR, MODEL_CODE, LOT_NO, UNIT_NO, AT_MT"& _ 
                ", EMISSION, INJ_MODEL_CODE, SPARE_001, SB_DATA_SB_PARTS_NO, SB_DATA_SB_SERIAL_NO"& _ 
                ", SB_DATA_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TIME, RPCOCF_SBLO_BCT, RPCOCF_SBL"& _ 
                "O_CRT, RPCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCOCF_SBLO_SPARE02, RPCOCF_SBLO_SP"& _ 
                "ARE03, RPCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_MALO_FWT, RPCOCF_MALO_SPARE01, R"& _ 
                "PCOCF_MALO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_MBLO_HDT, RPCOCF_MBLO_CCT, RPCOC"& _ 
                "F_MBLO_HCT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01, RPCOCF_MBLO_SPARE02, RPCOCF_MB"& _ 
                "LO_SPARE03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTION01, INSPSJ_INSPECTION02, INSPS"& _ 
                "J_INSPECTION03, INSPSJ_INSPECTION04, INSPSJ_INSPECTION05, INSPSJ_INSPECTION06, I"& _ 
                "NSPSJ_INSPECTION_TIME01, INSPSJ_INSPECTION11, INSPSJ_INSPECTION12, INSPSJ_INSPEC"& _ 
                "TION13, INSPSJ_INSPECTION14, INSPSJ_INSPECTION15, INSPSJ_INSPECTION16, INSPSJ_IN"& _ 
                "SPECTION_TIME02, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN FROM ENGINE_LIST WHERE ("& _ 
                "ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ASM_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ASM_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOOK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOOK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AT_MT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AT_MT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMISSION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMISSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INJ_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INJ_MODEL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPARE_001", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_SB_PARTS_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_PARTS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_SB_SERIAL_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_SERIAL_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SB_DATA_GASKET_GRADE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_GASKET_GRADE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_ON_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LINE_OFF_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_OFF_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_BCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_BCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_CRT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CRT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_CTM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CTM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_SBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_CCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_DPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_DPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_FWT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_FWT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MALO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_HDT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HDT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_CCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_HCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_PPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_PPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPCOCF_MBLO_SPARE04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION03", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION04", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION05", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION06", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION06", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION_TIME01", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME01", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION11", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION12", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION13", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION14", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION14", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION15", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION15", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION16", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION16", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INSPSJ_INSPECTION_TIME02", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME02", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ASM_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ASM_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BOOK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOOK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AT_MT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AT_MT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EMISSION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMISSION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INJ_MODEL_CODE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INJ_MODEL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPARE_001", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPARE_001", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPARE_001", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_SB_PARTS_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_PARTS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_SB_SERIAL_NO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_SB_SERIAL_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SB_DATA_GASKET_GRADE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SB_DATA_GASKET_GRADE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_ON_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_ON_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LINE_OFF_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LINE_OFF_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_BCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_BCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_CRT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CRT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_CTM", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_CTM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_SBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_SBLO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_CCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_DPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_DPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_FWT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_FWT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MALO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MALO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_HDT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HDT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_CCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_CCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_HCT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_HCT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_PPT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_PPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RPCOCF_MBLO_SPARE04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPCOCF_MBLO_SPARE04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION01", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION02", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION03", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION03", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION04", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION04", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION05", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION05", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION06", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION06", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION_TIME01", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME01", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION11", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION11", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION12", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION12", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION13", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION14", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION14", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION15", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION15", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION16", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION16", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INSPSJ_INSPECTION_TIME02", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INSPSJ_INSPECTION_TIME02", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_BY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_BY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_BY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_WHEN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_WHEN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_WHEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, ENGINE_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YEAR, MODEL_CODE, LOT_NO,"& _ 
                " UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CODE, SPARE_001, SB_DATA_SB_PARTS_NO, SB_DA"& _ 
                "TA_SB_SERIAL_NO, SB_DATA_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TIME, RPCOCF_SBLO_"& _ 
                "BCT, RPCOCF_SBLO_CRT, RPCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCOCF_SBLO_SPARE02,"& _ 
                " RPCOCF_SBLO_SPARE03, RPCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_MALO_FWT, RPCOCF_"& _ 
                "MALO_SPARE01, RPCOCF_MALO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_MBLO_HDT, RPCOCF_"& _ 
                "MBLO_CCT, RPCOCF_MBLO_HCT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01, RPCOCF_MBLO_SPA"& _ 
                "RE02, RPCOCF_MBLO_SPARE03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTION01, INSPSJ_INSP"& _ 
                "ECTION02, INSPSJ_INSPECTION03, INSPSJ_INSPECTION04, INSPSJ_INSPECTION05, INSPSJ_"& _ 
                "INSPECTION06, INSPSJ_INSPECTION_TIME01, INSPSJ_INSPECTION11, INSPSJ_INSPECTION12"& _ 
                ", INSPSJ_INSPECTION13, INSPSJ_INSPECTION14, INSPSJ_INSPECTION15, INSPSJ_INSPECTI"& _ 
                "ON16, INSPSJ_INSPECTION_TIME02, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN FROM dbo."& _ 
                "ENGINE_LIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.ENGINE_LISTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.ENGINE_LISTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.ENGINE_LISTDataTable = New iemt_pdt_es01_developmentDataSet.ENGINE_LISTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.ENGINE_LISTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ENGINE_LIST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ENGINE_TYPE As String,  _
                    ByVal Original_ENGINE_NO As String,  _
                    ByVal Original_ENGINE_ASM_NO As String,  _
                    ByVal Original_BOOK As String,  _
                    ByVal Original_YEAR As String,  _
                    ByVal Original_MODEL_CODE As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT_NO As String,  _
                    ByVal Original_AT_MT As String,  _
                    ByVal Original_EMISSION As String,  _
                    ByVal Original_INJ_MODEL_CODE As String,  _
                    ByVal Original_SPARE_001 As String,  _
                    ByVal Original_SB_DATA_SB_PARTS_NO As String,  _
                    ByVal Original_SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal Original_SB_DATA_GASKET_GRADE As String,  _
                    ByVal Original_LINE_ON_TIME As Date,  _
                    ByVal Original_LINE_OFF_TIME As Date,  _
                    ByVal Original_RPCOCF_SBLO_BCT As String,  _
                    ByVal Original_RPCOCF_SBLO_CRT As String,  _
                    ByVal Original_RPCOCF_SBLO_CTM As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MALO_CCT As String,  _
                    ByVal Original_RPCOCF_MALO_DPT As String,  _
                    ByVal Original_RPCOCF_MALO_FWT As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_HDT As String,  _
                    ByVal Original_RPCOCF_MBLO_CCT As String,  _
                    ByVal Original_RPCOCF_MBLO_HCT As String,  _
                    ByVal Original_RPCOCF_MBLO_PPT As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION01 As String,  _
                    ByVal Original_INSPSJ_INSPECTION02 As String,  _
                    ByVal Original_INSPSJ_INSPECTION03 As String,  _
                    ByVal Original_INSPSJ_INSPECTION04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION05 As String,  _
                    ByVal Original_INSPSJ_INSPECTION06 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal Original_INSPSJ_INSPECTION11 As String,  _
                    ByVal Original_INSPSJ_INSPECTION12 As String,  _
                    ByVal Original_INSPSJ_INSPECTION13 As String,  _
                    ByVal Original_INSPSJ_INSPECTION14 As String,  _
                    ByVal Original_INSPSJ_INSPECTION15 As String,  _
                    ByVal Original_INSPSJ_INSPECTION16 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal Original_UPDATED_BY As String,  _
                    ByVal Original_CREATED_WHEN As Date,  _
                    ByVal Original_UPDATED_WHEN As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_ENGINE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENGINE_TYPE,String)
            End If
            If (Original_ENGINE_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ENGINE_NO,String)
            End If
            If (Original_ENGINE_ASM_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_ASM_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINE_ASM_NO,String)
            End If
            If (Original_BOOK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BOOK")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_BOOK,String)
            End If
            If (Original_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_YEAR")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_YEAR,String)
            End If
            If (Original_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MODEL_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UNIT_NO,String)
            End If
            If (Original_AT_MT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AT_MT")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_AT_MT,String)
            End If
            If (Original_EMISSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EMISSION")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_EMISSION,String)
            End If
            If (Original_INJ_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INJ_MODEL_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_INJ_MODEL_CODE,String)
            End If
            If (Original_SPARE_001 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_SPARE_001,String)
            End If
            If (Original_SB_DATA_SB_PARTS_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_SB_PARTS_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SB_DATA_SB_PARTS_NO,String)
            End If
            If (Original_SB_DATA_SB_SERIAL_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_SB_SERIAL_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_SB_DATA_SB_SERIAL_NO,String)
            End If
            If (Original_SB_DATA_GASKET_GRADE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_GASKET_GRADE")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_SB_DATA_GASKET_GRADE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_LINE_ON_TIME,Date)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_LINE_OFF_TIME,Date)
            If (Original_RPCOCF_SBLO_BCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_BCT")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_RPCOCF_SBLO_BCT,String)
            End If
            If (Original_RPCOCF_SBLO_CRT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_CRT")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_RPCOCF_SBLO_CRT,String)
            End If
            If (Original_RPCOCF_SBLO_CTM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_CTM")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_RPCOCF_SBLO_CTM,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE01")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_RPCOCF_SBLO_SPARE01,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE02")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_RPCOCF_SBLO_SPARE02,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE03")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_RPCOCF_SBLO_SPARE03,String)
            End If
            If (Original_RPCOCF_MALO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_CCT")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_RPCOCF_MALO_CCT,String)
            End If
            If (Original_RPCOCF_MALO_DPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_DPT")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_RPCOCF_MALO_DPT,String)
            End If
            If (Original_RPCOCF_MALO_FWT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_FWT")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_RPCOCF_MALO_FWT,String)
            End If
            If (Original_RPCOCF_MALO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE01")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_RPCOCF_MALO_SPARE01,String)
            End If
            If (Original_RPCOCF_MALO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE02")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_RPCOCF_MALO_SPARE02,String)
            End If
            If (Original_RPCOCF_MALO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE03")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_RPCOCF_MALO_SPARE03,String)
            End If
            If (Original_RPCOCF_MBLO_HDT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_HDT")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_RPCOCF_MBLO_HDT,String)
            End If
            If (Original_RPCOCF_MBLO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_CCT")
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_RPCOCF_MBLO_CCT,String)
            End If
            If (Original_RPCOCF_MBLO_HCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_HCT")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_RPCOCF_MBLO_HCT,String)
            End If
            If (Original_RPCOCF_MBLO_PPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_PPT")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_RPCOCF_MBLO_PPT,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE01")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_RPCOCF_MBLO_SPARE01,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE02")
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_RPCOCF_MBLO_SPARE02,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE03")
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_RPCOCF_MBLO_SPARE03,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE04")
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_RPCOCF_MBLO_SPARE04,String)
            End If
            If (Original_INSPSJ_INSPECTION01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION01")
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_INSPSJ_INSPECTION01,String)
            End If
            If (Original_INSPSJ_INSPECTION02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION02")
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_INSPSJ_INSPECTION02,String)
            End If
            If (Original_INSPSJ_INSPECTION03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION03")
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_INSPSJ_INSPECTION03,String)
            End If
            If (Original_INSPSJ_INSPECTION04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION04")
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_INSPSJ_INSPECTION04,String)
            End If
            If (Original_INSPSJ_INSPECTION05 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION05")
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_INSPSJ_INSPECTION05,String)
            End If
            If (Original_INSPSJ_INSPECTION06 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION06")
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_INSPSJ_INSPECTION06,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_INSPSJ_INSPECTION_TIME01,Date)
            If (Original_INSPSJ_INSPECTION11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION11")
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_INSPSJ_INSPECTION11,String)
            End If
            If (Original_INSPSJ_INSPECTION12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION12")
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_INSPSJ_INSPECTION12,String)
            End If
            If (Original_INSPSJ_INSPECTION13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION13")
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_INSPSJ_INSPECTION13,String)
            End If
            If (Original_INSPSJ_INSPECTION14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION14")
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_INSPSJ_INSPECTION14,String)
            End If
            If (Original_INSPSJ_INSPECTION15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION15")
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_INSPSJ_INSPECTION15,String)
            End If
            If (Original_INSPSJ_INSPECTION16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION16")
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_INSPSJ_INSPECTION16,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_INSPSJ_INSPECTION_TIME02,Date)
            If (Original_UPDATED_BY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_UPDATED_BY,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_CREATED_WHEN,Date)
            If (Original_UPDATED_WHEN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_UPDATED_WHEN.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ENGINE_TYPE As String,  _
                    ByVal ENGINE_NO As String,  _
                    ByVal ENGINE_ASM_NO As String,  _
                    ByVal BOOK As String,  _
                    ByVal YEAR As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT_NO As String,  _
                    ByVal AT_MT As String,  _
                    ByVal EMISSION As String,  _
                    ByVal INJ_MODEL_CODE As String,  _
                    ByVal SPARE_001 As String,  _
                    ByVal SB_DATA_SB_PARTS_NO As String,  _
                    ByVal SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal SB_DATA_GASKET_GRADE As String,  _
                    ByVal LINE_ON_TIME As Date,  _
                    ByVal LINE_OFF_TIME As Date,  _
                    ByVal RPCOCF_SBLO_BCT As String,  _
                    ByVal RPCOCF_SBLO_CRT As String,  _
                    ByVal RPCOCF_SBLO_CTM As String,  _
                    ByVal RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MALO_CCT As String,  _
                    ByVal RPCOCF_MALO_DPT As String,  _
                    ByVal RPCOCF_MALO_FWT As String,  _
                    ByVal RPCOCF_MALO_SPARE01 As String,  _
                    ByVal RPCOCF_MALO_SPARE02 As String,  _
                    ByVal RPCOCF_MALO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_HDT As String,  _
                    ByVal RPCOCF_MBLO_CCT As String,  _
                    ByVal RPCOCF_MBLO_HCT As String,  _
                    ByVal RPCOCF_MBLO_PPT As String,  _
                    ByVal RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal INSPSJ_INSPECTION01 As String,  _
                    ByVal INSPSJ_INSPECTION02 As String,  _
                    ByVal INSPSJ_INSPECTION03 As String,  _
                    ByVal INSPSJ_INSPECTION04 As String,  _
                    ByVal INSPSJ_INSPECTION05 As String,  _
                    ByVal INSPSJ_INSPECTION06 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal INSPSJ_INSPECTION11 As String,  _
                    ByVal INSPSJ_INSPECTION12 As String,  _
                    ByVal INSPSJ_INSPECTION13 As String,  _
                    ByVal INSPSJ_INSPECTION14 As String,  _
                    ByVal INSPSJ_INSPECTION15 As String,  _
                    ByVal INSPSJ_INSPECTION16 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal UPDATED_BY As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal UPDATED_WHEN As Global.System.Nullable(Of Date)) As Integer
            If (ENGINE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_TYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENGINE_TYPE,String)
            End If
            If (ENGINE_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENGINE_NO,String)
            End If
            If (ENGINE_ASM_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_ASM_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ENGINE_ASM_NO,String)
            End If
            If (BOOK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BOOK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(BOOK,String)
            End If
            If (YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("YEAR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(YEAR,String)
            End If
            If (MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MODEL_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LOT_NO,String)
            End If
            If (UNIT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(UNIT_NO,String)
            End If
            If (AT_MT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AT_MT")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(AT_MT,String)
            End If
            If (EMISSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EMISSION")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(EMISSION,String)
            End If
            If (INJ_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INJ_MODEL_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(INJ_MODEL_CODE,String)
            End If
            If (SPARE_001 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SPARE_001,String)
            End If
            If (SB_DATA_SB_PARTS_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_SB_PARTS_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SB_DATA_SB_PARTS_NO,String)
            End If
            If (SB_DATA_SB_SERIAL_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_SB_SERIAL_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SB_DATA_SB_SERIAL_NO,String)
            End If
            If (SB_DATA_GASKET_GRADE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_GASKET_GRADE")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SB_DATA_GASKET_GRADE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(LINE_ON_TIME,Date)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(LINE_OFF_TIME,Date)
            If (RPCOCF_SBLO_BCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_BCT")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(RPCOCF_SBLO_BCT,String)
            End If
            If (RPCOCF_SBLO_CRT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_CRT")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(RPCOCF_SBLO_CRT,String)
            End If
            If (RPCOCF_SBLO_CTM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_CTM")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(RPCOCF_SBLO_CTM,String)
            End If
            If (RPCOCF_SBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE01")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(RPCOCF_SBLO_SPARE01,String)
            End If
            If (RPCOCF_SBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE02")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(RPCOCF_SBLO_SPARE02,String)
            End If
            If (RPCOCF_SBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE03")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(RPCOCF_SBLO_SPARE03,String)
            End If
            If (RPCOCF_MALO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_CCT")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(RPCOCF_MALO_CCT,String)
            End If
            If (RPCOCF_MALO_DPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_DPT")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(RPCOCF_MALO_DPT,String)
            End If
            If (RPCOCF_MALO_FWT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_FWT")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(RPCOCF_MALO_FWT,String)
            End If
            If (RPCOCF_MALO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE01")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(RPCOCF_MALO_SPARE01,String)
            End If
            If (RPCOCF_MALO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE02")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(RPCOCF_MALO_SPARE02,String)
            End If
            If (RPCOCF_MALO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE03")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(RPCOCF_MALO_SPARE03,String)
            End If
            If (RPCOCF_MBLO_HDT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_HDT")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(RPCOCF_MBLO_HDT,String)
            End If
            If (RPCOCF_MBLO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_CCT")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(RPCOCF_MBLO_CCT,String)
            End If
            If (RPCOCF_MBLO_HCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_HCT")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(RPCOCF_MBLO_HCT,String)
            End If
            If (RPCOCF_MBLO_PPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_PPT")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(RPCOCF_MBLO_PPT,String)
            End If
            If (RPCOCF_MBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE01")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(RPCOCF_MBLO_SPARE01,String)
            End If
            If (RPCOCF_MBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE02")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(RPCOCF_MBLO_SPARE02,String)
            End If
            If (RPCOCF_MBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE03")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(RPCOCF_MBLO_SPARE03,String)
            End If
            If (RPCOCF_MBLO_SPARE04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE04")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(RPCOCF_MBLO_SPARE04,String)
            End If
            If (INSPSJ_INSPECTION01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION01")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(INSPSJ_INSPECTION01,String)
            End If
            If (INSPSJ_INSPECTION02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION02")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(INSPSJ_INSPECTION02,String)
            End If
            If (INSPSJ_INSPECTION03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION03")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(INSPSJ_INSPECTION03,String)
            End If
            If (INSPSJ_INSPECTION04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION04")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(INSPSJ_INSPECTION04,String)
            End If
            If (INSPSJ_INSPECTION05 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION05")
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(INSPSJ_INSPECTION05,String)
            End If
            If (INSPSJ_INSPECTION06 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION06")
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(INSPSJ_INSPECTION06,String)
            End If
            Me.Adapter.InsertCommand.Parameters(43).Value = CType(INSPSJ_INSPECTION_TIME01,Date)
            If (INSPSJ_INSPECTION11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION11")
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(INSPSJ_INSPECTION11,String)
            End If
            If (INSPSJ_INSPECTION12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION12")
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(INSPSJ_INSPECTION12,String)
            End If
            If (INSPSJ_INSPECTION13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION13")
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(INSPSJ_INSPECTION13,String)
            End If
            If (INSPSJ_INSPECTION14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION14")
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(INSPSJ_INSPECTION14,String)
            End If
            If (INSPSJ_INSPECTION15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION15")
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(INSPSJ_INSPECTION15,String)
            End If
            If (INSPSJ_INSPECTION16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION16")
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(INSPSJ_INSPECTION16,String)
            End If
            Me.Adapter.InsertCommand.Parameters(50).Value = CType(INSPSJ_INSPECTION_TIME02,Date)
            If (UPDATED_BY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(UPDATED_BY,String)
            End If
            Me.Adapter.InsertCommand.Parameters(52).Value = CType(CREATED_WHEN,Date)
            If (UPDATED_WHEN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(UPDATED_WHEN.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ENGINE_TYPE As String,  _
                    ByVal ENGINE_NO As String,  _
                    ByVal ENGINE_ASM_NO As String,  _
                    ByVal BOOK As String,  _
                    ByVal YEAR As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT_NO As String,  _
                    ByVal AT_MT As String,  _
                    ByVal EMISSION As String,  _
                    ByVal INJ_MODEL_CODE As String,  _
                    ByVal SPARE_001 As String,  _
                    ByVal SB_DATA_SB_PARTS_NO As String,  _
                    ByVal SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal SB_DATA_GASKET_GRADE As String,  _
                    ByVal LINE_ON_TIME As Date,  _
                    ByVal LINE_OFF_TIME As Date,  _
                    ByVal RPCOCF_SBLO_BCT As String,  _
                    ByVal RPCOCF_SBLO_CRT As String,  _
                    ByVal RPCOCF_SBLO_CTM As String,  _
                    ByVal RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MALO_CCT As String,  _
                    ByVal RPCOCF_MALO_DPT As String,  _
                    ByVal RPCOCF_MALO_FWT As String,  _
                    ByVal RPCOCF_MALO_SPARE01 As String,  _
                    ByVal RPCOCF_MALO_SPARE02 As String,  _
                    ByVal RPCOCF_MALO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_HDT As String,  _
                    ByVal RPCOCF_MBLO_CCT As String,  _
                    ByVal RPCOCF_MBLO_HCT As String,  _
                    ByVal RPCOCF_MBLO_PPT As String,  _
                    ByVal RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal INSPSJ_INSPECTION01 As String,  _
                    ByVal INSPSJ_INSPECTION02 As String,  _
                    ByVal INSPSJ_INSPECTION03 As String,  _
                    ByVal INSPSJ_INSPECTION04 As String,  _
                    ByVal INSPSJ_INSPECTION05 As String,  _
                    ByVal INSPSJ_INSPECTION06 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal INSPSJ_INSPECTION11 As String,  _
                    ByVal INSPSJ_INSPECTION12 As String,  _
                    ByVal INSPSJ_INSPECTION13 As String,  _
                    ByVal INSPSJ_INSPECTION14 As String,  _
                    ByVal INSPSJ_INSPECTION15 As String,  _
                    ByVal INSPSJ_INSPECTION16 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal UPDATED_BY As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal UPDATED_WHEN As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ENGINE_TYPE As String,  _
                    ByVal Original_ENGINE_NO As String,  _
                    ByVal Original_ENGINE_ASM_NO As String,  _
                    ByVal Original_BOOK As String,  _
                    ByVal Original_YEAR As String,  _
                    ByVal Original_MODEL_CODE As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT_NO As String,  _
                    ByVal Original_AT_MT As String,  _
                    ByVal Original_EMISSION As String,  _
                    ByVal Original_INJ_MODEL_CODE As String,  _
                    ByVal Original_SPARE_001 As String,  _
                    ByVal Original_SB_DATA_SB_PARTS_NO As String,  _
                    ByVal Original_SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal Original_SB_DATA_GASKET_GRADE As String,  _
                    ByVal Original_LINE_ON_TIME As Date,  _
                    ByVal Original_LINE_OFF_TIME As Date,  _
                    ByVal Original_RPCOCF_SBLO_BCT As String,  _
                    ByVal Original_RPCOCF_SBLO_CRT As String,  _
                    ByVal Original_RPCOCF_SBLO_CTM As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MALO_CCT As String,  _
                    ByVal Original_RPCOCF_MALO_DPT As String,  _
                    ByVal Original_RPCOCF_MALO_FWT As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_HDT As String,  _
                    ByVal Original_RPCOCF_MBLO_CCT As String,  _
                    ByVal Original_RPCOCF_MBLO_HCT As String,  _
                    ByVal Original_RPCOCF_MBLO_PPT As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION01 As String,  _
                    ByVal Original_INSPSJ_INSPECTION02 As String,  _
                    ByVal Original_INSPSJ_INSPECTION03 As String,  _
                    ByVal Original_INSPSJ_INSPECTION04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION05 As String,  _
                    ByVal Original_INSPSJ_INSPECTION06 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal Original_INSPSJ_INSPECTION11 As String,  _
                    ByVal Original_INSPSJ_INSPECTION12 As String,  _
                    ByVal Original_INSPSJ_INSPECTION13 As String,  _
                    ByVal Original_INSPSJ_INSPECTION14 As String,  _
                    ByVal Original_INSPSJ_INSPECTION15 As String,  _
                    ByVal Original_INSPSJ_INSPECTION16 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal Original_UPDATED_BY As String,  _
                    ByVal Original_CREATED_WHEN As Date,  _
                    ByVal Original_UPDATED_WHEN As Global.System.Nullable(Of Date),  _
                    ByVal ID As Integer) As Integer
            If (ENGINE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENGINE_TYPE,String)
            End If
            If (ENGINE_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENGINE_NO,String)
            End If
            If (ENGINE_ASM_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINE_ASM_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ENGINE_ASM_NO,String)
            End If
            If (BOOK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BOOK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(BOOK,String)
            End If
            If (YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(YEAR,String)
            End If
            If (MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MODEL_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LOT_NO,String)
            End If
            If (UNIT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(UNIT_NO,String)
            End If
            If (AT_MT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AT_MT")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(AT_MT,String)
            End If
            If (EMISSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EMISSION")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(EMISSION,String)
            End If
            If (INJ_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INJ_MODEL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(INJ_MODEL_CODE,String)
            End If
            If (SPARE_001 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SPARE_001,String)
            End If
            If (SB_DATA_SB_PARTS_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_SB_PARTS_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SB_DATA_SB_PARTS_NO,String)
            End If
            If (SB_DATA_SB_SERIAL_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_SB_SERIAL_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SB_DATA_SB_SERIAL_NO,String)
            End If
            If (SB_DATA_GASKET_GRADE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SB_DATA_GASKET_GRADE")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SB_DATA_GASKET_GRADE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(LINE_ON_TIME,Date)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(LINE_OFF_TIME,Date)
            If (RPCOCF_SBLO_BCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_BCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(RPCOCF_SBLO_BCT,String)
            End If
            If (RPCOCF_SBLO_CRT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_CRT")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(RPCOCF_SBLO_CRT,String)
            End If
            If (RPCOCF_SBLO_CTM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_CTM")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RPCOCF_SBLO_CTM,String)
            End If
            If (RPCOCF_SBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(RPCOCF_SBLO_SPARE01,String)
            End If
            If (RPCOCF_SBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RPCOCF_SBLO_SPARE02,String)
            End If
            If (RPCOCF_SBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_SBLO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(RPCOCF_SBLO_SPARE03,String)
            End If
            If (RPCOCF_MALO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_CCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(RPCOCF_MALO_CCT,String)
            End If
            If (RPCOCF_MALO_DPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_DPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(RPCOCF_MALO_DPT,String)
            End If
            If (RPCOCF_MALO_FWT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_FWT")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(RPCOCF_MALO_FWT,String)
            End If
            If (RPCOCF_MALO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(RPCOCF_MALO_SPARE01,String)
            End If
            If (RPCOCF_MALO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(RPCOCF_MALO_SPARE02,String)
            End If
            If (RPCOCF_MALO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MALO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(RPCOCF_MALO_SPARE03,String)
            End If
            If (RPCOCF_MBLO_HDT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_HDT")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(RPCOCF_MBLO_HDT,String)
            End If
            If (RPCOCF_MBLO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_CCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(RPCOCF_MBLO_CCT,String)
            End If
            If (RPCOCF_MBLO_HCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_HCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(RPCOCF_MBLO_HCT,String)
            End If
            If (RPCOCF_MBLO_PPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_PPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(RPCOCF_MBLO_PPT,String)
            End If
            If (RPCOCF_MBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(RPCOCF_MBLO_SPARE01,String)
            End If
            If (RPCOCF_MBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(RPCOCF_MBLO_SPARE02,String)
            End If
            If (RPCOCF_MBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(RPCOCF_MBLO_SPARE03,String)
            End If
            If (RPCOCF_MBLO_SPARE04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RPCOCF_MBLO_SPARE04")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(RPCOCF_MBLO_SPARE04,String)
            End If
            If (INSPSJ_INSPECTION01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION01")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(INSPSJ_INSPECTION01,String)
            End If
            If (INSPSJ_INSPECTION02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION02")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(INSPSJ_INSPECTION02,String)
            End If
            If (INSPSJ_INSPECTION03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION03")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(INSPSJ_INSPECTION03,String)
            End If
            If (INSPSJ_INSPECTION04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION04")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(INSPSJ_INSPECTION04,String)
            End If
            If (INSPSJ_INSPECTION05 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION05")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(INSPSJ_INSPECTION05,String)
            End If
            If (INSPSJ_INSPECTION06 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION06")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(INSPSJ_INSPECTION06,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(INSPSJ_INSPECTION_TIME01,Date)
            If (INSPSJ_INSPECTION11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION11")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(INSPSJ_INSPECTION11,String)
            End If
            If (INSPSJ_INSPECTION12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION12")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(INSPSJ_INSPECTION12,String)
            End If
            If (INSPSJ_INSPECTION13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION13")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(INSPSJ_INSPECTION13,String)
            End If
            If (INSPSJ_INSPECTION14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION14")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(INSPSJ_INSPECTION14,String)
            End If
            If (INSPSJ_INSPECTION15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION15")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(INSPSJ_INSPECTION15,String)
            End If
            If (INSPSJ_INSPECTION16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INSPSJ_INSPECTION16")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(INSPSJ_INSPECTION16,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(INSPSJ_INSPECTION_TIME02,Date)
            If (UPDATED_BY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(UPDATED_BY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(CREATED_WHEN,Date)
            If (UPDATED_WHEN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(UPDATED_WHEN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_ID,Integer)
            If (Original_ENGINE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_ENGINE_TYPE,String)
            End If
            If (Original_ENGINE_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_ENGINE_NO,String)
            End If
            If (Original_ENGINE_ASM_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINE_ASM_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_ENGINE_ASM_NO,String)
            End If
            If (Original_BOOK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BOOK")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_BOOK,String)
            End If
            If (Original_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_YEAR,String)
            End If
            If (Original_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_MODEL_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_UNIT_NO,String)
            End If
            If (Original_AT_MT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AT_MT")
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_AT_MT,String)
            End If
            If (Original_EMISSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EMISSION")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_EMISSION,String)
            End If
            If (Original_INJ_MODEL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INJ_MODEL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_INJ_MODEL_CODE,String)
            End If
            If (Original_SPARE_001 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_SPARE_001,String)
            End If
            If (Original_SB_DATA_SB_PARTS_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_SB_PARTS_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_SB_DATA_SB_PARTS_NO,String)
            End If
            If (Original_SB_DATA_SB_SERIAL_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_SB_SERIAL_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_SB_DATA_SB_SERIAL_NO,String)
            End If
            If (Original_SB_DATA_GASKET_GRADE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SB_DATA_GASKET_GRADE")
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_SB_DATA_GASKET_GRADE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_LINE_ON_TIME,Date)
            Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_LINE_OFF_TIME,Date)
            If (Original_RPCOCF_SBLO_BCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_BCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_RPCOCF_SBLO_BCT,String)
            End If
            If (Original_RPCOCF_SBLO_CRT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_CRT")
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_RPCOCF_SBLO_CRT,String)
            End If
            If (Original_RPCOCF_SBLO_CTM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_CTM")
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_RPCOCF_SBLO_CTM,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_RPCOCF_SBLO_SPARE01,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_RPCOCF_SBLO_SPARE02,String)
            End If
            If (Original_RPCOCF_SBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_SBLO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_RPCOCF_SBLO_SPARE03,String)
            End If
            If (Original_RPCOCF_MALO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_CCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_RPCOCF_MALO_CCT,String)
            End If
            If (Original_RPCOCF_MALO_DPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_DPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_RPCOCF_MALO_DPT,String)
            End If
            If (Original_RPCOCF_MALO_FWT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_FWT")
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_RPCOCF_MALO_FWT,String)
            End If
            If (Original_RPCOCF_MALO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_RPCOCF_MALO_SPARE01,String)
            End If
            If (Original_RPCOCF_MALO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_RPCOCF_MALO_SPARE02,String)
            End If
            If (Original_RPCOCF_MALO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MALO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_RPCOCF_MALO_SPARE03,String)
            End If
            If (Original_RPCOCF_MBLO_HDT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_HDT")
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_RPCOCF_MBLO_HDT,String)
            End If
            If (Original_RPCOCF_MBLO_CCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_CCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_RPCOCF_MBLO_CCT,String)
            End If
            If (Original_RPCOCF_MBLO_HCT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_HCT")
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_RPCOCF_MBLO_HCT,String)
            End If
            If (Original_RPCOCF_MBLO_PPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_PPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_RPCOCF_MBLO_PPT,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE01")
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_RPCOCF_MBLO_SPARE01,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE02")
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_RPCOCF_MBLO_SPARE02,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE03")
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_RPCOCF_MBLO_SPARE03,String)
            End If
            If (Original_RPCOCF_MBLO_SPARE04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RPCOCF_MBLO_SPARE04")
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_RPCOCF_MBLO_SPARE04,String)
            End If
            If (Original_INSPSJ_INSPECTION01 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION01")
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_INSPSJ_INSPECTION01,String)
            End If
            If (Original_INSPSJ_INSPECTION02 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION02")
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_INSPSJ_INSPECTION02,String)
            End If
            If (Original_INSPSJ_INSPECTION03 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION03")
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_INSPSJ_INSPECTION03,String)
            End If
            If (Original_INSPSJ_INSPECTION04 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION04")
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_INSPSJ_INSPECTION04,String)
            End If
            If (Original_INSPSJ_INSPECTION05 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION05")
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_INSPSJ_INSPECTION05,String)
            End If
            If (Original_INSPSJ_INSPECTION06 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION06")
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_INSPSJ_INSPECTION06,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_INSPSJ_INSPECTION_TIME01,Date)
            If (Original_INSPSJ_INSPECTION11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION11")
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_INSPSJ_INSPECTION11,String)
            End If
            If (Original_INSPSJ_INSPECTION12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION12")
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_INSPSJ_INSPECTION12,String)
            End If
            If (Original_INSPSJ_INSPECTION13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION13")
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_INSPSJ_INSPECTION13,String)
            End If
            If (Original_INSPSJ_INSPECTION14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION14")
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_INSPSJ_INSPECTION14,String)
            End If
            If (Original_INSPSJ_INSPECTION15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION15")
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_INSPSJ_INSPECTION15,String)
            End If
            If (Original_INSPSJ_INSPECTION16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_INSPSJ_INSPECTION16")
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_INSPSJ_INSPECTION16,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_INSPSJ_INSPECTION_TIME02,Date)
            If (Original_UPDATED_BY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_UPDATED_BY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_CREATED_WHEN,Date)
            If (Original_UPDATED_WHEN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_UPDATED_WHEN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(112).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ENGINE_TYPE As String,  _
                    ByVal ENGINE_NO As String,  _
                    ByVal ENGINE_ASM_NO As String,  _
                    ByVal BOOK As String,  _
                    ByVal YEAR As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT_NO As String,  _
                    ByVal AT_MT As String,  _
                    ByVal EMISSION As String,  _
                    ByVal INJ_MODEL_CODE As String,  _
                    ByVal SPARE_001 As String,  _
                    ByVal SB_DATA_SB_PARTS_NO As String,  _
                    ByVal SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal SB_DATA_GASKET_GRADE As String,  _
                    ByVal LINE_ON_TIME As Date,  _
                    ByVal LINE_OFF_TIME As Date,  _
                    ByVal RPCOCF_SBLO_BCT As String,  _
                    ByVal RPCOCF_SBLO_CRT As String,  _
                    ByVal RPCOCF_SBLO_CTM As String,  _
                    ByVal RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MALO_CCT As String,  _
                    ByVal RPCOCF_MALO_DPT As String,  _
                    ByVal RPCOCF_MALO_FWT As String,  _
                    ByVal RPCOCF_MALO_SPARE01 As String,  _
                    ByVal RPCOCF_MALO_SPARE02 As String,  _
                    ByVal RPCOCF_MALO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_HDT As String,  _
                    ByVal RPCOCF_MBLO_CCT As String,  _
                    ByVal RPCOCF_MBLO_HCT As String,  _
                    ByVal RPCOCF_MBLO_PPT As String,  _
                    ByVal RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal INSPSJ_INSPECTION01 As String,  _
                    ByVal INSPSJ_INSPECTION02 As String,  _
                    ByVal INSPSJ_INSPECTION03 As String,  _
                    ByVal INSPSJ_INSPECTION04 As String,  _
                    ByVal INSPSJ_INSPECTION05 As String,  _
                    ByVal INSPSJ_INSPECTION06 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal INSPSJ_INSPECTION11 As String,  _
                    ByVal INSPSJ_INSPECTION12 As String,  _
                    ByVal INSPSJ_INSPECTION13 As String,  _
                    ByVal INSPSJ_INSPECTION14 As String,  _
                    ByVal INSPSJ_INSPECTION15 As String,  _
                    ByVal INSPSJ_INSPECTION16 As String,  _
                    ByVal INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal UPDATED_BY As String,  _
                    ByVal CREATED_WHEN As Date,  _
                    ByVal UPDATED_WHEN As Global.System.Nullable(Of Date),  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_ENGINE_TYPE As String,  _
                    ByVal Original_ENGINE_NO As String,  _
                    ByVal Original_ENGINE_ASM_NO As String,  _
                    ByVal Original_BOOK As String,  _
                    ByVal Original_YEAR As String,  _
                    ByVal Original_MODEL_CODE As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT_NO As String,  _
                    ByVal Original_AT_MT As String,  _
                    ByVal Original_EMISSION As String,  _
                    ByVal Original_INJ_MODEL_CODE As String,  _
                    ByVal Original_SPARE_001 As String,  _
                    ByVal Original_SB_DATA_SB_PARTS_NO As String,  _
                    ByVal Original_SB_DATA_SB_SERIAL_NO As String,  _
                    ByVal Original_SB_DATA_GASKET_GRADE As String,  _
                    ByVal Original_LINE_ON_TIME As Date,  _
                    ByVal Original_LINE_OFF_TIME As Date,  _
                    ByVal Original_RPCOCF_SBLO_BCT As String,  _
                    ByVal Original_RPCOCF_SBLO_CRT As String,  _
                    ByVal Original_RPCOCF_SBLO_CTM As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_SBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MALO_CCT As String,  _
                    ByVal Original_RPCOCF_MALO_DPT As String,  _
                    ByVal Original_RPCOCF_MALO_FWT As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MALO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_HDT As String,  _
                    ByVal Original_RPCOCF_MBLO_CCT As String,  _
                    ByVal Original_RPCOCF_MBLO_HCT As String,  _
                    ByVal Original_RPCOCF_MBLO_PPT As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE01 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE02 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE03 As String,  _
                    ByVal Original_RPCOCF_MBLO_SPARE04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION01 As String,  _
                    ByVal Original_INSPSJ_INSPECTION02 As String,  _
                    ByVal Original_INSPSJ_INSPECTION03 As String,  _
                    ByVal Original_INSPSJ_INSPECTION04 As String,  _
                    ByVal Original_INSPSJ_INSPECTION05 As String,  _
                    ByVal Original_INSPSJ_INSPECTION06 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME01 As Date,  _
                    ByVal Original_INSPSJ_INSPECTION11 As String,  _
                    ByVal Original_INSPSJ_INSPECTION12 As String,  _
                    ByVal Original_INSPSJ_INSPECTION13 As String,  _
                    ByVal Original_INSPSJ_INSPECTION14 As String,  _
                    ByVal Original_INSPSJ_INSPECTION15 As String,  _
                    ByVal Original_INSPSJ_INSPECTION16 As String,  _
                    ByVal Original_INSPSJ_INSPECTION_TIME02 As Date,  _
                    ByVal Original_UPDATED_BY As String,  _
                    ByVal Original_CREATED_WHEN As Date,  _
                    ByVal Original_UPDATED_WHEN As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(ENGINE_TYPE, ENGINE_NO, ENGINE_ASM_NO, BOOK, YEAR, MODEL_CODE, LOT_NO, UNIT_NO, AT_MT, EMISSION, INJ_MODEL_CODE, SPARE_001, SB_DATA_SB_PARTS_NO, SB_DATA_SB_SERIAL_NO, SB_DATA_GASKET_GRADE, LINE_ON_TIME, LINE_OFF_TIME, RPCOCF_SBLO_BCT, RPCOCF_SBLO_CRT, RPCOCF_SBLO_CTM, RPCOCF_SBLO_SPARE01, RPCOCF_SBLO_SPARE02, RPCOCF_SBLO_SPARE03, RPCOCF_MALO_CCT, RPCOCF_MALO_DPT, RPCOCF_MALO_FWT, RPCOCF_MALO_SPARE01, RPCOCF_MALO_SPARE02, RPCOCF_MALO_SPARE03, RPCOCF_MBLO_HDT, RPCOCF_MBLO_CCT, RPCOCF_MBLO_HCT, RPCOCF_MBLO_PPT, RPCOCF_MBLO_SPARE01, RPCOCF_MBLO_SPARE02, RPCOCF_MBLO_SPARE03, RPCOCF_MBLO_SPARE04, INSPSJ_INSPECTION01, INSPSJ_INSPECTION02, INSPSJ_INSPECTION03, INSPSJ_INSPECTION04, INSPSJ_INSPECTION05, INSPSJ_INSPECTION06, INSPSJ_INSPECTION_TIME01, INSPSJ_INSPECTION11, INSPSJ_INSPECTION12, INSPSJ_INSPECTION13, INSPSJ_INSPECTION14, INSPSJ_INSPECTION15, INSPSJ_INSPECTION16, INSPSJ_INSPECTION_TIME02, UPDATED_BY, CREATED_WHEN, UPDATED_WHEN, Original_ID, Original_ENGINE_TYPE, Original_ENGINE_NO, Original_ENGINE_ASM_NO, Original_BOOK, Original_YEAR, Original_MODEL_CODE, Original_LOT_NO, Original_UNIT_NO, Original_AT_MT, Original_EMISSION, Original_INJ_MODEL_CODE, Original_SPARE_001, Original_SB_DATA_SB_PARTS_NO, Original_SB_DATA_SB_SERIAL_NO, Original_SB_DATA_GASKET_GRADE, Original_LINE_ON_TIME, Original_LINE_OFF_TIME, Original_RPCOCF_SBLO_BCT, Original_RPCOCF_SBLO_CRT, Original_RPCOCF_SBLO_CTM, Original_RPCOCF_SBLO_SPARE01, Original_RPCOCF_SBLO_SPARE02, Original_RPCOCF_SBLO_SPARE03, Original_RPCOCF_MALO_CCT, Original_RPCOCF_MALO_DPT, Original_RPCOCF_MALO_FWT, Original_RPCOCF_MALO_SPARE01, Original_RPCOCF_MALO_SPARE02, Original_RPCOCF_MALO_SPARE03, Original_RPCOCF_MBLO_HDT, Original_RPCOCF_MBLO_CCT, Original_RPCOCF_MBLO_HCT, Original_RPCOCF_MBLO_PPT, Original_RPCOCF_MBLO_SPARE01, Original_RPCOCF_MBLO_SPARE02, Original_RPCOCF_MBLO_SPARE03, Original_RPCOCF_MBLO_SPARE04, Original_INSPSJ_INSPECTION01, Original_INSPSJ_INSPECTION02, Original_INSPSJ_INSPECTION03, Original_INSPSJ_INSPECTION04, Original_INSPSJ_INSPECTION05, Original_INSPSJ_INSPECTION06, Original_INSPSJ_INSPECTION_TIME01, Original_INSPSJ_INSPECTION11, Original_INSPSJ_INSPECTION12, Original_INSPSJ_INSPECTION13, Original_INSPSJ_INSPECTION14, Original_INSPSJ_INSPECTION15, Original_INSPSJ_INSPECTION16, Original_INSPSJ_INSPECTION_TIME02, Original_UPDATED_BY, Original_CREATED_WHEN, Original_UPDATED_WHEN, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IMPORT_CELL_MAPPINGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IMPORT_CELL_MAPPING"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("DATA_CATEGORY", "DATA_CATEGORY")
            tableMapping.ColumnMappings.Add("COLUMN_ID", "COLUMN_ID")
            tableMapping.ColumnMappings.Add("POSITION", "POSITION")
            tableMapping.ColumnMappings.Add("LENGTH", "LENGTH")
            tableMapping.ColumnMappings.Add("REV", "REV")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[IMPORT_CELL_MAPPING] WHERE (([ID] = @Original_ID) AND ([DATA_C"& _ 
                "ATEGORY] = @Original_DATA_CATEGORY) AND ([COLUMN_ID] = @Original_COLUMN_ID) AND "& _ 
                "([POSITION] = @Original_POSITION) AND ([LENGTH] = @Original_LENGTH) AND ([REV] ="& _ 
                " @Original_REV))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_CATEGORY", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_CATEGORY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IMPORT_CELL_MAPPING] ([DATA_CATEGORY], [COLUMN_ID], [POSITION]"& _ 
                ", [LENGTH], [REV]) VALUES (@DATA_CATEGORY, @COLUMN_ID, @POSITION, @LENGTH, @REV)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, DATA_CATEGORY, COLUMN_ID, POSITION, LENGTH, REV FROM IMPORT_CELL_M"& _ 
                "APPING WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_CATEGORY", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_CATEGORY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[IMPORT_CELL_MAPPING] SET [DATA_CATEGORY] = @DATA_CATEGORY, [COLUMN_"& _ 
                "ID] = @COLUMN_ID, [POSITION] = @POSITION, [LENGTH] = @LENGTH, [REV] = @REV WHERE"& _ 
                " (([ID] = @Original_ID) AND ([DATA_CATEGORY] = @Original_DATA_CATEGORY) AND ([CO"& _ 
                "LUMN_ID] = @Original_COLUMN_ID) AND ([POSITION] = @Original_POSITION) AND ([LENG"& _ 
                "TH] = @Original_LENGTH) AND ([REV] = @Original_REV));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, DATA_CATEGORY,"& _ 
                " COLUMN_ID, POSITION, LENGTH, REV FROM IMPORT_CELL_MAPPING WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_CATEGORY", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_CATEGORY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_CATEGORY", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_CATEGORY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, DATA_CATEGORY, COLUMN_ID, POSITION, LENGTH, REV FROM dbo.IMPORT_CELL_M"& _ 
                "APPING"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.IMPORT_CELL_MAPPINGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.IMPORT_CELL_MAPPINGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.IMPORT_CELL_MAPPINGDataTable = New iemt_pdt_es01_developmentDataSet.IMPORT_CELL_MAPPINGDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.IMPORT_CELL_MAPPINGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "IMPORT_CELL_MAPPING")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_DATA_CATEGORY As Byte, ByVal Original_COLUMN_ID As Integer, ByVal Original_POSITION As Integer, ByVal Original_LENGTH As Integer, ByVal Original_REV As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DATA_CATEGORY,Byte)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COLUMN_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_POSITION,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LENGTH,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_REV,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DATA_CATEGORY As Byte, ByVal COLUMN_ID As Integer, ByVal POSITION As Integer, ByVal LENGTH As Integer, ByVal REV As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DATA_CATEGORY,Byte)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COLUMN_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(POSITION,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(LENGTH,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(REV,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA_CATEGORY As Byte, ByVal COLUMN_ID As Integer, ByVal POSITION As Integer, ByVal LENGTH As Integer, ByVal REV As Integer, ByVal Original_ID As Integer, ByVal Original_DATA_CATEGORY As Byte, ByVal Original_COLUMN_ID As Integer, ByVal Original_POSITION As Integer, ByVal Original_LENGTH As Integer, ByVal Original_REV As Integer, ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DATA_CATEGORY,Byte)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COLUMN_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(POSITION,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LENGTH,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(REV,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_DATA_CATEGORY,Byte)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_COLUMN_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_POSITION,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_LENGTH,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_REV,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA_CATEGORY As Byte, ByVal COLUMN_ID As Integer, ByVal POSITION As Integer, ByVal LENGTH As Integer, ByVal REV As Integer, ByVal Original_ID As Integer, ByVal Original_DATA_CATEGORY As Byte, ByVal Original_COLUMN_ID As Integer, ByVal Original_POSITION As Integer, ByVal Original_LENGTH As Integer, ByVal Original_REV As Integer) As Integer
            Return Me.Update(DATA_CATEGORY, COLUMN_ID, POSITION, LENGTH, REV, Original_ID, Original_DATA_CATEGORY, Original_COLUMN_ID, Original_POSITION, Original_LENGTH, Original_REV, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IMPORT_ENGINE_MAPPINGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IMPORT_ENGINE_MAPPING"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("COLUMN_NAME", "COLUMN_NAME")
            tableMapping.ColumnMappings.Add("DATA_TYPE", "DATA_TYPE")
            tableMapping.ColumnMappings.Add("POSITION", "POSITION")
            tableMapping.ColumnMappings.Add("LENGTH", "LENGTH")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[IMPORT_ENGINE_MAPPING] WHERE (([ID] = @Original_ID) AND ([COLU"& _ 
                "MN_NAME] = @Original_COLUMN_NAME) AND ([DATA_TYPE] = @Original_DATA_TYPE) AND (["& _ 
                "POSITION] = @Original_POSITION) AND ([LENGTH] = @Original_LENGTH))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IMPORT_ENGINE_MAPPING] ([COLUMN_NAME], [DATA_TYPE], [POSITION]"& _ 
                ", [LENGTH]) VALUES (@COLUMN_NAME, @DATA_TYPE, @POSITION, @LENGTH);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, C"& _ 
                "OLUMN_NAME, DATA_TYPE, POSITION, LENGTH FROM IMPORT_ENGINE_MAPPING WHERE (ID = S"& _ 
                "COPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[IMPORT_ENGINE_MAPPING] SET [COLUMN_NAME] = @COLUMN_NAME, [DATA_TYPE"& _ 
                "] = @DATA_TYPE, [POSITION] = @POSITION, [LENGTH] = @LENGTH WHERE (([ID] = @Origi"& _ 
                "nal_ID) AND ([COLUMN_NAME] = @Original_COLUMN_NAME) AND ([DATA_TYPE] = @Original"& _ 
                "_DATA_TYPE) AND ([POSITION] = @Original_POSITION) AND ([LENGTH] = @Original_LENG"& _ 
                "TH));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, COLUMN_NAME, DATA_TYPE, POSITION, LENGTH FROM IMPORT_ENGINE_MA"& _ 
                "PPING WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_POSITION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POSITION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, COLUMN_NAME, DATA_TYPE, POSITION, LENGTH FROM dbo.IMPORT_ENGINE_MAPPIN"& _ 
                "G"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.IMPORT_ENGINE_MAPPINGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.IMPORT_ENGINE_MAPPINGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.IMPORT_ENGINE_MAPPINGDataTable = New iemt_pdt_es01_developmentDataSet.IMPORT_ENGINE_MAPPINGDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.IMPORT_ENGINE_MAPPINGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "IMPORT_ENGINE_MAPPING")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As Byte, ByVal Original_POSITION As Integer, ByVal Original_LENGTH As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COLUMN_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DATA_TYPE,Byte)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_POSITION,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LENGTH,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal POSITION As Integer, ByVal LENGTH As Integer) As Integer
            If (COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(COLUMN_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DATA_TYPE,Byte)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(POSITION,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(LENGTH,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal POSITION As Integer, ByVal LENGTH As Integer, ByVal Original_ID As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As Byte, ByVal Original_POSITION As Integer, ByVal Original_LENGTH As Integer, ByVal ID As Integer) As Integer
            If (COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COLUMN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DATA_TYPE,Byte)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(POSITION,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LENGTH,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID,Integer)
            If (Original_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_COLUMN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_DATA_TYPE,Byte)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_POSITION,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_LENGTH,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal POSITION As Integer, ByVal LENGTH As Integer, ByVal Original_ID As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As Byte, ByVal Original_POSITION As Integer, ByVal Original_LENGTH As Integer) As Integer
            Return Me.Update(COLUMN_NAME, DATA_TYPE, POSITION, LENGTH, Original_ID, Original_COLUMN_NAME, Original_DATA_TYPE, Original_POSITION, Original_LENGTH, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class schema_migrationsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "schema_migrations"
            tableMapping.ColumnMappings.Add("VERSION", "VERSION")
            tableMapping.ColumnMappings.Add("DESCR", "DESCR")
            tableMapping.ColumnMappings.Add("SQL_SCRIPT", "SQL_SCRIPT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[schema_migrations] WHERE (([VERSION] = @Original_VERSION) AND "& _ 
                "([DESCR] = @Original_DESCR))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VERSION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[schema_migrations] ([VERSION], [DESCR], [SQL_SCRIPT]) VALUES ("& _ 
                "@VERSION, @DESCR, @SQL_SCRIPT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT VERSION, DESCR, SQL_SCRIPT FROM schema_m"& _ 
                "igrations WHERE (VERSION = @VERSION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERSION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SQL_SCRIPT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SQL_SCRIPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[schema_migrations] SET [VERSION] = @VERSION, [DESCR] = @DESCR, [SQL"& _ 
                "_SCRIPT] = @SQL_SCRIPT WHERE (([VERSION] = @Original_VERSION) AND ([DESCR] = @Or"& _ 
                "iginal_DESCR));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT VERSION, DESCR, SQL_SCRIPT FROM schema_migrations WHERE "& _ 
                "(VERSION = @VERSION)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERSION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SQL_SCRIPT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SQL_SCRIPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VERSION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT VERSION, DESCR, SQL_SCRIPT FROM dbo.schema_migrations"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.schema_migrationsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.schema_migrationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.schema_migrationsDataTable = New iemt_pdt_es01_developmentDataSet.schema_migrationsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.schema_migrationsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "schema_migrations")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_VERSION As Date, ByVal Original_DESCR As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_VERSION,Date)
            If (Original_DESCR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCR")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DESCR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal VERSION As Date, ByVal DESCR As String, ByVal SQL_SCRIPT As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(VERSION,Date)
            If (DESCR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCR")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESCR,String)
            End If
            If (SQL_SCRIPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SQL_SCRIPT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SQL_SCRIPT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VERSION As Date, ByVal DESCR As String, ByVal SQL_SCRIPT As String, ByVal Original_VERSION As Date, ByVal Original_DESCR As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(VERSION,Date)
            If (DESCR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCR")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESCR,String)
            End If
            If (SQL_SCRIPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SQL_SCRIPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SQL_SCRIPT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_VERSION,Date)
            If (Original_DESCR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCR")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_DESCR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DESCR As String, ByVal SQL_SCRIPT As String, ByVal Original_VERSION As Date, ByVal Original_DESCR As String) As Integer
            Return Me.Update(Original_VERSION, DESCR, SQL_SCRIPT, Original_VERSION, Original_DESCR)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class schema_migrations_comparerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "schema_migrations_comparer"
            tableMapping.ColumnMappings.Add("VERSION", "VERSION")
            tableMapping.ColumnMappings.Add("DESCR", "DESCR")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[schema_migrations_comparer] WHERE (([VERSION] = @Original_VERS"& _ 
                "ION) AND ([DESCR] = @Original_DESCR))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VERSION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[schema_migrations_comparer] ([VERSION], [DESCR]) VALUES (@VERS"& _ 
                "ION, @DESCR);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT VERSION, DESCR FROM schema_migrations_comparer WHERE (VERS"& _ 
                "ION = @VERSION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERSION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[schema_migrations_comparer] SET [VERSION] = @VERSION, [DESCR] = @DE"& _ 
                "SCR WHERE (([VERSION] = @Original_VERSION) AND ([DESCR] = @Original_DESCR));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT VERSION, DESCR FROM schema_migrations_comparer WHERE (VERSION = @VERSION)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERSION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VERSION", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERSION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT VERSION, DESCR FROM dbo.schema_migrations_comparer"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.schema_migrations_comparerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.schema_migrations_comparerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.schema_migrations_comparerDataTable = New iemt_pdt_es01_developmentDataSet.schema_migrations_comparerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.schema_migrations_comparerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "schema_migrations_comparer")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_VERSION As Date, ByVal Original_DESCR As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_VERSION,Date)
            If (Original_DESCR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCR")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DESCR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal VERSION As Date, ByVal DESCR As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(VERSION,Date)
            If (DESCR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCR")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESCR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VERSION As Date, ByVal DESCR As String, ByVal Original_VERSION As Date, ByVal Original_DESCR As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(VERSION,Date)
            If (DESCR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCR")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESCR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_VERSION,Date)
            If (Original_DESCR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCR")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_DESCR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DESCR As String, ByVal Original_VERSION As Date, ByVal Original_DESCR As String) As Integer
            Return Me.Update(Original_VERSION, DESCR, Original_VERSION, Original_DESCR)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRACE_COLUMNSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRACE_COLUMNS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("SEQ", "SEQ")
            tableMapping.ColumnMappings.Add("COLUMN_NAME", "COLUMN_NAME")
            tableMapping.ColumnMappings.Add("DATA_TYPE", "DATA_TYPE")
            tableMapping.ColumnMappings.Add("COLUMN_REGEX", "COLUMN_REGEX")
            tableMapping.ColumnMappings.Add("CAN_EDIT", "CAN_EDIT")
            tableMapping.ColumnMappings.Add("CAN_ADD", "CAN_ADD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TRACE_COLUMNS] WHERE (([ID] = @Original_ID) AND ([SEQ] = @Orig"& _ 
                "inal_SEQ) AND ([COLUMN_NAME] = @Original_COLUMN_NAME) AND ([DATA_TYPE] = @Origin"& _ 
                "al_DATA_TYPE) AND ([COLUMN_REGEX] = @Original_COLUMN_REGEX) AND ([CAN_EDIT] = @O"& _ 
                "riginal_CAN_EDIT) AND ([CAN_ADD] = @Original_CAN_ADD))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_REGEX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_REGEX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CAN_EDIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_EDIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CAN_ADD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_ADD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TRACE_COLUMNS] ([SEQ], [COLUMN_NAME], [DATA_TYPE], [COLUMN_REG"& _ 
                "EX], [CAN_EDIT], [CAN_ADD]) VALUES (@SEQ, @COLUMN_NAME, @DATA_TYPE, @COLUMN_REGE"& _ 
                "X, @CAN_EDIT, @CAN_ADD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, "& _ 
                "CAN_EDIT, CAN_ADD FROM TRACE_COLUMNS WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_REGEX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_REGEX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAN_EDIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_EDIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAN_ADD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_ADD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TRACE_COLUMNS] SET [SEQ] = @SEQ, [COLUMN_NAME] = @COLUMN_NAME, [DAT"& _ 
                "A_TYPE] = @DATA_TYPE, [COLUMN_REGEX] = @COLUMN_REGEX, [CAN_EDIT] = @CAN_EDIT, [C"& _ 
                "AN_ADD] = @CAN_ADD WHERE (([ID] = @Original_ID) AND ([SEQ] = @Original_SEQ) AND "& _ 
                "([COLUMN_NAME] = @Original_COLUMN_NAME) AND ([DATA_TYPE] = @Original_DATA_TYPE) "& _ 
                "AND ([COLUMN_REGEX] = @Original_COLUMN_REGEX) AND ([CAN_EDIT] = @Original_CAN_ED"& _ 
                "IT) AND ([CAN_ADD] = @Original_CAN_ADD));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, SEQ, COLUMN_NAME, DATA_TYP"& _ 
                "E, COLUMN_REGEX, CAN_EDIT, CAN_ADD FROM TRACE_COLUMNS WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_REGEX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_REGEX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAN_EDIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_EDIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAN_ADD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_ADD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_REGEX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_REGEX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CAN_EDIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_EDIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CAN_ADD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_ADD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, CAN_EDIT, CAN_ADD FROM dbo."& _ 
                "TRACE_COLUMNS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.TRACE_COLUMNSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.TRACE_COLUMNSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.TRACE_COLUMNSDataTable = New iemt_pdt_es01_developmentDataSet.TRACE_COLUMNSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.TRACE_COLUMNSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TRACE_COLUMNS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As Byte, ByVal Original_COLUMN_REGEX As String, ByVal Original_CAN_EDIT As Boolean, ByVal Original_CAN_ADD As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEQ,Integer)
            If (Original_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COLUMN_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DATA_TYPE,Byte)
            If (Original_COLUMN_REGEX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_REGEX")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_COLUMN_REGEX,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CAN_EDIT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CAN_ADD,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal COLUMN_REGEX As String, ByVal CAN_EDIT As Boolean, ByVal CAN_ADD As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SEQ,Integer)
            If (COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COLUMN_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(DATA_TYPE,Byte)
            If (COLUMN_REGEX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_REGEX")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COLUMN_REGEX,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CAN_EDIT,Boolean)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(CAN_ADD,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal COLUMN_REGEX As String, ByVal CAN_EDIT As Boolean, ByVal CAN_ADD As Boolean, ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As Byte, ByVal Original_COLUMN_REGEX As String, ByVal Original_CAN_EDIT As Boolean, ByVal Original_CAN_ADD As Boolean, ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SEQ,Integer)
            If (COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COLUMN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DATA_TYPE,Byte)
            If (COLUMN_REGEX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_REGEX")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COLUMN_REGEX,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CAN_EDIT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CAN_ADD,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SEQ,Integer)
            If (Original_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COLUMN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DATA_TYPE,Byte)
            If (Original_COLUMN_REGEX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_REGEX")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_COLUMN_REGEX,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CAN_EDIT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CAN_ADD,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal COLUMN_REGEX As String, ByVal CAN_EDIT As Boolean, ByVal CAN_ADD As Boolean, ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As Byte, ByVal Original_COLUMN_REGEX As String, ByVal Original_CAN_EDIT As Boolean, ByVal Original_CAN_ADD As Boolean) As Integer
            Return Me.Update(SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, CAN_EDIT, CAN_ADD, Original_ID, Original_SEQ, Original_COLUMN_NAME, Original_DATA_TYPE, Original_COLUMN_REGEX, Original_CAN_EDIT, Original_CAN_ADD, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRACE_DATA_DATETIMETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRACE_DATA_DATETIME"
            tableMapping.ColumnMappings.Add("ENGINE_ID", "ENGINE_ID")
            tableMapping.ColumnMappings.Add("TRACE_COLUMNS_ID", "TRACE_COLUMNS_ID")
            tableMapping.ColumnMappings.Add("REV_NO", "REV_NO")
            tableMapping.ColumnMappings.Add("DATA", "DATA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TRACE_DATA_DATETIME] WHERE (([ENGINE_ID] = @Original_ENGINE_ID"& _ 
                ") AND ([TRACE_COLUMNS_ID] = @Original_TRACE_COLUMNS_ID) AND ([REV_NO] = @Origina"& _ 
                "l_REV_NO) AND ([DATA] = @Original_DATA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TRACE_DATA_DATETIME] ([ENGINE_ID], [TRACE_COLUMNS_ID], [REV_NO"& _ 
                "], [DATA]) VALUES (@ENGINE_ID, @TRACE_COLUMNS_ID, @REV_NO, @DATA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGIN"& _ 
                "E_ID, TRACE_COLUMNS_ID, REV_NO, DATA FROM TRACE_DATA_DATETIME WHERE (ENGINE_ID ="& _ 
                " @ENGINE_ID) AND (REV_NO = @REV_NO) AND (TRACE_COLUMNS_ID = @TRACE_COLUMNS_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TRACE_DATA_DATETIME] SET [ENGINE_ID] = @ENGINE_ID, [TRACE_COLUMNS_I"& _ 
                "D] = @TRACE_COLUMNS_ID, [REV_NO] = @REV_NO, [DATA] = @DATA WHERE (([ENGINE_ID] ="& _ 
                " @Original_ENGINE_ID) AND ([TRACE_COLUMNS_ID] = @Original_TRACE_COLUMNS_ID) AND "& _ 
                "([REV_NO] = @Original_REV_NO) AND ([DATA] = @Original_DATA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGINE_ID,"& _ 
                " TRACE_COLUMNS_ID, REV_NO, DATA FROM TRACE_DATA_DATETIME WHERE (ENGINE_ID = @ENG"& _ 
                "INE_ID) AND (REV_NO = @REV_NO) AND (TRACE_COLUMNS_ID = @TRACE_COLUMNS_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ENGINE_ID, TRACE_COLUMNS_ID, REV_NO, DATA FROM dbo.TRACE_DATA_DATETIME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_DATETIMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.TRACE_DATA_DATETIMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_DATETIMEDataTable = New iemt_pdt_es01_developmentDataSet.TRACE_DATA_DATETIMEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_DATETIMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TRACE_DATA_DATETIME")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TRACE_COLUMNS_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REV_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DATA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(TRACE_COLUMNS_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(REV_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As Date, ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TRACE_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REV_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DATA,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TRACE_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_REV_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DATA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA As Date, ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Date) As Integer
            Return Me.Update(Original_ENGINE_ID, Original_TRACE_COLUMNS_ID, Original_REV_NO, DATA, Original_ENGINE_ID, Original_TRACE_COLUMNS_ID, Original_REV_NO, Original_DATA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRACE_DATA_INTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRACE_DATA_INT"
            tableMapping.ColumnMappings.Add("ENGINE_ID", "ENGINE_ID")
            tableMapping.ColumnMappings.Add("TRACE_COLUMNS_ID", "TRACE_COLUMNS_ID")
            tableMapping.ColumnMappings.Add("REV_NO", "REV_NO")
            tableMapping.ColumnMappings.Add("DATA", "DATA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TRACE_DATA_INT] WHERE (([ENGINE_ID] = @Original_ENGINE_ID) AND"& _ 
                " ([TRACE_COLUMNS_ID] = @Original_TRACE_COLUMNS_ID) AND ([REV_NO] = @Original_REV"& _ 
                "_NO) AND ([DATA] = @Original_DATA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TRACE_DATA_INT] ([ENGINE_ID], [TRACE_COLUMNS_ID], [REV_NO], [D"& _ 
                "ATA]) VALUES (@ENGINE_ID, @TRACE_COLUMNS_ID, @REV_NO, @DATA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGINE_ID,"& _ 
                " TRACE_COLUMNS_ID, REV_NO, DATA FROM TRACE_DATA_INT WHERE (ENGINE_ID = @ENGINE_I"& _ 
                "D) AND (REV_NO = @REV_NO) AND (TRACE_COLUMNS_ID = @TRACE_COLUMNS_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TRACE_DATA_INT] SET [ENGINE_ID] = @ENGINE_ID, [TRACE_COLUMNS_ID] = "& _ 
                "@TRACE_COLUMNS_ID, [REV_NO] = @REV_NO, [DATA] = @DATA WHERE (([ENGINE_ID] = @Ori"& _ 
                "ginal_ENGINE_ID) AND ([TRACE_COLUMNS_ID] = @Original_TRACE_COLUMNS_ID) AND ([REV"& _ 
                "_NO] = @Original_REV_NO) AND ([DATA] = @Original_DATA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGINE_ID, TRAC"& _ 
                "E_COLUMNS_ID, REV_NO, DATA FROM TRACE_DATA_INT WHERE (ENGINE_ID = @ENGINE_ID) AN"& _ 
                "D (REV_NO = @REV_NO) AND (TRACE_COLUMNS_ID = @TRACE_COLUMNS_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ENGINE_ID, TRACE_COLUMNS_ID, REV_NO, DATA FROM dbo.TRACE_DATA_INT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_INTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.TRACE_DATA_INTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_INTDataTable = New iemt_pdt_es01_developmentDataSet.TRACE_DATA_INTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_INTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TRACE_DATA_INT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TRACE_COLUMNS_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REV_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DATA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(TRACE_COLUMNS_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(REV_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As Integer, ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TRACE_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REV_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DATA,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TRACE_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_REV_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DATA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA As Integer, ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Integer) As Integer
            Return Me.Update(Original_ENGINE_ID, Original_TRACE_COLUMNS_ID, Original_REV_NO, DATA, Original_ENGINE_ID, Original_TRACE_COLUMNS_ID, Original_REV_NO, Original_DATA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRACE_DATA_STRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRACE_DATA_STR"
            tableMapping.ColumnMappings.Add("ENGINE_ID", "ENGINE_ID")
            tableMapping.ColumnMappings.Add("TRACE_COLUMNS_ID", "TRACE_COLUMNS_ID")
            tableMapping.ColumnMappings.Add("REV_NO", "REV_NO")
            tableMapping.ColumnMappings.Add("DATA", "DATA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TRACE_DATA_STR] WHERE (([ENGINE_ID] = @Original_ENGINE_ID) AND"& _ 
                " ([TRACE_COLUMNS_ID] = @Original_TRACE_COLUMNS_ID) AND ([REV_NO] = @Original_REV"& _ 
                "_NO) AND ([DATA] = @Original_DATA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TRACE_DATA_STR] ([ENGINE_ID], [TRACE_COLUMNS_ID], [REV_NO], [D"& _ 
                "ATA]) VALUES (@ENGINE_ID, @TRACE_COLUMNS_ID, @REV_NO, @DATA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGINE_ID,"& _ 
                " TRACE_COLUMNS_ID, REV_NO, DATA FROM TRACE_DATA_STR WHERE (ENGINE_ID = @ENGINE_I"& _ 
                "D) AND (REV_NO = @REV_NO) AND (TRACE_COLUMNS_ID = @TRACE_COLUMNS_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TRACE_DATA_STR] SET [ENGINE_ID] = @ENGINE_ID, [TRACE_COLUMNS_ID] = "& _ 
                "@TRACE_COLUMNS_ID, [REV_NO] = @REV_NO, [DATA] = @DATA WHERE (([ENGINE_ID] = @Ori"& _ 
                "ginal_ENGINE_ID) AND ([TRACE_COLUMNS_ID] = @Original_TRACE_COLUMNS_ID) AND ([REV"& _ 
                "_NO] = @Original_REV_NO) AND ([DATA] = @Original_DATA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGINE_ID, TRAC"& _ 
                "E_COLUMNS_ID, REV_NO, DATA FROM TRACE_DATA_STR WHERE (ENGINE_ID = @ENGINE_ID) AN"& _ 
                "D (REV_NO = @REV_NO) AND (TRACE_COLUMNS_ID = @TRACE_COLUMNS_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TRACE_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRACE_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ENGINE_ID, TRACE_COLUMNS_ID, REV_NO, DATA FROM dbo.TRACE_DATA_STR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_STRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.TRACE_DATA_STRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_STRDataTable = New iemt_pdt_es01_developmentDataSet.TRACE_DATA_STRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.TRACE_DATA_STRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TRACE_DATA_STR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TRACE_COLUMNS_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REV_NO,Integer)
            If (Original_DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(TRACE_COLUMNS_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(REV_NO,Integer)
            If (DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENGINE_ID As Integer, ByVal TRACE_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As String, ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TRACE_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REV_NO,Integer)
            If (DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DATA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TRACE_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_REV_NO,Integer)
            If (Original_DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA As String, ByVal Original_ENGINE_ID As Integer, ByVal Original_TRACE_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As String) As Integer
            Return Me.Update(Original_ENGINE_ID, Original_TRACE_COLUMNS_ID, Original_REV_NO, DATA, Original_ENGINE_ID, Original_TRACE_COLUMNS_ID, Original_REV_NO, Original_DATA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WORKING_COLUMNSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WORKING_COLUMNS"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("WORKING_TYPE_ID", "WORKING_TYPE_ID")
            tableMapping.ColumnMappings.Add("SEQ", "SEQ")
            tableMapping.ColumnMappings.Add("COLUMN_NAME", "COLUMN_NAME")
            tableMapping.ColumnMappings.Add("DATA_TYPE", "DATA_TYPE")
            tableMapping.ColumnMappings.Add("COLUMN_REGEX", "COLUMN_REGEX")
            tableMapping.ColumnMappings.Add("CAN_EDIT", "CAN_EDIT")
            tableMapping.ColumnMappings.Add("CAN_ADD", "CAN_ADD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[WORKING_COLUMNS] WHERE (([ID] = @Original_ID) AND ([WORKING_TY"& _ 
                "PE_ID] = @Original_WORKING_TYPE_ID) AND ([SEQ] = @Original_SEQ) AND ([COLUMN_NAM"& _ 
                "E] = @Original_COLUMN_NAME) AND ([DATA_TYPE] = @Original_DATA_TYPE) AND ([COLUMN"& _ 
                "_REGEX] = @Original_COLUMN_REGEX) AND ([CAN_EDIT] = @Original_CAN_EDIT) AND ([CA"& _ 
                "N_ADD] = @Original_CAN_ADD))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_TYPE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_TYPE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_REGEX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_REGEX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CAN_EDIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_EDIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CAN_ADD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_ADD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[WORKING_COLUMNS] ([WORKING_TYPE_ID], [SEQ], [COLUMN_NAME], [DA"& _ 
                "TA_TYPE], [COLUMN_REGEX], [CAN_EDIT], [CAN_ADD]) VALUES (@WORKING_TYPE_ID, @SEQ,"& _ 
                " @COLUMN_NAME, @DATA_TYPE, @COLUMN_REGEX, @CAN_EDIT, @CAN_ADD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, WORK"& _ 
                "ING_TYPE_ID, SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, CAN_EDIT, CAN_ADD FROM W"& _ 
                "ORKING_COLUMNS WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_TYPE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_TYPE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_REGEX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_REGEX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAN_EDIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_EDIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAN_ADD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_ADD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[WORKING_COLUMNS] SET [WORKING_TYPE_ID] = @WORKING_TYPE_ID, [SEQ] = "& _ 
                "@SEQ, [COLUMN_NAME] = @COLUMN_NAME, [DATA_TYPE] = @DATA_TYPE, [COLUMN_REGEX] = @"& _ 
                "COLUMN_REGEX, [CAN_EDIT] = @CAN_EDIT, [CAN_ADD] = @CAN_ADD WHERE (([ID] = @Origi"& _ 
                "nal_ID) AND ([WORKING_TYPE_ID] = @Original_WORKING_TYPE_ID) AND ([SEQ] = @Origin"& _ 
                "al_SEQ) AND ([COLUMN_NAME] = @Original_COLUMN_NAME) AND ([DATA_TYPE] = @Original"& _ 
                "_DATA_TYPE) AND ([COLUMN_REGEX] = @Original_COLUMN_REGEX) AND ([CAN_EDIT] = @Ori"& _ 
                "ginal_CAN_EDIT) AND ([CAN_ADD] = @Original_CAN_ADD));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, WORKING_TYPE_I"& _ 
                "D, SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, CAN_EDIT, CAN_ADD FROM WORKING_COL"& _ 
                "UMNS WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_TYPE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_TYPE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLUMN_REGEX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_REGEX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAN_EDIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_EDIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAN_ADD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_ADD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_TYPE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_TYPE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA_TYPE", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COLUMN_REGEX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLUMN_REGEX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CAN_EDIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_EDIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CAN_ADD", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAN_ADD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, WORKING_TYPE_ID, SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, CAN_EDIT, "& _ 
                "CAN_ADD FROM dbo.WORKING_COLUMNS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_COLUMNSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.WORKING_COLUMNSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.WORKING_COLUMNSDataTable = New iemt_pdt_es01_developmentDataSet.WORKING_COLUMNSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_COLUMNSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WORKING_COLUMNS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_WORKING_TYPE_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As Byte, ByVal Original_COLUMN_REGEX As String, ByVal Original_CAN_EDIT As Boolean, ByVal Original_CAN_ADD As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_WORKING_TYPE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SEQ,Integer)
            If (Original_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COLUMN_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DATA_TYPE,Byte)
            If (Original_COLUMN_REGEX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_REGEX")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COLUMN_REGEX,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CAN_EDIT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CAN_ADD,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal WORKING_TYPE_ID As Integer, ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal COLUMN_REGEX As String, ByVal CAN_EDIT As Boolean, ByVal CAN_ADD As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(WORKING_TYPE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SEQ,Integer)
            If (COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COLUMN_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATA_TYPE,Byte)
            If (COLUMN_REGEX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_REGEX")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COLUMN_REGEX,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(CAN_EDIT,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(CAN_ADD,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WORKING_TYPE_ID As Integer,  _
                    ByVal SEQ As Integer,  _
                    ByVal COLUMN_NAME As String,  _
                    ByVal DATA_TYPE As Byte,  _
                    ByVal COLUMN_REGEX As String,  _
                    ByVal CAN_EDIT As Boolean,  _
                    ByVal CAN_ADD As Boolean,  _
                    ByVal Original_ID As Integer,  _
                    ByVal Original_WORKING_TYPE_ID As Integer,  _
                    ByVal Original_SEQ As Integer,  _
                    ByVal Original_COLUMN_NAME As String,  _
                    ByVal Original_DATA_TYPE As Byte,  _
                    ByVal Original_COLUMN_REGEX As String,  _
                    ByVal Original_CAN_EDIT As Boolean,  _
                    ByVal Original_CAN_ADD As Boolean,  _
                    ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WORKING_TYPE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SEQ,Integer)
            If (COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COLUMN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DATA_TYPE,Byte)
            If (COLUMN_REGEX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COLUMN_REGEX")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COLUMN_REGEX,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CAN_EDIT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CAN_ADD,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_WORKING_TYPE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SEQ,Integer)
            If (Original_COLUMN_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_COLUMN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DATA_TYPE,Byte)
            If (Original_COLUMN_REGEX Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COLUMN_REGEX")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_COLUMN_REGEX,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CAN_EDIT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CAN_ADD,Boolean)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WORKING_TYPE_ID As Integer, ByVal SEQ As Integer, ByVal COLUMN_NAME As String, ByVal DATA_TYPE As Byte, ByVal COLUMN_REGEX As String, ByVal CAN_EDIT As Boolean, ByVal CAN_ADD As Boolean, ByVal Original_ID As Integer, ByVal Original_WORKING_TYPE_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_COLUMN_NAME As String, ByVal Original_DATA_TYPE As Byte, ByVal Original_COLUMN_REGEX As String, ByVal Original_CAN_EDIT As Boolean, ByVal Original_CAN_ADD As Boolean) As Integer
            Return Me.Update(WORKING_TYPE_ID, SEQ, COLUMN_NAME, DATA_TYPE, COLUMN_REGEX, CAN_EDIT, CAN_ADD, Original_ID, Original_WORKING_TYPE_ID, Original_SEQ, Original_COLUMN_NAME, Original_DATA_TYPE, Original_COLUMN_REGEX, Original_CAN_EDIT, Original_CAN_ADD, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WORKING_DATA_DATETIMETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WORKING_DATA_DATETIME"
            tableMapping.ColumnMappings.Add("ENGINE_ID", "ENGINE_ID")
            tableMapping.ColumnMappings.Add("WORKING_COLUMNS_ID", "WORKING_COLUMNS_ID")
            tableMapping.ColumnMappings.Add("REV_NO", "REV_NO")
            tableMapping.ColumnMappings.Add("DATA", "DATA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[WORKING_DATA_DATETIME] WHERE (([ENGINE_ID] = @Original_ENGINE_"& _ 
                "ID) AND ([WORKING_COLUMNS_ID] = @Original_WORKING_COLUMNS_ID) AND ([REV_NO] = @O"& _ 
                "riginal_REV_NO) AND ([DATA] = @Original_DATA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[WORKING_DATA_DATETIME] ([ENGINE_ID], [WORKING_COLUMNS_ID], [RE"& _ 
                "V_NO], [DATA]) VALUES (@ENGINE_ID, @WORKING_COLUMNS_ID, @REV_NO, @DATA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " ENGINE_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM WORKING_DATA_DATETIME WHERE (E"& _ 
                "NGINE_ID = @ENGINE_ID) AND (REV_NO = @REV_NO) AND (WORKING_COLUMNS_ID = @WORKING"& _ 
                "_COLUMNS_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[WORKING_DATA_DATETIME] SET [ENGINE_ID] = @ENGINE_ID, [WORKING_COLUM"& _ 
                "NS_ID] = @WORKING_COLUMNS_ID, [REV_NO] = @REV_NO, [DATA] = @DATA WHERE (([ENGINE"& _ 
                "_ID] = @Original_ENGINE_ID) AND ([WORKING_COLUMNS_ID] = @Original_WORKING_COLUMN"& _ 
                "S_ID) AND ([REV_NO] = @Original_REV_NO) AND ([DATA] = @Original_DATA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "ENGINE_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM WORKING_DATA_DATETIME WHERE (EN"& _ 
                "GINE_ID = @ENGINE_ID) AND (REV_NO = @REV_NO) AND (WORKING_COLUMNS_ID = @WORKING_"& _ 
                "COLUMNS_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ENGINE_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM dbo.WORKING_DATA_DATETIME"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_DATETIMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.WORKING_DATA_DATETIMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_DATETIMEDataTable = New iemt_pdt_es01_developmentDataSet.WORKING_DATA_DATETIMEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_DATETIMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WORKING_DATA_DATETIME")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_WORKING_COLUMNS_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REV_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DATA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(WORKING_COLUMNS_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(REV_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As Date, ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WORKING_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REV_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DATA,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_WORKING_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_REV_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DATA,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA As Date, ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Date) As Integer
            Return Me.Update(Original_ENGINE_ID, Original_WORKING_COLUMNS_ID, Original_REV_NO, DATA, Original_ENGINE_ID, Original_WORKING_COLUMNS_ID, Original_REV_NO, Original_DATA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WORKING_DATA_INTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WORKING_DATA_INT"
            tableMapping.ColumnMappings.Add("ENGINE_ID", "ENGINE_ID")
            tableMapping.ColumnMappings.Add("WORKING_COLUMNS_ID", "WORKING_COLUMNS_ID")
            tableMapping.ColumnMappings.Add("REV_NO", "REV_NO")
            tableMapping.ColumnMappings.Add("DATA", "DATA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[WORKING_DATA_INT] WHERE (([ENGINE_ID] = @Original_ENGINE_ID) A"& _ 
                "ND ([WORKING_COLUMNS_ID] = @Original_WORKING_COLUMNS_ID) AND ([REV_NO] = @Origin"& _ 
                "al_REV_NO) AND ([DATA] = @Original_DATA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[WORKING_DATA_INT] ([ENGINE_ID], [WORKING_COLUMNS_ID], [REV_NO]"& _ 
                ", [DATA]) VALUES (@ENGINE_ID, @WORKING_COLUMNS_ID, @REV_NO, @DATA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGI"& _ 
                "NE_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM WORKING_DATA_INT WHERE (ENGINE_ID ="& _ 
                " @ENGINE_ID) AND (REV_NO = @REV_NO) AND (WORKING_COLUMNS_ID = @WORKING_COLUMNS_I"& _ 
                "D)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[WORKING_DATA_INT] SET [ENGINE_ID] = @ENGINE_ID, [WORKING_COLUMNS_ID"& _ 
                "] = @WORKING_COLUMNS_ID, [REV_NO] = @REV_NO, [DATA] = @DATA WHERE (([ENGINE_ID] "& _ 
                "= @Original_ENGINE_ID) AND ([WORKING_COLUMNS_ID] = @Original_WORKING_COLUMNS_ID)"& _ 
                " AND ([REV_NO] = @Original_REV_NO) AND ([DATA] = @Original_DATA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGIN"& _ 
                "E_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM WORKING_DATA_INT WHERE (ENGINE_ID = "& _ 
                "@ENGINE_ID) AND (REV_NO = @REV_NO) AND (WORKING_COLUMNS_ID = @WORKING_COLUMNS_ID"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ENGINE_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM dbo.WORKING_DATA_INT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_INTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.WORKING_DATA_INTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_INTDataTable = New iemt_pdt_es01_developmentDataSet.WORKING_DATA_INTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_INTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WORKING_DATA_INT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_WORKING_COLUMNS_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REV_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DATA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(WORKING_COLUMNS_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(REV_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As Integer, ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WORKING_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REV_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DATA,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_WORKING_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_REV_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DATA,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA As Integer, ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As Integer) As Integer
            Return Me.Update(Original_ENGINE_ID, Original_WORKING_COLUMNS_ID, Original_REV_NO, DATA, Original_ENGINE_ID, Original_WORKING_COLUMNS_ID, Original_REV_NO, Original_DATA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WORKING_DATA_STRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WORKING_DATA_STR"
            tableMapping.ColumnMappings.Add("ENGINE_ID", "ENGINE_ID")
            tableMapping.ColumnMappings.Add("WORKING_COLUMNS_ID", "WORKING_COLUMNS_ID")
            tableMapping.ColumnMappings.Add("REV_NO", "REV_NO")
            tableMapping.ColumnMappings.Add("DATA", "DATA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[WORKING_DATA_STR] WHERE (([ENGINE_ID] = @Original_ENGINE_ID) A"& _ 
                "ND ([WORKING_COLUMNS_ID] = @Original_WORKING_COLUMNS_ID) AND ([REV_NO] = @Origin"& _ 
                "al_REV_NO) AND ([DATA] = @Original_DATA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[WORKING_DATA_STR] ([ENGINE_ID], [WORKING_COLUMNS_ID], [REV_NO]"& _ 
                ", [DATA]) VALUES (@ENGINE_ID, @WORKING_COLUMNS_ID, @REV_NO, @DATA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGI"& _ 
                "NE_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM WORKING_DATA_STR WHERE (ENGINE_ID ="& _ 
                " @ENGINE_ID) AND (REV_NO = @REV_NO) AND (WORKING_COLUMNS_ID = @WORKING_COLUMNS_I"& _ 
                "D)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[WORKING_DATA_STR] SET [ENGINE_ID] = @ENGINE_ID, [WORKING_COLUMNS_ID"& _ 
                "] = @WORKING_COLUMNS_ID, [REV_NO] = @REV_NO, [DATA] = @DATA WHERE (([ENGINE_ID] "& _ 
                "= @Original_ENGINE_ID) AND ([WORKING_COLUMNS_ID] = @Original_WORKING_COLUMNS_ID)"& _ 
                " AND ([REV_NO] = @Original_REV_NO) AND ([DATA] = @Original_DATA));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ENGIN"& _ 
                "E_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM WORKING_DATA_STR WHERE (ENGINE_ID = "& _ 
                "@ENGINE_ID) AND (REV_NO = @REV_NO) AND (WORKING_COLUMNS_ID = @WORKING_COLUMNS_ID"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_COLUMNS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_COLUMNS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REV_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REV_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ENGINE_ID, WORKING_COLUMNS_ID, REV_NO, DATA FROM dbo.WORKING_DATA_STR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_STRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.WORKING_DATA_STRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_STRDataTable = New iemt_pdt_es01_developmentDataSet.WORKING_DATA_STRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_DATA_STRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WORKING_DATA_STR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_WORKING_COLUMNS_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_REV_NO,Integer)
            If (Original_DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(WORKING_COLUMNS_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(REV_NO,Integer)
            If (DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENGINE_ID As Integer, ByVal WORKING_COLUMNS_ID As Integer, ByVal REV_NO As Integer, ByVal DATA As String, ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WORKING_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(REV_NO,Integer)
            If (DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DATA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ENGINE_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_WORKING_COLUMNS_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_REV_NO,Integer)
            If (Original_DATA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATA")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DATA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATA As String, ByVal Original_ENGINE_ID As Integer, ByVal Original_WORKING_COLUMNS_ID As Integer, ByVal Original_REV_NO As Integer, ByVal Original_DATA As String) As Integer
            Return Me.Update(Original_ENGINE_ID, Original_WORKING_COLUMNS_ID, Original_REV_NO, DATA, Original_ENGINE_ID, Original_WORKING_COLUMNS_ID, Original_REV_NO, Original_DATA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WORKING_TYPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WORKING_TYPE"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("SEQ", "SEQ")
            tableMapping.ColumnMappings.Add("WORKING_TYPE_NAME", "WORKING_TYPE_NAME")
            tableMapping.ColumnMappings.Add("MAX_REV", "MAX_REV")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[WORKING_TYPE] WHERE (([ID] = @Original_ID) AND ([SEQ] = @Origi"& _ 
                "nal_SEQ) AND ([WORKING_TYPE_NAME] = @Original_WORKING_TYPE_NAME) AND ([MAX_REV] "& _ 
                "= @Original_MAX_REV))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_TYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_TYPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAX_REV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAX_REV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[WORKING_TYPE] ([SEQ], [WORKING_TYPE_NAME], [MAX_REV]) VALUES ("& _ 
                "@SEQ, @WORKING_TYPE_NAME, @MAX_REV);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, SEQ, WORKING_TYPE_NAME, MAX_REV"& _ 
                " FROM WORKING_TYPE WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_TYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_TYPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAX_REV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAX_REV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[WORKING_TYPE] SET [SEQ] = @SEQ, [WORKING_TYPE_NAME] = @WORKING_TYPE"& _ 
                "_NAME, [MAX_REV] = @MAX_REV WHERE (([ID] = @Original_ID) AND ([SEQ] = @Original_"& _ 
                "SEQ) AND ([WORKING_TYPE_NAME] = @Original_WORKING_TYPE_NAME) AND ([MAX_REV] = @O"& _ 
                "riginal_MAX_REV));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, SEQ, WORKING_TYPE_NAME, MAX_REV FROM WORKING_TYPE"& _ 
                " WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WORKING_TYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_TYPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAX_REV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAX_REV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WORKING_TYPE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WORKING_TYPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAX_REV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAX_REV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.iemt_pdt_es01_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, SEQ, WORKING_TYPE_NAME, MAX_REV FROM dbo.WORKING_TYPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_TYPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As iemt_pdt_es01_developmentDataSet.WORKING_TYPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As iemt_pdt_es01_developmentDataSet.WORKING_TYPEDataTable = New iemt_pdt_es01_developmentDataSet.WORKING_TYPEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As iemt_pdt_es01_developmentDataSet.WORKING_TYPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WORKING_TYPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_WORKING_TYPE_NAME As String, ByVal Original_MAX_REV As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEQ,Integer)
            If (Original_WORKING_TYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WORKING_TYPE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_WORKING_TYPE_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MAX_REV,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SEQ As Integer, ByVal WORKING_TYPE_NAME As String, ByVal MAX_REV As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SEQ,Integer)
            If (WORKING_TYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WORKING_TYPE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(WORKING_TYPE_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MAX_REV,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEQ As Integer, ByVal WORKING_TYPE_NAME As String, ByVal MAX_REV As Integer, ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_WORKING_TYPE_NAME As String, ByVal Original_MAX_REV As Integer, ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SEQ,Integer)
            If (WORKING_TYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WORKING_TYPE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WORKING_TYPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MAX_REV,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SEQ,Integer)
            If (Original_WORKING_TYPE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WORKING_TYPE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_WORKING_TYPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MAX_REV,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SEQ As Integer, ByVal WORKING_TYPE_NAME As String, ByVal MAX_REV As Integer, ByVal Original_ID As Integer, ByVal Original_SEQ As Integer, ByVal Original_WORKING_TYPE_NAME As String, ByVal Original_MAX_REV As Integer) As Integer
            Return Me.Update(SEQ, WORKING_TYPE_NAME, MAX_REV, Original_ID, Original_SEQ, Original_WORKING_TYPE_NAME, Original_MAX_REV, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _bALL_ENGINE_LISTTableAdapter As BALL_ENGINE_LISTTableAdapter
        
        Private _eNGINE_LISTTableAdapter As ENGINE_LISTTableAdapter
        
        Private _iMPORT_CELL_MAPPINGTableAdapter As IMPORT_CELL_MAPPINGTableAdapter
        
        Private _iMPORT_ENGINE_MAPPINGTableAdapter As IMPORT_ENGINE_MAPPINGTableAdapter
        
        Private _schema_migrationsTableAdapter As schema_migrationsTableAdapter
        
        Private _schema_migrations_comparerTableAdapter As schema_migrations_comparerTableAdapter
        
        Private _tRACE_COLUMNSTableAdapter As TRACE_COLUMNSTableAdapter
        
        Private _tRACE_DATA_DATETIMETableAdapter As TRACE_DATA_DATETIMETableAdapter
        
        Private _tRACE_DATA_INTTableAdapter As TRACE_DATA_INTTableAdapter
        
        Private _tRACE_DATA_STRTableAdapter As TRACE_DATA_STRTableAdapter
        
        Private _wORKING_COLUMNSTableAdapter As WORKING_COLUMNSTableAdapter
        
        Private _wORKING_DATA_DATETIMETableAdapter As WORKING_DATA_DATETIMETableAdapter
        
        Private _wORKING_DATA_INTTableAdapter As WORKING_DATA_INTTableAdapter
        
        Private _wORKING_DATA_STRTableAdapter As WORKING_DATA_STRTableAdapter
        
        Private _wORKING_TYPETableAdapter As WORKING_TYPETableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BALL_ENGINE_LISTTableAdapter() As BALL_ENGINE_LISTTableAdapter
            Get
                Return Me._bALL_ENGINE_LISTTableAdapter
            End Get
            Set
                Me._bALL_ENGINE_LISTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ENGINE_LISTTableAdapter() As ENGINE_LISTTableAdapter
            Get
                Return Me._eNGINE_LISTTableAdapter
            End Get
            Set
                Me._eNGINE_LISTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IMPORT_CELL_MAPPINGTableAdapter() As IMPORT_CELL_MAPPINGTableAdapter
            Get
                Return Me._iMPORT_CELL_MAPPINGTableAdapter
            End Get
            Set
                Me._iMPORT_CELL_MAPPINGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IMPORT_ENGINE_MAPPINGTableAdapter() As IMPORT_ENGINE_MAPPINGTableAdapter
            Get
                Return Me._iMPORT_ENGINE_MAPPINGTableAdapter
            End Get
            Set
                Me._iMPORT_ENGINE_MAPPINGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property schema_migrationsTableAdapter() As schema_migrationsTableAdapter
            Get
                Return Me._schema_migrationsTableAdapter
            End Get
            Set
                Me._schema_migrationsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property schema_migrations_comparerTableAdapter() As schema_migrations_comparerTableAdapter
            Get
                Return Me._schema_migrations_comparerTableAdapter
            End Get
            Set
                Me._schema_migrations_comparerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRACE_COLUMNSTableAdapter() As TRACE_COLUMNSTableAdapter
            Get
                Return Me._tRACE_COLUMNSTableAdapter
            End Get
            Set
                Me._tRACE_COLUMNSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRACE_DATA_DATETIMETableAdapter() As TRACE_DATA_DATETIMETableAdapter
            Get
                Return Me._tRACE_DATA_DATETIMETableAdapter
            End Get
            Set
                Me._tRACE_DATA_DATETIMETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRACE_DATA_INTTableAdapter() As TRACE_DATA_INTTableAdapter
            Get
                Return Me._tRACE_DATA_INTTableAdapter
            End Get
            Set
                Me._tRACE_DATA_INTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRACE_DATA_STRTableAdapter() As TRACE_DATA_STRTableAdapter
            Get
                Return Me._tRACE_DATA_STRTableAdapter
            End Get
            Set
                Me._tRACE_DATA_STRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WORKING_COLUMNSTableAdapter() As WORKING_COLUMNSTableAdapter
            Get
                Return Me._wORKING_COLUMNSTableAdapter
            End Get
            Set
                Me._wORKING_COLUMNSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WORKING_DATA_DATETIMETableAdapter() As WORKING_DATA_DATETIMETableAdapter
            Get
                Return Me._wORKING_DATA_DATETIMETableAdapter
            End Get
            Set
                Me._wORKING_DATA_DATETIMETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WORKING_DATA_INTTableAdapter() As WORKING_DATA_INTTableAdapter
            Get
                Return Me._wORKING_DATA_INTTableAdapter
            End Get
            Set
                Me._wORKING_DATA_INTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WORKING_DATA_STRTableAdapter() As WORKING_DATA_STRTableAdapter
            Get
                Return Me._wORKING_DATA_STRTableAdapter
            End Get
            Set
                Me._wORKING_DATA_STRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WORKING_TYPETableAdapter() As WORKING_TYPETableAdapter
            Get
                Return Me._wORKING_TYPETableAdapter
            End Get
            Set
                Me._wORKING_TYPETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._bALL_ENGINE_LISTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._bALL_ENGINE_LISTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._bALL_ENGINE_LISTTableAdapter.Connection
                End If
                If ((Not (Me._eNGINE_LISTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eNGINE_LISTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eNGINE_LISTTableAdapter.Connection
                End If
                If ((Not (Me._iMPORT_CELL_MAPPINGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iMPORT_CELL_MAPPINGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iMPORT_CELL_MAPPINGTableAdapter.Connection
                End If
                If ((Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iMPORT_ENGINE_MAPPINGTableAdapter.Connection
                End If
                If ((Not (Me._schema_migrationsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._schema_migrationsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._schema_migrationsTableAdapter.Connection
                End If
                If ((Not (Me._schema_migrations_comparerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._schema_migrations_comparerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._schema_migrations_comparerTableAdapter.Connection
                End If
                If ((Not (Me._tRACE_COLUMNSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRACE_COLUMNSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRACE_COLUMNSTableAdapter.Connection
                End If
                If ((Not (Me._tRACE_DATA_DATETIMETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRACE_DATA_DATETIMETableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRACE_DATA_DATETIMETableAdapter.Connection
                End If
                If ((Not (Me._tRACE_DATA_INTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRACE_DATA_INTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRACE_DATA_INTTableAdapter.Connection
                End If
                If ((Not (Me._tRACE_DATA_STRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRACE_DATA_STRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRACE_DATA_STRTableAdapter.Connection
                End If
                If ((Not (Me._wORKING_COLUMNSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wORKING_COLUMNSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wORKING_COLUMNSTableAdapter.Connection
                End If
                If ((Not (Me._wORKING_DATA_DATETIMETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wORKING_DATA_DATETIMETableAdapter.Connection) Is Nothing)) Then
                    Return Me._wORKING_DATA_DATETIMETableAdapter.Connection
                End If
                If ((Not (Me._wORKING_DATA_INTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wORKING_DATA_INTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wORKING_DATA_INTTableAdapter.Connection
                End If
                If ((Not (Me._wORKING_DATA_STRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wORKING_DATA_STRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wORKING_DATA_STRTableAdapter.Connection
                End If
                If ((Not (Me._wORKING_TYPETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wORKING_TYPETableAdapter.Connection) Is Nothing)) Then
                    Return Me._wORKING_TYPETableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._bALL_ENGINE_LISTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eNGINE_LISTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iMPORT_CELL_MAPPINGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._schema_migrationsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._schema_migrations_comparerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRACE_COLUMNSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRACE_DATA_DATETIMETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRACE_DATA_INTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRACE_DATA_STRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wORKING_COLUMNSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wORKING_DATA_DATETIMETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wORKING_DATA_INTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wORKING_DATA_STRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wORKING_TYPETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As iemt_pdt_es01_developmentDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._wORKING_TYPETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WORKING_TYPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wORKING_TYPETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eNGINE_LISTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ENGINE_LIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eNGINE_LISTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRACE_COLUMNSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRACE_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRACE_COLUMNSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wORKING_COLUMNSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WORKING_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wORKING_COLUMNSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._bALL_ENGINE_LISTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BALL_ENGINE_LIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._bALL_ENGINE_LISTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iMPORT_CELL_MAPPINGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IMPORT_CELL_MAPPING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iMPORT_CELL_MAPPINGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IMPORT_ENGINE_MAPPING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iMPORT_ENGINE_MAPPINGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._schema_migrationsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.schema_migrations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._schema_migrationsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._schema_migrations_comparerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.schema_migrations_comparer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._schema_migrations_comparerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_DATETIMETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_DATETIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_DATETIMETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_INTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_INT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_INTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_STRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_STRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wORKING_DATA_DATETIMETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_DATETIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_DATETIMETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wORKING_DATA_INTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_INT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_INTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wORKING_DATA_STRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_STRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As iemt_pdt_es01_developmentDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._wORKING_TYPETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WORKING_TYPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wORKING_TYPETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eNGINE_LISTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ENGINE_LIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eNGINE_LISTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRACE_COLUMNSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRACE_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRACE_COLUMNSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wORKING_COLUMNSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WORKING_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wORKING_COLUMNSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._bALL_ENGINE_LISTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BALL_ENGINE_LIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._bALL_ENGINE_LISTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iMPORT_CELL_MAPPINGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IMPORT_CELL_MAPPING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iMPORT_CELL_MAPPINGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IMPORT_ENGINE_MAPPING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iMPORT_ENGINE_MAPPINGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._schema_migrationsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.schema_migrations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._schema_migrationsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._schema_migrations_comparerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.schema_migrations_comparer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._schema_migrations_comparerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_DATETIMETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_DATETIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_DATETIMETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_INTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_INT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_INTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_STRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_STRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wORKING_DATA_DATETIMETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_DATETIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_DATETIMETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wORKING_DATA_INTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_INT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_INTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wORKING_DATA_STRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_STRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As iemt_pdt_es01_developmentDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._wORKING_DATA_STRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_STRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wORKING_DATA_INTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_INT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_INTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wORKING_DATA_DATETIMETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WORKING_DATA_DATETIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wORKING_DATA_DATETIMETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_STRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_STR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_STRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_INTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_INT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_INTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRACE_DATA_DATETIMETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRACE_DATA_DATETIME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRACE_DATA_DATETIMETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._schema_migrations_comparerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.schema_migrations_comparer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._schema_migrations_comparerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._schema_migrationsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.schema_migrations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._schema_migrationsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IMPORT_ENGINE_MAPPING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iMPORT_ENGINE_MAPPINGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iMPORT_CELL_MAPPINGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IMPORT_CELL_MAPPING.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iMPORT_CELL_MAPPINGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._bALL_ENGINE_LISTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BALL_ENGINE_LIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._bALL_ENGINE_LISTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wORKING_COLUMNSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WORKING_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wORKING_COLUMNSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tRACE_COLUMNSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRACE_COLUMNS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRACE_COLUMNSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eNGINE_LISTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ENGINE_LIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eNGINE_LISTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wORKING_TYPETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WORKING_TYPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wORKING_TYPETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As iemt_pdt_es01_developmentDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._bALL_ENGINE_LISTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._bALL_ENGINE_LISTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eNGINE_LISTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eNGINE_LISTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iMPORT_CELL_MAPPINGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iMPORT_CELL_MAPPINGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iMPORT_ENGINE_MAPPINGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._schema_migrationsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._schema_migrationsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._schema_migrations_comparerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._schema_migrations_comparerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRACE_COLUMNSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRACE_COLUMNSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRACE_DATA_DATETIMETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRACE_DATA_DATETIMETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRACE_DATA_INTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRACE_DATA_INTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRACE_DATA_STRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRACE_DATA_STRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wORKING_COLUMNSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wORKING_COLUMNSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wORKING_DATA_DATETIMETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wORKING_DATA_DATETIMETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wORKING_DATA_INTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wORKING_DATA_INTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wORKING_DATA_STRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wORKING_DATA_STRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wORKING_TYPETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wORKING_TYPETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._bALL_ENGINE_LISTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._bALL_ENGINE_LISTTableAdapter, Me._bALL_ENGINE_LISTTableAdapter.Connection)
                    Me._bALL_ENGINE_LISTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._bALL_ENGINE_LISTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._bALL_ENGINE_LISTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._bALL_ENGINE_LISTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._bALL_ENGINE_LISTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eNGINE_LISTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eNGINE_LISTTableAdapter, Me._eNGINE_LISTTableAdapter.Connection)
                    Me._eNGINE_LISTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eNGINE_LISTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eNGINE_LISTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eNGINE_LISTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eNGINE_LISTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iMPORT_CELL_MAPPINGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iMPORT_CELL_MAPPINGTableAdapter, Me._iMPORT_CELL_MAPPINGTableAdapter.Connection)
                    Me._iMPORT_CELL_MAPPINGTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iMPORT_CELL_MAPPINGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iMPORT_CELL_MAPPINGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iMPORT_CELL_MAPPINGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iMPORT_CELL_MAPPINGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iMPORT_ENGINE_MAPPINGTableAdapter, Me._iMPORT_ENGINE_MAPPINGTableAdapter.Connection)
                    Me._iMPORT_ENGINE_MAPPINGTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iMPORT_ENGINE_MAPPINGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iMPORT_ENGINE_MAPPINGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iMPORT_ENGINE_MAPPINGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iMPORT_ENGINE_MAPPINGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._schema_migrationsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._schema_migrationsTableAdapter, Me._schema_migrationsTableAdapter.Connection)
                    Me._schema_migrationsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._schema_migrationsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._schema_migrationsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._schema_migrationsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._schema_migrationsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._schema_migrations_comparerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._schema_migrations_comparerTableAdapter, Me._schema_migrations_comparerTableAdapter.Connection)
                    Me._schema_migrations_comparerTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._schema_migrations_comparerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._schema_migrations_comparerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._schema_migrations_comparerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._schema_migrations_comparerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRACE_COLUMNSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRACE_COLUMNSTableAdapter, Me._tRACE_COLUMNSTableAdapter.Connection)
                    Me._tRACE_COLUMNSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRACE_COLUMNSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRACE_COLUMNSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRACE_COLUMNSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRACE_COLUMNSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRACE_DATA_DATETIMETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRACE_DATA_DATETIMETableAdapter, Me._tRACE_DATA_DATETIMETableAdapter.Connection)
                    Me._tRACE_DATA_DATETIMETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRACE_DATA_DATETIMETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRACE_DATA_DATETIMETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRACE_DATA_DATETIMETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRACE_DATA_DATETIMETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRACE_DATA_INTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRACE_DATA_INTTableAdapter, Me._tRACE_DATA_INTTableAdapter.Connection)
                    Me._tRACE_DATA_INTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRACE_DATA_INTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRACE_DATA_INTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRACE_DATA_INTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRACE_DATA_INTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRACE_DATA_STRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRACE_DATA_STRTableAdapter, Me._tRACE_DATA_STRTableAdapter.Connection)
                    Me._tRACE_DATA_STRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tRACE_DATA_STRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tRACE_DATA_STRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRACE_DATA_STRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRACE_DATA_STRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wORKING_COLUMNSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wORKING_COLUMNSTableAdapter, Me._wORKING_COLUMNSTableAdapter.Connection)
                    Me._wORKING_COLUMNSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_COLUMNSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._wORKING_COLUMNSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wORKING_COLUMNSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wORKING_COLUMNSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wORKING_DATA_DATETIMETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wORKING_DATA_DATETIMETableAdapter, Me._wORKING_DATA_DATETIMETableAdapter.Connection)
                    Me._wORKING_DATA_DATETIMETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_DATA_DATETIMETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._wORKING_DATA_DATETIMETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wORKING_DATA_DATETIMETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wORKING_DATA_DATETIMETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wORKING_DATA_INTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wORKING_DATA_INTTableAdapter, Me._wORKING_DATA_INTTableAdapter.Connection)
                    Me._wORKING_DATA_INTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_DATA_INTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._wORKING_DATA_INTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wORKING_DATA_INTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wORKING_DATA_INTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wORKING_DATA_STRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wORKING_DATA_STRTableAdapter, Me._wORKING_DATA_STRTableAdapter.Connection)
                    Me._wORKING_DATA_STRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_DATA_STRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._wORKING_DATA_STRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wORKING_DATA_STRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wORKING_DATA_STRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wORKING_TYPETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wORKING_TYPETableAdapter, Me._wORKING_TYPETableAdapter.Connection)
                    Me._wORKING_TYPETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_TYPETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._wORKING_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wORKING_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wORKING_TYPETableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._bALL_ENGINE_LISTTableAdapter) Is Nothing) Then
                    Me._bALL_ENGINE_LISTTableAdapter.Connection = CType(revertConnections(Me._bALL_ENGINE_LISTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._bALL_ENGINE_LISTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eNGINE_LISTTableAdapter) Is Nothing) Then
                    Me._eNGINE_LISTTableAdapter.Connection = CType(revertConnections(Me._eNGINE_LISTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eNGINE_LISTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iMPORT_CELL_MAPPINGTableAdapter) Is Nothing) Then
                    Me._iMPORT_CELL_MAPPINGTableAdapter.Connection = CType(revertConnections(Me._iMPORT_CELL_MAPPINGTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iMPORT_CELL_MAPPINGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iMPORT_ENGINE_MAPPINGTableAdapter) Is Nothing) Then
                    Me._iMPORT_ENGINE_MAPPINGTableAdapter.Connection = CType(revertConnections(Me._iMPORT_ENGINE_MAPPINGTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iMPORT_ENGINE_MAPPINGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._schema_migrationsTableAdapter) Is Nothing) Then
                    Me._schema_migrationsTableAdapter.Connection = CType(revertConnections(Me._schema_migrationsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._schema_migrationsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._schema_migrations_comparerTableAdapter) Is Nothing) Then
                    Me._schema_migrations_comparerTableAdapter.Connection = CType(revertConnections(Me._schema_migrations_comparerTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._schema_migrations_comparerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRACE_COLUMNSTableAdapter) Is Nothing) Then
                    Me._tRACE_COLUMNSTableAdapter.Connection = CType(revertConnections(Me._tRACE_COLUMNSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRACE_COLUMNSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRACE_DATA_DATETIMETableAdapter) Is Nothing) Then
                    Me._tRACE_DATA_DATETIMETableAdapter.Connection = CType(revertConnections(Me._tRACE_DATA_DATETIMETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRACE_DATA_DATETIMETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRACE_DATA_INTTableAdapter) Is Nothing) Then
                    Me._tRACE_DATA_INTTableAdapter.Connection = CType(revertConnections(Me._tRACE_DATA_INTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRACE_DATA_INTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRACE_DATA_STRTableAdapter) Is Nothing) Then
                    Me._tRACE_DATA_STRTableAdapter.Connection = CType(revertConnections(Me._tRACE_DATA_STRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tRACE_DATA_STRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wORKING_COLUMNSTableAdapter) Is Nothing) Then
                    Me._wORKING_COLUMNSTableAdapter.Connection = CType(revertConnections(Me._wORKING_COLUMNSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_COLUMNSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wORKING_DATA_DATETIMETableAdapter) Is Nothing) Then
                    Me._wORKING_DATA_DATETIMETableAdapter.Connection = CType(revertConnections(Me._wORKING_DATA_DATETIMETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_DATA_DATETIMETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wORKING_DATA_INTTableAdapter) Is Nothing) Then
                    Me._wORKING_DATA_INTTableAdapter.Connection = CType(revertConnections(Me._wORKING_DATA_INTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_DATA_INTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wORKING_DATA_STRTableAdapter) Is Nothing) Then
                    Me._wORKING_DATA_STRTableAdapter.Connection = CType(revertConnections(Me._wORKING_DATA_STRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_DATA_STRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wORKING_TYPETableAdapter) Is Nothing) Then
                    Me._wORKING_TYPETableAdapter.Connection = CType(revertConnections(Me._wORKING_TYPETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._wORKING_TYPETableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
