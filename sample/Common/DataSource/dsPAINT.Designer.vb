'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPAINT"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPAINT
    Inherits Global.System.Data.DataSet
    
    Private tabledtMODEL_OPTION_ROW As dtMODEL_OPTION_ROWDataTable
    
    Private tabledtSKIT_MST As dtSKIT_MSTDataTable
    
    Private tabledtWBS_ON As dtWBS_ONDataTable
    
    Private tabledtLANE_MST As dtLANE_MSTDataTable
    
    Private tabledtMODEL_OPTION_CELL As dtMODEL_OPTION_CELLDataTable
    
    Private tabledtINSTRUCTION_DATA As dtINSTRUCTION_DATADataTable
    
    Private tabledtPRODUCTION_DAT As dtPRODUCTION_DATDataTable
    
    Private tabledtOPTION_MST As dtOPTION_MSTDataTable
    
    Private tabledtPAINT_CELL As dtPAINT_CELLDataTable
    
    Private tabledtPAINT_PROGRESS As dtPAINT_PROGRESSDataTable
    
    Private tabledtPAINT_SHOP As dtPAINT_SHOPDataTable
    
    Private tabledtPROCESS_OPTION_CELL As dtPROCESS_OPTION_CELLDataTable
    
    Private tabledtPROCESS_MST As dtPROCESS_MSTDataTable
    
    Private tabledtPLC_MST As dtPLC_MSTDataTable
    
    Private tabledtPROCESS_GROUP_MST As dtPROCESS_GROUP_MSTDataTable
    
    Private tabledtPROCESS_LINKAGE As dtPROCESS_LINKAGEDataTable
    
    Private tabledtLOG_DAT As dtLOG_DATDataTable
    
    Private tabledtFINISHING_LINE As dtFINISHING_LINEDataTable
    
    Private tabledtMESSAGE_MST As dtMESSAGE_MSTDataTable
    
    Private tabledtPlcStatus As dtPlcStatusDataTable
    
    Private tabledtPBRPassResult As dtPBRPassResultDataTable
    
    Private tabledtProcessType As dtProcessTypeDataTable
    
    Private relationFK_T_WBS_ON_LANE_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID As Global.System.Data.DataRelation
    
    Private relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1 As Global.System.Data.DataRelation
    
    Private relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT As Global.System.Data.DataRelation
    
    Private relationFK_T_MODEL_OPTION_CELL_OPTION_ID As Global.System.Data.DataRelation
    
    Private relationdtOPTION_MST_dtINSTRUCTION_DATA As Global.System.Data.DataRelation
    
    Private relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_OPTION_CELL_OPTION_ID As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_OPTION_CELL_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_PLC_MST_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_MST_PROCESS_GROUP_ID As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_LINKAGE_TO_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationdtPROCESS_MST_dtLOG_DAT As Global.System.Data.DataRelation
    
    Private relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1 As Global.System.Data.DataRelation
    
    Private relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1 As Global.System.Data.DataRelation
    
    Private relationdtProcessType_dtPROCESS_MST As Global.System.Data.DataRelation
    
    Private relationFK_T_PAINT_CELL_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtMODEL_OPTION_ROW")) Is Nothing) Then
                MyBase.Tables.Add(New dtMODEL_OPTION_ROWDataTable(ds.Tables("dtMODEL_OPTION_ROW")))
            End If
            If (Not (ds.Tables("dtSKIT_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtSKIT_MSTDataTable(ds.Tables("dtSKIT_MST")))
            End If
            If (Not (ds.Tables("dtWBS_ON")) Is Nothing) Then
                MyBase.Tables.Add(New dtWBS_ONDataTable(ds.Tables("dtWBS_ON")))
            End If
            If (Not (ds.Tables("dtLANE_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtLANE_MSTDataTable(ds.Tables("dtLANE_MST")))
            End If
            If (Not (ds.Tables("dtMODEL_OPTION_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtMODEL_OPTION_CELLDataTable(ds.Tables("dtMODEL_OPTION_CELL")))
            End If
            If (Not (ds.Tables("dtINSTRUCTION_DATA")) Is Nothing) Then
                MyBase.Tables.Add(New dtINSTRUCTION_DATADataTable(ds.Tables("dtINSTRUCTION_DATA")))
            End If
            If (Not (ds.Tables("dtPRODUCTION_DAT")) Is Nothing) Then
                MyBase.Tables.Add(New dtPRODUCTION_DATDataTable(ds.Tables("dtPRODUCTION_DAT")))
            End If
            If (Not (ds.Tables("dtOPTION_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtOPTION_MSTDataTable(ds.Tables("dtOPTION_MST")))
            End If
            If (Not (ds.Tables("dtPAINT_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtPAINT_CELLDataTable(ds.Tables("dtPAINT_CELL")))
            End If
            If (Not (ds.Tables("dtPAINT_PROGRESS")) Is Nothing) Then
                MyBase.Tables.Add(New dtPAINT_PROGRESSDataTable(ds.Tables("dtPAINT_PROGRESS")))
            End If
            If (Not (ds.Tables("dtPAINT_SHOP")) Is Nothing) Then
                MyBase.Tables.Add(New dtPAINT_SHOPDataTable(ds.Tables("dtPAINT_SHOP")))
            End If
            If (Not (ds.Tables("dtPROCESS_OPTION_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_OPTION_CELLDataTable(ds.Tables("dtPROCESS_OPTION_CELL")))
            End If
            If (Not (ds.Tables("dtPROCESS_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_MSTDataTable(ds.Tables("dtPROCESS_MST")))
            End If
            If (Not (ds.Tables("dtPLC_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPLC_MSTDataTable(ds.Tables("dtPLC_MST")))
            End If
            If (Not (ds.Tables("dtPROCESS_GROUP_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_GROUP_MSTDataTable(ds.Tables("dtPROCESS_GROUP_MST")))
            End If
            If (Not (ds.Tables("dtPROCESS_LINKAGE")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_LINKAGEDataTable(ds.Tables("dtPROCESS_LINKAGE")))
            End If
            If (Not (ds.Tables("dtLOG_DAT")) Is Nothing) Then
                MyBase.Tables.Add(New dtLOG_DATDataTable(ds.Tables("dtLOG_DAT")))
            End If
            If (Not (ds.Tables("dtFINISHING_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New dtFINISHING_LINEDataTable(ds.Tables("dtFINISHING_LINE")))
            End If
            If (Not (ds.Tables("dtMESSAGE_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtMESSAGE_MSTDataTable(ds.Tables("dtMESSAGE_MST")))
            End If
            If (Not (ds.Tables("dtPlcStatus")) Is Nothing) Then
                MyBase.Tables.Add(New dtPlcStatusDataTable(ds.Tables("dtPlcStatus")))
            End If
            If (Not (ds.Tables("dtPBRPassResult")) Is Nothing) Then
                MyBase.Tables.Add(New dtPBRPassResultDataTable(ds.Tables("dtPBRPassResult")))
            End If
            If (Not (ds.Tables("dtProcessType")) Is Nothing) Then
                MyBase.Tables.Add(New dtProcessTypeDataTable(ds.Tables("dtProcessType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtMODEL_OPTION_ROW() As dtMODEL_OPTION_ROWDataTable
        Get
            Return Me.tabledtMODEL_OPTION_ROW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtSKIT_MST() As dtSKIT_MSTDataTable
        Get
            Return Me.tabledtSKIT_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtWBS_ON() As dtWBS_ONDataTable
        Get
            Return Me.tabledtWBS_ON
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtLANE_MST() As dtLANE_MSTDataTable
        Get
            Return Me.tabledtLANE_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtMODEL_OPTION_CELL() As dtMODEL_OPTION_CELLDataTable
        Get
            Return Me.tabledtMODEL_OPTION_CELL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtINSTRUCTION_DATA() As dtINSTRUCTION_DATADataTable
        Get
            Return Me.tabledtINSTRUCTION_DATA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPRODUCTION_DAT() As dtPRODUCTION_DATDataTable
        Get
            Return Me.tabledtPRODUCTION_DAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtOPTION_MST() As dtOPTION_MSTDataTable
        Get
            Return Me.tabledtOPTION_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPAINT_CELL() As dtPAINT_CELLDataTable
        Get
            Return Me.tabledtPAINT_CELL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPAINT_PROGRESS() As dtPAINT_PROGRESSDataTable
        Get
            Return Me.tabledtPAINT_PROGRESS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPAINT_SHOP() As dtPAINT_SHOPDataTable
        Get
            Return Me.tabledtPAINT_SHOP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPROCESS_OPTION_CELL() As dtPROCESS_OPTION_CELLDataTable
        Get
            Return Me.tabledtPROCESS_OPTION_CELL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPROCESS_MST() As dtPROCESS_MSTDataTable
        Get
            Return Me.tabledtPROCESS_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPLC_MST() As dtPLC_MSTDataTable
        Get
            Return Me.tabledtPLC_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPROCESS_GROUP_MST() As dtPROCESS_GROUP_MSTDataTable
        Get
            Return Me.tabledtPROCESS_GROUP_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPROCESS_LINKAGE() As dtPROCESS_LINKAGEDataTable
        Get
            Return Me.tabledtPROCESS_LINKAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtLOG_DAT() As dtLOG_DATDataTable
        Get
            Return Me.tabledtLOG_DAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtFINISHING_LINE() As dtFINISHING_LINEDataTable
        Get
            Return Me.tabledtFINISHING_LINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtMESSAGE_MST() As dtMESSAGE_MSTDataTable
        Get
            Return Me.tabledtMESSAGE_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPlcStatus() As dtPlcStatusDataTable
        Get
            Return Me.tabledtPlcStatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPBRPassResult() As dtPBRPassResultDataTable
        Get
            Return Me.tabledtPBRPassResult
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtProcessType() As dtProcessTypeDataTable
        Get
            Return Me.tabledtProcessType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPAINT = CType(MyBase.Clone,dsPAINT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtMODEL_OPTION_ROW")) Is Nothing) Then
                MyBase.Tables.Add(New dtMODEL_OPTION_ROWDataTable(ds.Tables("dtMODEL_OPTION_ROW")))
            End If
            If (Not (ds.Tables("dtSKIT_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtSKIT_MSTDataTable(ds.Tables("dtSKIT_MST")))
            End If
            If (Not (ds.Tables("dtWBS_ON")) Is Nothing) Then
                MyBase.Tables.Add(New dtWBS_ONDataTable(ds.Tables("dtWBS_ON")))
            End If
            If (Not (ds.Tables("dtLANE_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtLANE_MSTDataTable(ds.Tables("dtLANE_MST")))
            End If
            If (Not (ds.Tables("dtMODEL_OPTION_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtMODEL_OPTION_CELLDataTable(ds.Tables("dtMODEL_OPTION_CELL")))
            End If
            If (Not (ds.Tables("dtINSTRUCTION_DATA")) Is Nothing) Then
                MyBase.Tables.Add(New dtINSTRUCTION_DATADataTable(ds.Tables("dtINSTRUCTION_DATA")))
            End If
            If (Not (ds.Tables("dtPRODUCTION_DAT")) Is Nothing) Then
                MyBase.Tables.Add(New dtPRODUCTION_DATDataTable(ds.Tables("dtPRODUCTION_DAT")))
            End If
            If (Not (ds.Tables("dtOPTION_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtOPTION_MSTDataTable(ds.Tables("dtOPTION_MST")))
            End If
            If (Not (ds.Tables("dtPAINT_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtPAINT_CELLDataTable(ds.Tables("dtPAINT_CELL")))
            End If
            If (Not (ds.Tables("dtPAINT_PROGRESS")) Is Nothing) Then
                MyBase.Tables.Add(New dtPAINT_PROGRESSDataTable(ds.Tables("dtPAINT_PROGRESS")))
            End If
            If (Not (ds.Tables("dtPAINT_SHOP")) Is Nothing) Then
                MyBase.Tables.Add(New dtPAINT_SHOPDataTable(ds.Tables("dtPAINT_SHOP")))
            End If
            If (Not (ds.Tables("dtPROCESS_OPTION_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_OPTION_CELLDataTable(ds.Tables("dtPROCESS_OPTION_CELL")))
            End If
            If (Not (ds.Tables("dtPROCESS_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_MSTDataTable(ds.Tables("dtPROCESS_MST")))
            End If
            If (Not (ds.Tables("dtPLC_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPLC_MSTDataTable(ds.Tables("dtPLC_MST")))
            End If
            If (Not (ds.Tables("dtPROCESS_GROUP_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_GROUP_MSTDataTable(ds.Tables("dtPROCESS_GROUP_MST")))
            End If
            If (Not (ds.Tables("dtPROCESS_LINKAGE")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_LINKAGEDataTable(ds.Tables("dtPROCESS_LINKAGE")))
            End If
            If (Not (ds.Tables("dtLOG_DAT")) Is Nothing) Then
                MyBase.Tables.Add(New dtLOG_DATDataTable(ds.Tables("dtLOG_DAT")))
            End If
            If (Not (ds.Tables("dtFINISHING_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New dtFINISHING_LINEDataTable(ds.Tables("dtFINISHING_LINE")))
            End If
            If (Not (ds.Tables("dtMESSAGE_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtMESSAGE_MSTDataTable(ds.Tables("dtMESSAGE_MST")))
            End If
            If (Not (ds.Tables("dtPlcStatus")) Is Nothing) Then
                MyBase.Tables.Add(New dtPlcStatusDataTable(ds.Tables("dtPlcStatus")))
            End If
            If (Not (ds.Tables("dtPBRPassResult")) Is Nothing) Then
                MyBase.Tables.Add(New dtPBRPassResultDataTable(ds.Tables("dtPBRPassResult")))
            End If
            If (Not (ds.Tables("dtProcessType")) Is Nothing) Then
                MyBase.Tables.Add(New dtProcessTypeDataTable(ds.Tables("dtProcessType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtMODEL_OPTION_ROW = CType(MyBase.Tables("dtMODEL_OPTION_ROW"),dtMODEL_OPTION_ROWDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtMODEL_OPTION_ROW) Is Nothing) Then
                Me.tabledtMODEL_OPTION_ROW.InitVars
            End If
        End If
        Me.tabledtSKIT_MST = CType(MyBase.Tables("dtSKIT_MST"),dtSKIT_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtSKIT_MST) Is Nothing) Then
                Me.tabledtSKIT_MST.InitVars
            End If
        End If
        Me.tabledtWBS_ON = CType(MyBase.Tables("dtWBS_ON"),dtWBS_ONDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtWBS_ON) Is Nothing) Then
                Me.tabledtWBS_ON.InitVars
            End If
        End If
        Me.tabledtLANE_MST = CType(MyBase.Tables("dtLANE_MST"),dtLANE_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtLANE_MST) Is Nothing) Then
                Me.tabledtLANE_MST.InitVars
            End If
        End If
        Me.tabledtMODEL_OPTION_CELL = CType(MyBase.Tables("dtMODEL_OPTION_CELL"),dtMODEL_OPTION_CELLDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtMODEL_OPTION_CELL) Is Nothing) Then
                Me.tabledtMODEL_OPTION_CELL.InitVars
            End If
        End If
        Me.tabledtINSTRUCTION_DATA = CType(MyBase.Tables("dtINSTRUCTION_DATA"),dtINSTRUCTION_DATADataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtINSTRUCTION_DATA) Is Nothing) Then
                Me.tabledtINSTRUCTION_DATA.InitVars
            End If
        End If
        Me.tabledtPRODUCTION_DAT = CType(MyBase.Tables("dtPRODUCTION_DAT"),dtPRODUCTION_DATDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPRODUCTION_DAT) Is Nothing) Then
                Me.tabledtPRODUCTION_DAT.InitVars
            End If
        End If
        Me.tabledtOPTION_MST = CType(MyBase.Tables("dtOPTION_MST"),dtOPTION_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtOPTION_MST) Is Nothing) Then
                Me.tabledtOPTION_MST.InitVars
            End If
        End If
        Me.tabledtPAINT_CELL = CType(MyBase.Tables("dtPAINT_CELL"),dtPAINT_CELLDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPAINT_CELL) Is Nothing) Then
                Me.tabledtPAINT_CELL.InitVars
            End If
        End If
        Me.tabledtPAINT_PROGRESS = CType(MyBase.Tables("dtPAINT_PROGRESS"),dtPAINT_PROGRESSDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPAINT_PROGRESS) Is Nothing) Then
                Me.tabledtPAINT_PROGRESS.InitVars
            End If
        End If
        Me.tabledtPAINT_SHOP = CType(MyBase.Tables("dtPAINT_SHOP"),dtPAINT_SHOPDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPAINT_SHOP) Is Nothing) Then
                Me.tabledtPAINT_SHOP.InitVars
            End If
        End If
        Me.tabledtPROCESS_OPTION_CELL = CType(MyBase.Tables("dtPROCESS_OPTION_CELL"),dtPROCESS_OPTION_CELLDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPROCESS_OPTION_CELL) Is Nothing) Then
                Me.tabledtPROCESS_OPTION_CELL.InitVars
            End If
        End If
        Me.tabledtPROCESS_MST = CType(MyBase.Tables("dtPROCESS_MST"),dtPROCESS_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPROCESS_MST) Is Nothing) Then
                Me.tabledtPROCESS_MST.InitVars
            End If
        End If
        Me.tabledtPLC_MST = CType(MyBase.Tables("dtPLC_MST"),dtPLC_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPLC_MST) Is Nothing) Then
                Me.tabledtPLC_MST.InitVars
            End If
        End If
        Me.tabledtPROCESS_GROUP_MST = CType(MyBase.Tables("dtPROCESS_GROUP_MST"),dtPROCESS_GROUP_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPROCESS_GROUP_MST) Is Nothing) Then
                Me.tabledtPROCESS_GROUP_MST.InitVars
            End If
        End If
        Me.tabledtPROCESS_LINKAGE = CType(MyBase.Tables("dtPROCESS_LINKAGE"),dtPROCESS_LINKAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPROCESS_LINKAGE) Is Nothing) Then
                Me.tabledtPROCESS_LINKAGE.InitVars
            End If
        End If
        Me.tabledtLOG_DAT = CType(MyBase.Tables("dtLOG_DAT"),dtLOG_DATDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtLOG_DAT) Is Nothing) Then
                Me.tabledtLOG_DAT.InitVars
            End If
        End If
        Me.tabledtFINISHING_LINE = CType(MyBase.Tables("dtFINISHING_LINE"),dtFINISHING_LINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtFINISHING_LINE) Is Nothing) Then
                Me.tabledtFINISHING_LINE.InitVars
            End If
        End If
        Me.tabledtMESSAGE_MST = CType(MyBase.Tables("dtMESSAGE_MST"),dtMESSAGE_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtMESSAGE_MST) Is Nothing) Then
                Me.tabledtMESSAGE_MST.InitVars
            End If
        End If
        Me.tabledtPlcStatus = CType(MyBase.Tables("dtPlcStatus"),dtPlcStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPlcStatus) Is Nothing) Then
                Me.tabledtPlcStatus.InitVars
            End If
        End If
        Me.tabledtPBRPassResult = CType(MyBase.Tables("dtPBRPassResult"),dtPBRPassResultDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPBRPassResult) Is Nothing) Then
                Me.tabledtPBRPassResult.InitVars
            End If
        End If
        Me.tabledtProcessType = CType(MyBase.Tables("dtProcessType"),dtProcessTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtProcessType) Is Nothing) Then
                Me.tabledtProcessType.InitVars
            End If
        End If
        Me.relationFK_T_WBS_ON_LANE_NO = Me.Relations("FK_T_WBS_ON_LANE_NO")
        Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID = Me.Relations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID")
        Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1 = Me.Relations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1")
        Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT = Me.Relations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")
        Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID = Me.Relations("FK_T_MODEL_OPTION_CELL_OPTION_ID")
        Me.relationdtOPTION_MST_dtINSTRUCTION_DATA = Me.Relations("dtOPTION_MST_dtINSTRUCTION_DATA")
        Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT = Me.Relations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT")
        Me.relationFK_T_PROCESS_OPTION_CELL_OPTION_ID = Me.Relations("FK_T_PROCESS_OPTION_CELL_OPTION_ID")
        Me.relationFK_T_PROCESS_OPTION_CELL_PROCESS_NO = Me.Relations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO")
        Me.relationFK_T_PLC_MST_PROCESS_NO = Me.Relations("FK_T_PLC_MST_PROCESS_NO")
        Me.relationFK_T_PROCESS_MST_PROCESS_GROUP_ID = Me.Relations("FK_T_PROCESS_MST_PROCESS_GROUP_ID")
        Me.relationFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO = Me.Relations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO")
        Me.relationFK_T_PROCESS_LINKAGE_TO_PROCESS_NO = Me.Relations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO")
        Me.relationdtPROCESS_MST_dtLOG_DAT = Me.Relations("dtPROCESS_MST_dtLOG_DAT")
        Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1 = Me.Relations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1")
        Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1 = Me.Relations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1")
        Me.relationdtProcessType_dtPROCESS_MST = Me.Relations("dtProcessType_dtPROCESS_MST")
        Me.relationFK_T_PAINT_CELL_PROCESS_NO = Me.Relations("FK_T_PAINT_CELL_PROCESS_NO")
        Me.relationFK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT = Me.Relations("FK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPAINT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPAINT.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("th-TH")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtMODEL_OPTION_ROW = New dtMODEL_OPTION_ROWDataTable
        MyBase.Tables.Add(Me.tabledtMODEL_OPTION_ROW)
        Me.tabledtSKIT_MST = New dtSKIT_MSTDataTable
        MyBase.Tables.Add(Me.tabledtSKIT_MST)
        Me.tabledtWBS_ON = New dtWBS_ONDataTable
        MyBase.Tables.Add(Me.tabledtWBS_ON)
        Me.tabledtLANE_MST = New dtLANE_MSTDataTable
        MyBase.Tables.Add(Me.tabledtLANE_MST)
        Me.tabledtMODEL_OPTION_CELL = New dtMODEL_OPTION_CELLDataTable
        MyBase.Tables.Add(Me.tabledtMODEL_OPTION_CELL)
        Me.tabledtINSTRUCTION_DATA = New dtINSTRUCTION_DATADataTable
        MyBase.Tables.Add(Me.tabledtINSTRUCTION_DATA)
        Me.tabledtPRODUCTION_DAT = New dtPRODUCTION_DATDataTable
        MyBase.Tables.Add(Me.tabledtPRODUCTION_DAT)
        Me.tabledtOPTION_MST = New dtOPTION_MSTDataTable
        MyBase.Tables.Add(Me.tabledtOPTION_MST)
        Me.tabledtPAINT_CELL = New dtPAINT_CELLDataTable
        MyBase.Tables.Add(Me.tabledtPAINT_CELL)
        Me.tabledtPAINT_PROGRESS = New dtPAINT_PROGRESSDataTable
        MyBase.Tables.Add(Me.tabledtPAINT_PROGRESS)
        Me.tabledtPAINT_SHOP = New dtPAINT_SHOPDataTable
        MyBase.Tables.Add(Me.tabledtPAINT_SHOP)
        Me.tabledtPROCESS_OPTION_CELL = New dtPROCESS_OPTION_CELLDataTable
        MyBase.Tables.Add(Me.tabledtPROCESS_OPTION_CELL)
        Me.tabledtPROCESS_MST = New dtPROCESS_MSTDataTable
        MyBase.Tables.Add(Me.tabledtPROCESS_MST)
        Me.tabledtPLC_MST = New dtPLC_MSTDataTable
        MyBase.Tables.Add(Me.tabledtPLC_MST)
        Me.tabledtPROCESS_GROUP_MST = New dtPROCESS_GROUP_MSTDataTable
        MyBase.Tables.Add(Me.tabledtPROCESS_GROUP_MST)
        Me.tabledtPROCESS_LINKAGE = New dtPROCESS_LINKAGEDataTable
        MyBase.Tables.Add(Me.tabledtPROCESS_LINKAGE)
        Me.tabledtLOG_DAT = New dtLOG_DATDataTable
        MyBase.Tables.Add(Me.tabledtLOG_DAT)
        Me.tabledtFINISHING_LINE = New dtFINISHING_LINEDataTable
        MyBase.Tables.Add(Me.tabledtFINISHING_LINE)
        Me.tabledtMESSAGE_MST = New dtMESSAGE_MSTDataTable
        MyBase.Tables.Add(Me.tabledtMESSAGE_MST)
        Me.tabledtPlcStatus = New dtPlcStatusDataTable
        MyBase.Tables.Add(Me.tabledtPlcStatus)
        Me.tabledtPBRPassResult = New dtPBRPassResultDataTable
        MyBase.Tables.Add(Me.tabledtPBRPassResult)
        Me.tabledtProcessType = New dtProcessTypeDataTable
        MyBase.Tables.Add(Me.tabledtProcessType)
        Me.relationFK_T_WBS_ON_LANE_NO = New Global.System.Data.DataRelation("FK_T_WBS_ON_LANE_NO", New Global.System.Data.DataColumn() {Me.tabledtLANE_MST.LANE_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtWBS_ON.LANE_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_WBS_ON_LANE_NO)
        Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID = New Global.System.Data.DataRelation("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID", New Global.System.Data.DataColumn() {Me.tabledtMODEL_OPTION_ROW.MODEL_OPTION_ROW_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtMODEL_OPTION_CELL.MODEL_OPTION_ROW_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID)
        Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1 = New Global.System.Data.DataRelation("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1", New Global.System.Data.DataColumn() {Me.tabledtMODEL_OPTION_ROW.MODEL_OPTION_ROW_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtINSTRUCTION_DATA.MODEL_OPTION_ROW_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1)
        Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT = New Global.System.Data.DataRelation("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT", New Global.System.Data.DataColumn() {Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn, Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn, Me.tabledtPRODUCTION_DAT.LOT_NOColumn, Me.tabledtPRODUCTION_DAT.UNITColumn}, New Global.System.Data.DataColumn() {Me.tabledtSKIT_MST.MODEL_YEARColumn, Me.tabledtSKIT_MST.SUFFIX_CODEColumn, Me.tabledtSKIT_MST.LOT_NOColumn, Me.tabledtSKIT_MST.UNITColumn}, false)
        Me.Relations.Add(Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT)
        Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID = New Global.System.Data.DataRelation("FK_T_MODEL_OPTION_CELL_OPTION_ID", New Global.System.Data.DataColumn() {Me.tabledtOPTION_MST.OPTION_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtMODEL_OPTION_CELL.OPTION_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID)
        Me.relationdtOPTION_MST_dtINSTRUCTION_DATA = New Global.System.Data.DataRelation("dtOPTION_MST_dtINSTRUCTION_DATA", New Global.System.Data.DataColumn() {Me.tabledtOPTION_MST.OPTION_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtINSTRUCTION_DATA.OPTION_IDColumn}, false)
        Me.Relations.Add(Me.relationdtOPTION_MST_dtINSTRUCTION_DATA)
        Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT = New Global.System.Data.DataRelation("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT", New Global.System.Data.DataColumn() {Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn, Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn, Me.tabledtPRODUCTION_DAT.LOT_NOColumn, Me.tabledtPRODUCTION_DAT.UNITColumn}, New Global.System.Data.DataColumn() {Me.tabledtPAINT_CELL.MODEL_YEARColumn, Me.tabledtPAINT_CELL.SUFFIX_CODEColumn, Me.tabledtPAINT_CELL.LOT_NOColumn, Me.tabledtPAINT_CELL.UNITColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT)
        Me.relationFK_T_PROCESS_OPTION_CELL_OPTION_ID = New Global.System.Data.DataRelation("FK_T_PROCESS_OPTION_CELL_OPTION_ID", New Global.System.Data.DataColumn() {Me.tabledtOPTION_MST.OPTION_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_OPTION_CELL.OPTION_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_OPTION_CELL_OPTION_ID)
        Me.relationFK_T_PROCESS_OPTION_CELL_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PROCESS_OPTION_CELL_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_OPTION_CELL.PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_OPTION_CELL_PROCESS_NO)
        Me.relationFK_T_PLC_MST_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PLC_MST_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPLC_MST.PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PLC_MST_PROCESS_NO)
        Me.relationFK_T_PROCESS_MST_PROCESS_GROUP_ID = New Global.System.Data.DataRelation("FK_T_PROCESS_MST_PROCESS_GROUP_ID", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_GROUP_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_MST_PROCESS_GROUP_ID)
        Me.relationFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO)
        Me.relationFK_T_PROCESS_LINKAGE_TO_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_LINKAGE.TO_PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_LINKAGE_TO_PROCESS_NO)
        Me.relationdtPROCESS_MST_dtLOG_DAT = New Global.System.Data.DataRelation("dtPROCESS_MST_dtLOG_DAT", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtLOG_DAT.PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationdtPROCESS_MST_dtLOG_DAT)
        Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1 = New Global.System.Data.DataRelation("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1", New Global.System.Data.DataColumn() {Me.tabledtFINISHING_LINE.MODEL_YEARColumn, Me.tabledtFINISHING_LINE.SUFFIX_CODEColumn, Me.tabledtFINISHING_LINE.LOT_NOColumn, Me.tabledtFINISHING_LINE.UNITColumn}, New Global.System.Data.DataColumn() {Me.tabledtSKIT_MST.MODEL_YEARColumn, Me.tabledtSKIT_MST.SUFFIX_CODEColumn, Me.tabledtSKIT_MST.LOT_NOColumn, Me.tabledtSKIT_MST.UNITColumn}, false)
        Me.Relations.Add(Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1)
        Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1 = New Global.System.Data.DataRelation("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1", New Global.System.Data.DataColumn() {Me.tabledtFINISHING_LINE.MODEL_YEARColumn, Me.tabledtFINISHING_LINE.SUFFIX_CODEColumn, Me.tabledtFINISHING_LINE.LOT_NOColumn, Me.tabledtFINISHING_LINE.UNITColumn}, New Global.System.Data.DataColumn() {Me.tabledtPAINT_CELL.MODEL_YEARColumn, Me.tabledtPAINT_CELL.SUFFIX_CODEColumn, Me.tabledtPAINT_CELL.LOT_NOColumn, Me.tabledtPAINT_CELL.UNITColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1)
        Me.relationdtProcessType_dtPROCESS_MST = New Global.System.Data.DataRelation("dtProcessType_dtPROCESS_MST", New Global.System.Data.DataColumn() {Me.tabledtProcessType.IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_TYPEColumn}, false)
        Me.Relations.Add(Me.relationdtProcessType_dtPROCESS_MST)
        Me.relationFK_T_PAINT_CELL_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PAINT_CELL_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPAINT_CELL.PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PAINT_CELL_PROCESS_NO)
        Me.relationFK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT = New Global.System.Data.DataRelation("FK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT", New Global.System.Data.DataColumn() {Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn, Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn, Me.tabledtPRODUCTION_DAT.LOT_NOColumn, Me.tabledtPRODUCTION_DAT.UNITColumn}, New Global.System.Data.DataColumn() {Me.tabledtWBS_ON.MODEL_YEARColumn, Me.tabledtWBS_ON.SUFFIX_CODEColumn, Me.tabledtWBS_ON.LOT_NOColumn, Me.tabledtWBS_ON.UNITColumn}, false)
        Me.Relations.Add(Me.relationFK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtMODEL_OPTION_ROW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtSKIT_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtWBS_ON() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtLANE_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtMODEL_OPTION_CELL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtINSTRUCTION_DATA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPRODUCTION_DAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtOPTION_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPAINT_CELL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPAINT_PROGRESS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPAINT_SHOP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPROCESS_OPTION_CELL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPROCESS_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPLC_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPROCESS_GROUP_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPROCESS_LINKAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtLOG_DAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtFINISHING_LINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtMESSAGE_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPlcStatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPBRPassResult() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtProcessType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPAINT = New dsPAINT
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtMODEL_OPTION_ROWRowChangeEventHandler(ByVal sender As Object, ByVal e As dtMODEL_OPTION_ROWRowChangeEvent)
    
    Public Delegate Sub dtSKIT_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtSKIT_MSTRowChangeEvent)
    
    Public Delegate Sub dtWBS_ONRowChangeEventHandler(ByVal sender As Object, ByVal e As dtWBS_ONRowChangeEvent)
    
    Public Delegate Sub dtLANE_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtLANE_MSTRowChangeEvent)
    
    Public Delegate Sub dtMODEL_OPTION_CELLRowChangeEventHandler(ByVal sender As Object, ByVal e As dtMODEL_OPTION_CELLRowChangeEvent)
    
    Public Delegate Sub dtINSTRUCTION_DATARowChangeEventHandler(ByVal sender As Object, ByVal e As dtINSTRUCTION_DATARowChangeEvent)
    
    Public Delegate Sub dtPRODUCTION_DATRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPRODUCTION_DATRowChangeEvent)
    
    Public Delegate Sub dtOPTION_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtOPTION_MSTRowChangeEvent)
    
    Public Delegate Sub dtPAINT_CELLRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPAINT_CELLRowChangeEvent)
    
    Public Delegate Sub dtPAINT_PROGRESSRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPAINT_PROGRESSRowChangeEvent)
    
    Public Delegate Sub dtPAINT_SHOPRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPAINT_SHOPRowChangeEvent)
    
    Public Delegate Sub dtPROCESS_OPTION_CELLRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPROCESS_OPTION_CELLRowChangeEvent)
    
    Public Delegate Sub dtPROCESS_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPROCESS_MSTRowChangeEvent)
    
    Public Delegate Sub dtPLC_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPLC_MSTRowChangeEvent)
    
    Public Delegate Sub dtPROCESS_GROUP_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPROCESS_GROUP_MSTRowChangeEvent)
    
    Public Delegate Sub dtPROCESS_LINKAGERowChangeEventHandler(ByVal sender As Object, ByVal e As dtPROCESS_LINKAGERowChangeEvent)
    
    Public Delegate Sub dtLOG_DATRowChangeEventHandler(ByVal sender As Object, ByVal e As dtLOG_DATRowChangeEvent)
    
    Public Delegate Sub dtFINISHING_LINERowChangeEventHandler(ByVal sender As Object, ByVal e As dtFINISHING_LINERowChangeEvent)
    
    Public Delegate Sub dtMESSAGE_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtMESSAGE_MSTRowChangeEvent)
    
    Public Delegate Sub dtPlcStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPlcStatusRowChangeEvent)
    
    Public Delegate Sub dtPBRPassResultRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPBRPassResultRowChangeEvent)
    
    Public Delegate Sub dtProcessTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As dtProcessTypeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtMODEL_OPTION_ROWDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtMODEL_OPTION_ROWRow)
        
        Private columnMODEL_OPTION_ROW_ID As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR_PATTERN As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE_PATTERN As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtMODEL_OPTION_ROW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_OPTION_ROW_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_OPTION_ROW_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEAR_PATTERNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR_PATTERN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODE_PATTERNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE_PATTERN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtMODEL_OPTION_ROWRow
            Get
                Return CType(Me.Rows(index),dtMODEL_OPTION_ROWRow)
            End Get
        End Property
        
        Public Event dtMODEL_OPTION_ROWRowChanging As dtMODEL_OPTION_ROWRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_ROWRowChanged As dtMODEL_OPTION_ROWRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_ROWRowDeleting As dtMODEL_OPTION_ROWRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_ROWRowDeleted As dtMODEL_OPTION_ROWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtMODEL_OPTION_ROWRow(ByVal row As dtMODEL_OPTION_ROWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtMODEL_OPTION_ROWRow(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal MODEL_CODE As String) As dtMODEL_OPTION_ROWRow
            Dim rowdtMODEL_OPTION_ROWRow As dtMODEL_OPTION_ROWRow = CType(Me.NewRow,dtMODEL_OPTION_ROWRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, MODEL_CODE}
            rowdtMODEL_OPTION_ROWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtMODEL_OPTION_ROWRow)
            Return rowdtMODEL_OPTION_ROWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMODEL_OPTION_ROW_ID(ByVal MODEL_OPTION_ROW_ID As Integer) As dtMODEL_OPTION_ROWRow
            Return CType(Me.Rows.Find(New Object() {MODEL_OPTION_ROW_ID}),dtMODEL_OPTION_ROWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtMODEL_OPTION_ROWDataTable = CType(MyBase.Clone,dtMODEL_OPTION_ROWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtMODEL_OPTION_ROWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMODEL_OPTION_ROW_ID = MyBase.Columns("MODEL_OPTION_ROW_ID")
            Me.columnMODEL_YEAR_PATTERN = MyBase.Columns("MODEL_YEAR_PATTERN")
            Me.columnSUFFIX_CODE_PATTERN = MyBase.Columns("SUFFIX_CODE_PATTERN")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMODEL_OPTION_ROW_ID = New Global.System.Data.DataColumn("MODEL_OPTION_ROW_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_OPTION_ROW_ID)
            Me.columnMODEL_YEAR_PATTERN = New Global.System.Data.DataColumn("MODEL_YEAR_PATTERN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR_PATTERN)
            Me.columnSUFFIX_CODE_PATTERN = New Global.System.Data.DataColumn("SUFFIX_CODE_PATTERN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE_PATTERN)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMODEL_OPTION_ROW_ID}, true))
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrement = true
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrementSeed = -1
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrementStep = -1
            Me.columnMODEL_OPTION_ROW_ID.AllowDBNull = false
            Me.columnMODEL_OPTION_ROW_ID.ReadOnly = true
            Me.columnMODEL_OPTION_ROW_ID.Unique = true
            Me.columnMODEL_YEAR_PATTERN.AllowDBNull = false
            Me.columnMODEL_YEAR_PATTERN.MaxLength = 3
            Me.columnSUFFIX_CODE_PATTERN.AllowDBNull = false
            Me.columnSUFFIX_CODE_PATTERN.MaxLength = 5
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtMODEL_OPTION_ROWRow() As dtMODEL_OPTION_ROWRow
            Return CType(Me.NewRow,dtMODEL_OPTION_ROWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtMODEL_OPTION_ROWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtMODEL_OPTION_ROWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtMODEL_OPTION_ROWRowChangedEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_ROWRowChanged(Me, New dtMODEL_OPTION_ROWRowChangeEvent(CType(e.Row,dtMODEL_OPTION_ROWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtMODEL_OPTION_ROWRowChangingEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_ROWRowChanging(Me, New dtMODEL_OPTION_ROWRowChangeEvent(CType(e.Row,dtMODEL_OPTION_ROWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtMODEL_OPTION_ROWRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_ROWRowDeleted(Me, New dtMODEL_OPTION_ROWRowChangeEvent(CType(e.Row,dtMODEL_OPTION_ROWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtMODEL_OPTION_ROWRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_ROWRowDeleting(Me, New dtMODEL_OPTION_ROWRowChangeEvent(CType(e.Row,dtMODEL_OPTION_ROWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtMODEL_OPTION_ROWRow(ByVal row As dtMODEL_OPTION_ROWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtMODEL_OPTION_ROWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtSKIT_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtSKIT_MSTRow)
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtSKIT_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtSKIT_MSTRow
            Get
                Return CType(Me.Rows(index),dtSKIT_MSTRow)
            End Get
        End Property
        
        Public Event dtSKIT_MSTRowChanging As dtSKIT_MSTRowChangeEventHandler
        
        Public Event dtSKIT_MSTRowChanged As dtSKIT_MSTRowChangeEventHandler
        
        Public Event dtSKIT_MSTRowDeleting As dtSKIT_MSTRowChangeEventHandler
        
        Public Event dtSKIT_MSTRowDeleted As dtSKIT_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtSKIT_MSTRow(ByVal row As dtSKIT_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtSKIT_MSTRow(ByVal SKIT_NO As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As dtSKIT_MSTRow
            Dim rowdtSKIT_MSTRow As dtSKIT_MSTRow = CType(Me.NewRow,dtSKIT_MSTRow)
            Dim columnValuesArray() As Object = New Object() {SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT}
            rowdtSKIT_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtSKIT_MSTRow)
            Return rowdtSKIT_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySKIT_NO(ByVal SKIT_NO As Integer) As dtSKIT_MSTRow
            Return CType(Me.Rows.Find(New Object() {SKIT_NO}),dtSKIT_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtSKIT_MSTDataTable = CType(MyBase.Clone,dtSKIT_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtSKIT_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSKIT_NO}, true))
            Me.columnSKIT_NO.AllowDBNull = false
            Me.columnSKIT_NO.Unique = true
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtSKIT_MSTRow() As dtSKIT_MSTRow
            Return CType(Me.NewRow,dtSKIT_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtSKIT_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtSKIT_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtSKIT_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtSKIT_MSTRowChanged(Me, New dtSKIT_MSTRowChangeEvent(CType(e.Row,dtSKIT_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtSKIT_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtSKIT_MSTRowChanging(Me, New dtSKIT_MSTRowChangeEvent(CType(e.Row,dtSKIT_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtSKIT_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtSKIT_MSTRowDeleted(Me, New dtSKIT_MSTRowChangeEvent(CType(e.Row,dtSKIT_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtSKIT_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtSKIT_MSTRowDeleting(Me, New dtSKIT_MSTRowChangeEvent(CType(e.Row,dtSKIT_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtSKIT_MSTRow(ByVal row As dtSKIT_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtSKIT_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtWBS_ONDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtWBS_ONRow)
        
        Private columnLANE_NO As Global.System.Data.DataColumn
        
        Private columnSEQUENCE As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtWBS_ON"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LANE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEQUENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQUENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtWBS_ONRow
            Get
                Return CType(Me.Rows(index),dtWBS_ONRow)
            End Get
        End Property
        
        Public Event dtWBS_ONRowChanging As dtWBS_ONRowChangeEventHandler
        
        Public Event dtWBS_ONRowChanged As dtWBS_ONRowChangeEventHandler
        
        Public Event dtWBS_ONRowDeleting As dtWBS_ONRowChangeEventHandler
        
        Public Event dtWBS_ONRowDeleted As dtWBS_ONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtWBS_ONRow(ByVal row As dtWBS_ONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtWBS_ONRow(ByVal parentdtLANE_MSTRowByFK_T_WBS_ON_LANE_NO As dtLANE_MSTRow, ByVal SEQUENCE As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal POSITION As String) As dtWBS_ONRow
            Dim rowdtWBS_ONRow As dtWBS_ONRow = CType(Me.NewRow,dtWBS_ONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEQUENCE, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, POSITION}
            If (Not (parentdtLANE_MSTRowByFK_T_WBS_ON_LANE_NO) Is Nothing) Then
                columnValuesArray(0) = parentdtLANE_MSTRowByFK_T_WBS_ON_LANE_NO(0)
            End If
            rowdtWBS_ONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtWBS_ONRow)
            Return rowdtWBS_ONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLANE_NOSEQUENCE(ByVal LANE_NO As Integer, ByVal SEQUENCE As Integer) As dtWBS_ONRow
            Return CType(Me.Rows.Find(New Object() {LANE_NO, SEQUENCE}),dtWBS_ONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtWBS_ONDataTable = CType(MyBase.Clone,dtWBS_ONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtWBS_ONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLANE_NO = MyBase.Columns("LANE_NO")
            Me.columnSEQUENCE = MyBase.Columns("SEQUENCE")
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnPOSITION = MyBase.Columns("POSITION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLANE_NO = New Global.System.Data.DataColumn("LANE_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANE_NO)
            Me.columnSEQUENCE = New Global.System.Data.DataColumn("SEQUENCE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQUENCE)
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLANE_NO, Me.columnSEQUENCE}, true))
            Me.columnLANE_NO.AllowDBNull = false
            Me.columnSEQUENCE.AllowDBNull = false
            Me.columnMODEL_YEAR.AllowDBNull = false
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.AllowDBNull = false
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnPOSITION.ReadOnly = true
            Me.columnPOSITION.MaxLength = 16
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtWBS_ONRow() As dtWBS_ONRow
            Return CType(Me.NewRow,dtWBS_ONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtWBS_ONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtWBS_ONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtWBS_ONRowChangedEvent) Is Nothing) Then
                RaiseEvent dtWBS_ONRowChanged(Me, New dtWBS_ONRowChangeEvent(CType(e.Row,dtWBS_ONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtWBS_ONRowChangingEvent) Is Nothing) Then
                RaiseEvent dtWBS_ONRowChanging(Me, New dtWBS_ONRowChangeEvent(CType(e.Row,dtWBS_ONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtWBS_ONRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtWBS_ONRowDeleted(Me, New dtWBS_ONRowChangeEvent(CType(e.Row,dtWBS_ONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtWBS_ONRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtWBS_ONRowDeleting(Me, New dtWBS_ONRowChangeEvent(CType(e.Row,dtWBS_ONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtWBS_ONRow(ByVal row As dtWBS_ONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtWBS_ONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtLANE_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtLANE_MSTRow)
        
        Private columnLANE_NO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtLANE_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LANE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtLANE_MSTRow
            Get
                Return CType(Me.Rows(index),dtLANE_MSTRow)
            End Get
        End Property
        
        Public Event dtLANE_MSTRowChanging As dtLANE_MSTRowChangeEventHandler
        
        Public Event dtLANE_MSTRowChanged As dtLANE_MSTRowChangeEventHandler
        
        Public Event dtLANE_MSTRowDeleting As dtLANE_MSTRowChangeEventHandler
        
        Public Event dtLANE_MSTRowDeleted As dtLANE_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtLANE_MSTRow(ByVal row As dtLANE_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtLANE_MSTRow(ByVal LANE_NO As Integer) As dtLANE_MSTRow
            Dim rowdtLANE_MSTRow As dtLANE_MSTRow = CType(Me.NewRow,dtLANE_MSTRow)
            Dim columnValuesArray() As Object = New Object() {LANE_NO}
            rowdtLANE_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtLANE_MSTRow)
            Return rowdtLANE_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLANE_NO(ByVal LANE_NO As Integer) As dtLANE_MSTRow
            Return CType(Me.Rows.Find(New Object() {LANE_NO}),dtLANE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtLANE_MSTDataTable = CType(MyBase.Clone,dtLANE_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtLANE_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLANE_NO = MyBase.Columns("LANE_NO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLANE_NO = New Global.System.Data.DataColumn("LANE_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANE_NO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLANE_NO}, true))
            Me.columnLANE_NO.AllowDBNull = false
            Me.columnLANE_NO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtLANE_MSTRow() As dtLANE_MSTRow
            Return CType(Me.NewRow,dtLANE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtLANE_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtLANE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtLANE_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtLANE_MSTRowChanged(Me, New dtLANE_MSTRowChangeEvent(CType(e.Row,dtLANE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtLANE_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtLANE_MSTRowChanging(Me, New dtLANE_MSTRowChangeEvent(CType(e.Row,dtLANE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtLANE_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtLANE_MSTRowDeleted(Me, New dtLANE_MSTRowChangeEvent(CType(e.Row,dtLANE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtLANE_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtLANE_MSTRowDeleting(Me, New dtLANE_MSTRowChangeEvent(CType(e.Row,dtLANE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtLANE_MSTRow(ByVal row As dtLANE_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtLANE_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtMODEL_OPTION_CELLDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtMODEL_OPTION_CELLRow)
        
        Private columnMODEL_OPTION_ROW_ID As Global.System.Data.DataColumn
        
        Private columnOPTION_ID As Global.System.Data.DataColumn
        
        Private columnIS_USED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtMODEL_OPTION_CELL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_OPTION_ROW_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_OPTION_ROW_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_USEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_USED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtMODEL_OPTION_CELLRow
            Get
                Return CType(Me.Rows(index),dtMODEL_OPTION_CELLRow)
            End Get
        End Property
        
        Public Event dtMODEL_OPTION_CELLRowChanging As dtMODEL_OPTION_CELLRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_CELLRowChanged As dtMODEL_OPTION_CELLRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_CELLRowDeleting As dtMODEL_OPTION_CELLRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_CELLRowDeleted As dtMODEL_OPTION_CELLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtMODEL_OPTION_CELLRow(ByVal row As dtMODEL_OPTION_CELLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtMODEL_OPTION_CELLRow(ByVal parentdtMODEL_OPTION_ROWRowByFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID As dtMODEL_OPTION_ROWRow, ByVal parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID As dtOPTION_MSTRow, ByVal IS_USED As Boolean) As dtMODEL_OPTION_CELLRow
            Dim rowdtMODEL_OPTION_CELLRow As dtMODEL_OPTION_CELLRow = CType(Me.NewRow,dtMODEL_OPTION_CELLRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, IS_USED}
            If (Not (parentdtMODEL_OPTION_ROWRowByFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID) Is Nothing) Then
                columnValuesArray(0) = parentdtMODEL_OPTION_ROWRowByFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID(0)
            End If
            If (Not (parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID) Is Nothing) Then
                columnValuesArray(1) = parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID(0)
            End If
            rowdtMODEL_OPTION_CELLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtMODEL_OPTION_CELLRow)
            Return rowdtMODEL_OPTION_CELLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMODEL_OPTION_ROW_IDOPTION_ID(ByVal MODEL_OPTION_ROW_ID As Integer, ByVal OPTION_ID As Integer) As dtMODEL_OPTION_CELLRow
            Return CType(Me.Rows.Find(New Object() {MODEL_OPTION_ROW_ID, OPTION_ID}),dtMODEL_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtMODEL_OPTION_CELLDataTable = CType(MyBase.Clone,dtMODEL_OPTION_CELLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtMODEL_OPTION_CELLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMODEL_OPTION_ROW_ID = MyBase.Columns("MODEL_OPTION_ROW_ID")
            Me.columnOPTION_ID = MyBase.Columns("OPTION_ID")
            Me.columnIS_USED = MyBase.Columns("IS_USED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMODEL_OPTION_ROW_ID = New Global.System.Data.DataColumn("MODEL_OPTION_ROW_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_OPTION_ROW_ID)
            Me.columnOPTION_ID = New Global.System.Data.DataColumn("OPTION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_ID)
            Me.columnIS_USED = New Global.System.Data.DataColumn("IS_USED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_USED)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMODEL_OPTION_ROW_ID, Me.columnOPTION_ID}, true))
            Me.columnMODEL_OPTION_ROW_ID.AllowDBNull = false
            Me.columnOPTION_ID.AllowDBNull = false
            Me.columnIS_USED.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtMODEL_OPTION_CELLRow() As dtMODEL_OPTION_CELLRow
            Return CType(Me.NewRow,dtMODEL_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtMODEL_OPTION_CELLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtMODEL_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtMODEL_OPTION_CELLRowChangedEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_CELLRowChanged(Me, New dtMODEL_OPTION_CELLRowChangeEvent(CType(e.Row,dtMODEL_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtMODEL_OPTION_CELLRowChangingEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_CELLRowChanging(Me, New dtMODEL_OPTION_CELLRowChangeEvent(CType(e.Row,dtMODEL_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtMODEL_OPTION_CELLRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_CELLRowDeleted(Me, New dtMODEL_OPTION_CELLRowChangeEvent(CType(e.Row,dtMODEL_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtMODEL_OPTION_CELLRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_CELLRowDeleting(Me, New dtMODEL_OPTION_CELLRowChangeEvent(CType(e.Row,dtMODEL_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtMODEL_OPTION_CELLRow(ByVal row As dtMODEL_OPTION_CELLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtMODEL_OPTION_CELLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtINSTRUCTION_DATADataTable
        Inherits Global.System.Data.TypedTableBase(Of dtINSTRUCTION_DATARow)
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnMODEL_OPTION_ROW_ID As Global.System.Data.DataColumn
        
        Private columnOPTION_ID As Global.System.Data.DataColumn
        
        Private columnOPTION_DISPLAY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtINSTRUCTION_DATA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_OPTION_ROW_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_OPTION_ROW_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_DISPLAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_DISPLAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtINSTRUCTION_DATARow
            Get
                Return CType(Me.Rows(index),dtINSTRUCTION_DATARow)
            End Get
        End Property
        
        Public Event dtINSTRUCTION_DATARowChanging As dtINSTRUCTION_DATARowChangeEventHandler
        
        Public Event dtINSTRUCTION_DATARowChanged As dtINSTRUCTION_DATARowChangeEventHandler
        
        Public Event dtINSTRUCTION_DATARowDeleting As dtINSTRUCTION_DATARowChangeEventHandler
        
        Public Event dtINSTRUCTION_DATARowDeleted As dtINSTRUCTION_DATARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtINSTRUCTION_DATARow(ByVal row As dtINSTRUCTION_DATARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtINSTRUCTION_DATARow(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal parentdtOPTION_MSTRowBydtOPTION_MST_dtINSTRUCTION_DATA As dtOPTION_MSTRow, ByVal OPTION_DISPLAY As String) As dtINSTRUCTION_DATARow
            Dim rowdtINSTRUCTION_DATARow As dtINSTRUCTION_DATARow = CType(Me.NewRow,dtINSTRUCTION_DATARow)
            Dim columnValuesArray() As Object = New Object() {MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, Nothing, Nothing, OPTION_DISPLAY}
            If (Not (parentdtOPTION_MSTRowBydtOPTION_MST_dtINSTRUCTION_DATA) Is Nothing) Then
                columnValuesArray(5) = parentdtOPTION_MSTRowBydtOPTION_MST_dtINSTRUCTION_DATA(0)
            End If
            rowdtINSTRUCTION_DATARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtINSTRUCTION_DATARow)
            Return rowdtINSTRUCTION_DATARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtINSTRUCTION_DATADataTable = CType(MyBase.Clone,dtINSTRUCTION_DATADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtINSTRUCTION_DATADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnMODEL_OPTION_ROW_ID = MyBase.Columns("MODEL_OPTION_ROW_ID")
            Me.columnOPTION_ID = MyBase.Columns("OPTION_ID")
            Me.columnOPTION_DISPLAY = MyBase.Columns("OPTION_DISPLAY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnMODEL_OPTION_ROW_ID = New Global.System.Data.DataColumn("MODEL_OPTION_ROW_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_OPTION_ROW_ID)
            Me.columnOPTION_ID = New Global.System.Data.DataColumn("OPTION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_ID)
            Me.columnOPTION_DISPLAY = New Global.System.Data.DataColumn("OPTION_DISPLAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_DISPLAY)
            Me.columnMODEL_YEAR.AllowDBNull = false
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.AllowDBNull = false
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrement = true
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrementSeed = -1
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrementStep = -1
            Me.columnMODEL_OPTION_ROW_ID.AllowDBNull = false
            Me.columnMODEL_OPTION_ROW_ID.ReadOnly = true
            Me.columnOPTION_ID.AllowDBNull = false
            Me.columnOPTION_DISPLAY.ReadOnly = true
            Me.columnOPTION_DISPLAY.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtINSTRUCTION_DATARow() As dtINSTRUCTION_DATARow
            Return CType(Me.NewRow,dtINSTRUCTION_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtINSTRUCTION_DATARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtINSTRUCTION_DATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtINSTRUCTION_DATARowChangedEvent) Is Nothing) Then
                RaiseEvent dtINSTRUCTION_DATARowChanged(Me, New dtINSTRUCTION_DATARowChangeEvent(CType(e.Row,dtINSTRUCTION_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtINSTRUCTION_DATARowChangingEvent) Is Nothing) Then
                RaiseEvent dtINSTRUCTION_DATARowChanging(Me, New dtINSTRUCTION_DATARowChangeEvent(CType(e.Row,dtINSTRUCTION_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtINSTRUCTION_DATARowDeletedEvent) Is Nothing) Then
                RaiseEvent dtINSTRUCTION_DATARowDeleted(Me, New dtINSTRUCTION_DATARowChangeEvent(CType(e.Row,dtINSTRUCTION_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtINSTRUCTION_DATARowDeletingEvent) Is Nothing) Then
                RaiseEvent dtINSTRUCTION_DATARowDeleting(Me, New dtINSTRUCTION_DATARowChangeEvent(CType(e.Row,dtINSTRUCTION_DATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtINSTRUCTION_DATARow(ByVal row As dtINSTRUCTION_DATARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtINSTRUCTION_DATADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPRODUCTION_DATDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPRODUCTION_DATRow)
        
        Private columnINDEX_NO As Global.System.Data.DataColumn
        
        Private columnPRODUCTION_DATE As Global.System.Data.DataColumn
        
        Private columnON_TIME As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnLOT_ID As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnBLOCK_MODEL As Global.System.Data.DataColumn
        
        Private columnBLOCK_SEQ As Global.System.Data.DataColumn
        
        Private columnIMPORT_CODE As Global.System.Data.DataColumn
        
        Private columnGA_SHOP As Global.System.Data.DataColumn
        
        Private columnLANE_NO As Global.System.Data.DataColumn
        
        Private columnCURRENT_PROCESS As Global.System.Data.DataColumn
        
        Private columnSEQ_NO As Global.System.Data.DataColumn
        
        Private columnMARK As Global.System.Data.DataColumn
        
        Private columnSHIFT As Global.System.Data.DataColumn
        
        Private columnY_CHASSIS_FLAG As Global.System.Data.DataColumn
        
        Private columnBODY_SHOP_CODE As Global.System.Data.DataColumn
        
        Private columnHANDLE_TYPE As Global.System.Data.DataColumn
        
        Private columnBODY_COLOR_TC_SW As Global.System.Data.DataColumn
        
        Private columnBODY_COLOR_SEQ As Global.System.Data.DataColumn
        
        Private columnBODY_COLOR_OPT As Global.System.Data.DataColumn
        
        Private columnBODY_COLOR_NAME As Global.System.Data.DataColumn
        
        Private columnSURFACE_COLOR_SF_SW As Global.System.Data.DataColumn
        
        Private columnSURFACE_COLOR_XXX As Global.System.Data.DataColumn
        
        Private columnSURFACE_COLOR_NAME As Global.System.Data.DataColumn
        
        Private columnFILE_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPRODUCTION_DAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDEX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDEX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_MODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GA_SHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGA_SHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LANE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURRENT_PROCESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENT_PROCESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEQ_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQ_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MARKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHIFTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIFT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Y_CHASSIS_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnY_CHASSIS_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BODY_SHOP_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBODY_SHOP_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HANDLE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHANDLE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BODY_COLOR_TC_SWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBODY_COLOR_TC_SW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BODY_COLOR_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBODY_COLOR_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BODY_COLOR_OPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBODY_COLOR_OPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BODY_COLOR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBODY_COLOR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURFACE_COLOR_SF_SWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURFACE_COLOR_SF_SW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURFACE_COLOR_XXXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURFACE_COLOR_XXX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURFACE_COLOR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURFACE_COLOR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FILE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFILE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPRODUCTION_DATRow
            Get
                Return CType(Me.Rows(index),dtPRODUCTION_DATRow)
            End Get
        End Property
        
        Public Event dtPRODUCTION_DATRowChanging As dtPRODUCTION_DATRowChangeEventHandler
        
        Public Event dtPRODUCTION_DATRowChanged As dtPRODUCTION_DATRowChangeEventHandler
        
        Public Event dtPRODUCTION_DATRowDeleting As dtPRODUCTION_DATRowChangeEventHandler
        
        Public Event dtPRODUCTION_DATRowDeleted As dtPRODUCTION_DATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPRODUCTION_DATRow(ByVal row As dtPRODUCTION_DATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPRODUCTION_DATRow( _
                    ByVal INDEX_NO As Integer,  _
                    ByVal PRODUCTION_DATE As String,  _
                    ByVal ON_TIME As String,  _
                    ByVal SKIT_NO As Integer,  _
                    ByVal LOT_ID As String,  _
                    ByVal MODEL_YEAR As String,  _
                    ByVal SUFFIX_CODE As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT As String,  _
                    ByVal BLOCK_MODEL As String,  _
                    ByVal BLOCK_SEQ As String,  _
                    ByVal IMPORT_CODE As String,  _
                    ByVal GA_SHOP As String,  _
                    ByVal LANE_NO As Integer,  _
                    ByVal CURRENT_PROCESS As String,  _
                    ByVal SEQ_NO As String,  _
                    ByVal MARK As String,  _
                    ByVal SHIFT As String,  _
                    ByVal Y_CHASSIS_FLAG As String,  _
                    ByVal BODY_SHOP_CODE As String,  _
                    ByVal HANDLE_TYPE As String,  _
                    ByVal BODY_COLOR_TC_SW As String,  _
                    ByVal BODY_COLOR_SEQ As String,  _
                    ByVal BODY_COLOR_OPT As String,  _
                    ByVal BODY_COLOR_NAME As String,  _
                    ByVal SURFACE_COLOR_SF_SW As String,  _
                    ByVal SURFACE_COLOR_XXX As String,  _
                    ByVal SURFACE_COLOR_NAME As String,  _
                    ByVal FILE_NAME As String) As dtPRODUCTION_DATRow
            Dim rowdtPRODUCTION_DATRow As dtPRODUCTION_DATRow = CType(Me.NewRow,dtPRODUCTION_DATRow)
            Dim columnValuesArray() As Object = New Object() {INDEX_NO, PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR, SUFFIX_CODE, MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, IMPORT_CODE, GA_SHOP, LANE_NO, CURRENT_PROCESS, SEQ_NO, MARK, SHIFT, Y_CHASSIS_FLAG, BODY_SHOP_CODE, HANDLE_TYPE, BODY_COLOR_TC_SW, BODY_COLOR_SEQ, BODY_COLOR_OPT, BODY_COLOR_NAME, SURFACE_COLOR_SF_SW, SURFACE_COLOR_XXX, SURFACE_COLOR_NAME, FILE_NAME}
            rowdtPRODUCTION_DATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPRODUCTION_DATRow)
            Return rowdtPRODUCTION_DATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMODEL_YEARSUFFIX_CODELOT_NOUNIT(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As dtPRODUCTION_DATRow
            Return CType(Me.Rows.Find(New Object() {MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT}),dtPRODUCTION_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPRODUCTION_DATDataTable = CType(MyBase.Clone,dtPRODUCTION_DATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPRODUCTION_DATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINDEX_NO = MyBase.Columns("INDEX_NO")
            Me.columnPRODUCTION_DATE = MyBase.Columns("PRODUCTION_DATE")
            Me.columnON_TIME = MyBase.Columns("ON_TIME")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnLOT_ID = MyBase.Columns("LOT_ID")
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnBLOCK_MODEL = MyBase.Columns("BLOCK_MODEL")
            Me.columnBLOCK_SEQ = MyBase.Columns("BLOCK_SEQ")
            Me.columnIMPORT_CODE = MyBase.Columns("IMPORT_CODE")
            Me.columnGA_SHOP = MyBase.Columns("GA_SHOP")
            Me.columnLANE_NO = MyBase.Columns("LANE_NO")
            Me.columnCURRENT_PROCESS = MyBase.Columns("CURRENT_PROCESS")
            Me.columnSEQ_NO = MyBase.Columns("SEQ_NO")
            Me.columnMARK = MyBase.Columns("MARK")
            Me.columnSHIFT = MyBase.Columns("SHIFT")
            Me.columnY_CHASSIS_FLAG = MyBase.Columns("Y_CHASSIS_FLAG")
            Me.columnBODY_SHOP_CODE = MyBase.Columns("BODY_SHOP_CODE")
            Me.columnHANDLE_TYPE = MyBase.Columns("HANDLE_TYPE")
            Me.columnBODY_COLOR_TC_SW = MyBase.Columns("BODY_COLOR_TC_SW")
            Me.columnBODY_COLOR_SEQ = MyBase.Columns("BODY_COLOR_SEQ")
            Me.columnBODY_COLOR_OPT = MyBase.Columns("BODY_COLOR_OPT")
            Me.columnBODY_COLOR_NAME = MyBase.Columns("BODY_COLOR_NAME")
            Me.columnSURFACE_COLOR_SF_SW = MyBase.Columns("SURFACE_COLOR_SF_SW")
            Me.columnSURFACE_COLOR_XXX = MyBase.Columns("SURFACE_COLOR_XXX")
            Me.columnSURFACE_COLOR_NAME = MyBase.Columns("SURFACE_COLOR_NAME")
            Me.columnFILE_NAME = MyBase.Columns("FILE_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINDEX_NO = New Global.System.Data.DataColumn("INDEX_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDEX_NO)
            Me.columnPRODUCTION_DATE = New Global.System.Data.DataColumn("PRODUCTION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION_DATE)
            Me.columnON_TIME = New Global.System.Data.DataColumn("ON_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_TIME)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnLOT_ID = New Global.System.Data.DataColumn("LOT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ID)
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnBLOCK_MODEL = New Global.System.Data.DataColumn("BLOCK_MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_MODEL)
            Me.columnBLOCK_SEQ = New Global.System.Data.DataColumn("BLOCK_SEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_SEQ)
            Me.columnIMPORT_CODE = New Global.System.Data.DataColumn("IMPORT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_CODE)
            Me.columnGA_SHOP = New Global.System.Data.DataColumn("GA_SHOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGA_SHOP)
            Me.columnLANE_NO = New Global.System.Data.DataColumn("LANE_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANE_NO)
            Me.columnCURRENT_PROCESS = New Global.System.Data.DataColumn("CURRENT_PROCESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENT_PROCESS)
            Me.columnSEQ_NO = New Global.System.Data.DataColumn("SEQ_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQ_NO)
            Me.columnMARK = New Global.System.Data.DataColumn("MARK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARK)
            Me.columnSHIFT = New Global.System.Data.DataColumn("SHIFT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIFT)
            Me.columnY_CHASSIS_FLAG = New Global.System.Data.DataColumn("Y_CHASSIS_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY_CHASSIS_FLAG)
            Me.columnBODY_SHOP_CODE = New Global.System.Data.DataColumn("BODY_SHOP_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBODY_SHOP_CODE)
            Me.columnHANDLE_TYPE = New Global.System.Data.DataColumn("HANDLE_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHANDLE_TYPE)
            Me.columnBODY_COLOR_TC_SW = New Global.System.Data.DataColumn("BODY_COLOR_TC_SW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBODY_COLOR_TC_SW)
            Me.columnBODY_COLOR_SEQ = New Global.System.Data.DataColumn("BODY_COLOR_SEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBODY_COLOR_SEQ)
            Me.columnBODY_COLOR_OPT = New Global.System.Data.DataColumn("BODY_COLOR_OPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBODY_COLOR_OPT)
            Me.columnBODY_COLOR_NAME = New Global.System.Data.DataColumn("BODY_COLOR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBODY_COLOR_NAME)
            Me.columnSURFACE_COLOR_SF_SW = New Global.System.Data.DataColumn("SURFACE_COLOR_SF_SW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURFACE_COLOR_SF_SW)
            Me.columnSURFACE_COLOR_XXX = New Global.System.Data.DataColumn("SURFACE_COLOR_XXX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURFACE_COLOR_XXX)
            Me.columnSURFACE_COLOR_NAME = New Global.System.Data.DataColumn("SURFACE_COLOR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURFACE_COLOR_NAME)
            Me.columnFILE_NAME = New Global.System.Data.DataColumn("FILE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFILE_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMODEL_YEAR, Me.columnSUFFIX_CODE, Me.columnLOT_NO, Me.columnUNIT}, true))
            Me.columnPRODUCTION_DATE.MaxLength = 8
            Me.columnON_TIME.MaxLength = 4
            Me.columnSKIT_NO.ReadOnly = true
            Me.columnLOT_ID.MaxLength = 3
            Me.columnMODEL_YEAR.AllowDBNull = false
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.AllowDBNull = false
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnBLOCK_MODEL.MaxLength = 8
            Me.columnBLOCK_SEQ.MaxLength = 3
            Me.columnIMPORT_CODE.MaxLength = 10
            Me.columnGA_SHOP.MaxLength = 2
            Me.columnLANE_NO.ReadOnly = true
            Me.columnCURRENT_PROCESS.ReadOnly = true
            Me.columnCURRENT_PROCESS.MaxLength = 255
            Me.columnSEQ_NO.MaxLength = 5
            Me.columnMARK.MaxLength = 3
            Me.columnSHIFT.MaxLength = 1
            Me.columnY_CHASSIS_FLAG.MaxLength = 1
            Me.columnBODY_SHOP_CODE.MaxLength = 2
            Me.columnHANDLE_TYPE.MaxLength = 2
            Me.columnBODY_COLOR_TC_SW.MaxLength = 3
            Me.columnBODY_COLOR_SEQ.MaxLength = 3
            Me.columnBODY_COLOR_OPT.MaxLength = 3
            Me.columnBODY_COLOR_NAME.MaxLength = 20
            Me.columnSURFACE_COLOR_SF_SW.MaxLength = 3
            Me.columnSURFACE_COLOR_XXX.MaxLength = 3
            Me.columnSURFACE_COLOR_NAME.MaxLength = 20
            Me.columnFILE_NAME.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPRODUCTION_DATRow() As dtPRODUCTION_DATRow
            Return CType(Me.NewRow,dtPRODUCTION_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPRODUCTION_DATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPRODUCTION_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPRODUCTION_DATRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPRODUCTION_DATRowChanged(Me, New dtPRODUCTION_DATRowChangeEvent(CType(e.Row,dtPRODUCTION_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPRODUCTION_DATRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPRODUCTION_DATRowChanging(Me, New dtPRODUCTION_DATRowChangeEvent(CType(e.Row,dtPRODUCTION_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPRODUCTION_DATRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPRODUCTION_DATRowDeleted(Me, New dtPRODUCTION_DATRowChangeEvent(CType(e.Row,dtPRODUCTION_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPRODUCTION_DATRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPRODUCTION_DATRowDeleting(Me, New dtPRODUCTION_DATRowChangeEvent(CType(e.Row,dtPRODUCTION_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPRODUCTION_DATRow(ByVal row As dtPRODUCTION_DATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPRODUCTION_DATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtOPTION_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtOPTION_MSTRow)
        
        Private columnOPTION_ID As Global.System.Data.DataColumn
        
        Private columnOPTION_NAME As Global.System.Data.DataColumn
        
        Private columnOPTION_SEQ As Global.System.Data.DataColumn
        
        Private columnOPTION_CODE As Global.System.Data.DataColumn
        
        Private columnOPTION_DISPLAY As Global.System.Data.DataColumn
        
        Private columnOPTION_TYPE As Global.System.Data.DataColumn
        
        Private columnOPTION_SEQ_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtOPTION_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_DISPLAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_DISPLAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_SEQ_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_SEQ_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtOPTION_MSTRow
            Get
                Return CType(Me.Rows(index),dtOPTION_MSTRow)
            End Get
        End Property
        
        Public Event dtOPTION_MSTRowChanging As dtOPTION_MSTRowChangeEventHandler
        
        Public Event dtOPTION_MSTRowChanged As dtOPTION_MSTRowChangeEventHandler
        
        Public Event dtOPTION_MSTRowDeleting As dtOPTION_MSTRowChangeEventHandler
        
        Public Event dtOPTION_MSTRowDeleted As dtOPTION_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtOPTION_MSTRow(ByVal row As dtOPTION_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtOPTION_MSTRow(ByVal OPTION_NAME As String, ByVal OPTION_SEQ As Integer, ByVal OPTION_CODE As String, ByVal OPTION_DISPLAY As String, ByVal OPTION_TYPE As Integer, ByVal OPTION_SEQ_NAME As String) As dtOPTION_MSTRow
            Dim rowdtOPTION_MSTRow As dtOPTION_MSTRow = CType(Me.NewRow,dtOPTION_MSTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, OPTION_NAME, OPTION_SEQ, OPTION_CODE, OPTION_DISPLAY, OPTION_TYPE, OPTION_SEQ_NAME}
            rowdtOPTION_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtOPTION_MSTRow)
            Return rowdtOPTION_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOPTION_ID(ByVal OPTION_ID As Integer) As dtOPTION_MSTRow
            Return CType(Me.Rows.Find(New Object() {OPTION_ID}),dtOPTION_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtOPTION_MSTDataTable = CType(MyBase.Clone,dtOPTION_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtOPTION_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOPTION_ID = MyBase.Columns("OPTION_ID")
            Me.columnOPTION_NAME = MyBase.Columns("OPTION_NAME")
            Me.columnOPTION_SEQ = MyBase.Columns("OPTION_SEQ")
            Me.columnOPTION_CODE = MyBase.Columns("OPTION_CODE")
            Me.columnOPTION_DISPLAY = MyBase.Columns("OPTION_DISPLAY")
            Me.columnOPTION_TYPE = MyBase.Columns("OPTION_TYPE")
            Me.columnOPTION_SEQ_NAME = MyBase.Columns("OPTION_SEQ_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOPTION_ID = New Global.System.Data.DataColumn("OPTION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_ID)
            Me.columnOPTION_NAME = New Global.System.Data.DataColumn("OPTION_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_NAME)
            Me.columnOPTION_SEQ = New Global.System.Data.DataColumn("OPTION_SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_SEQ)
            Me.columnOPTION_CODE = New Global.System.Data.DataColumn("OPTION_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_CODE)
            Me.columnOPTION_DISPLAY = New Global.System.Data.DataColumn("OPTION_DISPLAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_DISPLAY)
            Me.columnOPTION_TYPE = New Global.System.Data.DataColumn("OPTION_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_TYPE)
            Me.columnOPTION_SEQ_NAME = New Global.System.Data.DataColumn("OPTION_SEQ_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_SEQ_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOPTION_ID}, true))
            Me.columnOPTION_ID.AutoIncrement = true
            Me.columnOPTION_ID.AutoIncrementSeed = -1
            Me.columnOPTION_ID.AutoIncrementStep = -1
            Me.columnOPTION_ID.AllowDBNull = false
            Me.columnOPTION_ID.ReadOnly = true
            Me.columnOPTION_ID.Unique = true
            Me.columnOPTION_NAME.AllowDBNull = false
            Me.columnOPTION_NAME.MaxLength = 15
            Me.columnOPTION_SEQ.AllowDBNull = false
            Me.columnOPTION_CODE.MaxLength = 32
            Me.columnOPTION_DISPLAY.AllowDBNull = false
            Me.columnOPTION_DISPLAY.MaxLength = 15
            Me.columnOPTION_TYPE.AllowDBNull = false
            Me.columnOPTION_SEQ_NAME.ReadOnly = true
            Me.columnOPTION_SEQ_NAME.MaxLength = 37
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtOPTION_MSTRow() As dtOPTION_MSTRow
            Return CType(Me.NewRow,dtOPTION_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtOPTION_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtOPTION_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtOPTION_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtOPTION_MSTRowChanged(Me, New dtOPTION_MSTRowChangeEvent(CType(e.Row,dtOPTION_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtOPTION_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtOPTION_MSTRowChanging(Me, New dtOPTION_MSTRowChangeEvent(CType(e.Row,dtOPTION_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtOPTION_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtOPTION_MSTRowDeleted(Me, New dtOPTION_MSTRowChangeEvent(CType(e.Row,dtOPTION_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtOPTION_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtOPTION_MSTRowDeleting(Me, New dtOPTION_MSTRowChangeEvent(CType(e.Row,dtOPTION_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtOPTION_MSTRow(ByVal row As dtOPTION_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtOPTION_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPAINT_CELLDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPAINT_CELLRow)
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnRESULT_DATE As Global.System.Data.DataColumn
        
        Private columnPROCESS_RESULT_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPAINT_CELL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_RESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPAINT_CELLRow
            Get
                Return CType(Me.Rows(index),dtPAINT_CELLRow)
            End Get
        End Property
        
        Public Event dtPAINT_CELLRowChanging As dtPAINT_CELLRowChangeEventHandler
        
        Public Event dtPAINT_CELLRowChanged As dtPAINT_CELLRowChangeEventHandler
        
        Public Event dtPAINT_CELLRowDeleting As dtPAINT_CELLRowChangeEventHandler
        
        Public Event dtPAINT_CELLRowDeleted As dtPAINT_CELLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPAINT_CELLRow(ByVal row As dtPAINT_CELLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPAINT_CELLRow(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal parentdtPROCESS_MSTRowByFK_T_PAINT_CELL_PROCESS_NO As dtPROCESS_MSTRow, ByVal RESULT_DATE As String, ByVal PROCESS_RESULT_DATE As Date) As dtPAINT_CELLRow
            Dim rowdtPAINT_CELLRow As dtPAINT_CELLRow = CType(Me.NewRow,dtPAINT_CELLRow)
            Dim columnValuesArray() As Object = New Object() {MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, Nothing, RESULT_DATE, PROCESS_RESULT_DATE}
            If (Not (parentdtPROCESS_MSTRowByFK_T_PAINT_CELL_PROCESS_NO) Is Nothing) Then
                columnValuesArray(4) = parentdtPROCESS_MSTRowByFK_T_PAINT_CELL_PROCESS_NO(3)
            End If
            rowdtPAINT_CELLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPAINT_CELLRow)
            Return rowdtPAINT_CELLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMODEL_YEARSUFFIX_CODELOT_NOUNITPROCESS_NO(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal PROCESS_NO As Integer) As dtPAINT_CELLRow
            Return CType(Me.Rows.Find(New Object() {MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO}),dtPAINT_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPAINT_CELLDataTable = CType(MyBase.Clone,dtPAINT_CELLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPAINT_CELLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnRESULT_DATE = MyBase.Columns("RESULT_DATE")
            Me.columnPROCESS_RESULT_DATE = MyBase.Columns("PROCESS_RESULT_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnRESULT_DATE = New Global.System.Data.DataColumn("RESULT_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULT_DATE)
            Me.columnPROCESS_RESULT_DATE = New Global.System.Data.DataColumn("PROCESS_RESULT_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_RESULT_DATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMODEL_YEAR, Me.columnSUFFIX_CODE, Me.columnLOT_NO, Me.columnUNIT, Me.columnPROCESS_NO}, true))
            Me.columnMODEL_YEAR.AllowDBNull = false
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.AllowDBNull = false
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnPROCESS_NO.AllowDBNull = false
            Me.columnRESULT_DATE.ReadOnly = true
            Me.columnRESULT_DATE.MaxLength = 61
            Me.columnPROCESS_RESULT_DATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPAINT_CELLRow() As dtPAINT_CELLRow
            Return CType(Me.NewRow,dtPAINT_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPAINT_CELLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPAINT_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPAINT_CELLRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPAINT_CELLRowChanged(Me, New dtPAINT_CELLRowChangeEvent(CType(e.Row,dtPAINT_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPAINT_CELLRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPAINT_CELLRowChanging(Me, New dtPAINT_CELLRowChangeEvent(CType(e.Row,dtPAINT_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPAINT_CELLRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPAINT_CELLRowDeleted(Me, New dtPAINT_CELLRowChangeEvent(CType(e.Row,dtPAINT_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPAINT_CELLRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPAINT_CELLRowDeleting(Me, New dtPAINT_CELLRowChangeEvent(CType(e.Row,dtPAINT_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPAINT_CELLRow(ByVal row As dtPAINT_CELLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPAINT_CELLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPAINT_PROGRESSDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPAINT_PROGRESSRow)
        
        Private columnPRODUCTION_DATE As Global.System.Data.DataColumn
        
        Private columnON_TIME As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnLOT_ID As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnBLOCK_MODEL As Global.System.Data.DataColumn
        
        Private columnBLOCK_SEQ As Global.System.Data.DataColumn
        
        Private columnIMPORT_CODE As Global.System.Data.DataColumn
        
        Private columnGA_SHOP As Global.System.Data.DataColumn
        
        Private columnPROCESS_RESULT_DATE As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPAINT_PROGRESS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_MODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GA_SHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGA_SHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_RESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPAINT_PROGRESSRow
            Get
                Return CType(Me.Rows(index),dtPAINT_PROGRESSRow)
            End Get
        End Property
        
        Public Event dtPAINT_PROGRESSRowChanging As dtPAINT_PROGRESSRowChangeEventHandler
        
        Public Event dtPAINT_PROGRESSRowChanged As dtPAINT_PROGRESSRowChangeEventHandler
        
        Public Event dtPAINT_PROGRESSRowDeleting As dtPAINT_PROGRESSRowChangeEventHandler
        
        Public Event dtPAINT_PROGRESSRowDeleted As dtPAINT_PROGRESSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPAINT_PROGRESSRow(ByVal row As dtPAINT_PROGRESSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPAINT_PROGRESSRow(ByVal PRODUCTION_DATE As String, ByVal ON_TIME As String, ByVal SKIT_NO As Integer, ByVal LOT_ID As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal BLOCK_MODEL As String, ByVal BLOCK_SEQ As String, ByVal IMPORT_CODE As String, ByVal GA_SHOP As String, ByVal PROCESS_RESULT_DATE As Date, ByVal MODEL_CODE As String) As dtPAINT_PROGRESSRow
            Dim rowdtPAINT_PROGRESSRow As dtPAINT_PROGRESSRow = CType(Me.NewRow,dtPAINT_PROGRESSRow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, IMPORT_CODE, GA_SHOP, PROCESS_RESULT_DATE, MODEL_CODE}
            rowdtPAINT_PROGRESSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPAINT_PROGRESSRow)
            Return rowdtPAINT_PROGRESSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPAINT_PROGRESSDataTable = CType(MyBase.Clone,dtPAINT_PROGRESSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPAINT_PROGRESSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTION_DATE = MyBase.Columns("PRODUCTION_DATE")
            Me.columnON_TIME = MyBase.Columns("ON_TIME")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnLOT_ID = MyBase.Columns("LOT_ID")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnBLOCK_MODEL = MyBase.Columns("BLOCK_MODEL")
            Me.columnBLOCK_SEQ = MyBase.Columns("BLOCK_SEQ")
            Me.columnIMPORT_CODE = MyBase.Columns("IMPORT_CODE")
            Me.columnGA_SHOP = MyBase.Columns("GA_SHOP")
            Me.columnPROCESS_RESULT_DATE = MyBase.Columns("PROCESS_RESULT_DATE")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTION_DATE = New Global.System.Data.DataColumn("PRODUCTION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION_DATE)
            Me.columnON_TIME = New Global.System.Data.DataColumn("ON_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_TIME)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnLOT_ID = New Global.System.Data.DataColumn("LOT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ID)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnBLOCK_MODEL = New Global.System.Data.DataColumn("BLOCK_MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_MODEL)
            Me.columnBLOCK_SEQ = New Global.System.Data.DataColumn("BLOCK_SEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_SEQ)
            Me.columnIMPORT_CODE = New Global.System.Data.DataColumn("IMPORT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_CODE)
            Me.columnGA_SHOP = New Global.System.Data.DataColumn("GA_SHOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGA_SHOP)
            Me.columnPROCESS_RESULT_DATE = New Global.System.Data.DataColumn("PROCESS_RESULT_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_RESULT_DATE)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnPRODUCTION_DATE.MaxLength = 8
            Me.columnON_TIME.MaxLength = 4
            Me.columnLOT_ID.MaxLength = 3
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnBLOCK_MODEL.MaxLength = 8
            Me.columnBLOCK_SEQ.MaxLength = 3
            Me.columnIMPORT_CODE.MaxLength = 10
            Me.columnGA_SHOP.MaxLength = 2
            Me.columnPROCESS_RESULT_DATE.AllowDBNull = false
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPAINT_PROGRESSRow() As dtPAINT_PROGRESSRow
            Return CType(Me.NewRow,dtPAINT_PROGRESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPAINT_PROGRESSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPAINT_PROGRESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPAINT_PROGRESSRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPAINT_PROGRESSRowChanged(Me, New dtPAINT_PROGRESSRowChangeEvent(CType(e.Row,dtPAINT_PROGRESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPAINT_PROGRESSRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPAINT_PROGRESSRowChanging(Me, New dtPAINT_PROGRESSRowChangeEvent(CType(e.Row,dtPAINT_PROGRESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPAINT_PROGRESSRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPAINT_PROGRESSRowDeleted(Me, New dtPAINT_PROGRESSRowChangeEvent(CType(e.Row,dtPAINT_PROGRESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPAINT_PROGRESSRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPAINT_PROGRESSRowDeleting(Me, New dtPAINT_PROGRESSRowChangeEvent(CType(e.Row,dtPAINT_PROGRESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPAINT_PROGRESSRow(ByVal row As dtPAINT_PROGRESSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPAINT_PROGRESSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPAINT_SHOPDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPAINT_SHOPRow)
        
        Private columnPRODUCTION_DATE As Global.System.Data.DataColumn
        
        Private columnON_TIME As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnLOT_ID As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnBLOCK_MODEL As Global.System.Data.DataColumn
        
        Private columnBLOCK_SEQ As Global.System.Data.DataColumn
        
        Private columnPROCESS_RESULT_DATE As Global.System.Data.DataColumn
        
        Private columnIMPORT_CODE As Global.System.Data.DataColumn
        
        Private columnGA_SHOP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPAINT_SHOP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_MODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_RESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GA_SHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGA_SHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPAINT_SHOPRow
            Get
                Return CType(Me.Rows(index),dtPAINT_SHOPRow)
            End Get
        End Property
        
        Public Event dtPAINT_SHOPRowChanging As dtPAINT_SHOPRowChangeEventHandler
        
        Public Event dtPAINT_SHOPRowChanged As dtPAINT_SHOPRowChangeEventHandler
        
        Public Event dtPAINT_SHOPRowDeleting As dtPAINT_SHOPRowChangeEventHandler
        
        Public Event dtPAINT_SHOPRowDeleted As dtPAINT_SHOPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPAINT_SHOPRow(ByVal row As dtPAINT_SHOPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPAINT_SHOPRow(ByVal PRODUCTION_DATE As String, ByVal ON_TIME As String, ByVal SKIT_NO As Integer, ByVal LOT_ID As String, ByVal MODEL_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal BLOCK_MODEL As String, ByVal BLOCK_SEQ As String, ByVal PROCESS_RESULT_DATE As String, ByVal IMPORT_CODE As String, ByVal GA_SHOP As String) As dtPAINT_SHOPRow
            Dim rowdtPAINT_SHOPRow As dtPAINT_SHOPRow = CType(Me.NewRow,dtPAINT_SHOPRow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, PROCESS_RESULT_DATE, IMPORT_CODE, GA_SHOP}
            rowdtPAINT_SHOPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPAINT_SHOPRow)
            Return rowdtPAINT_SHOPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPAINT_SHOPDataTable = CType(MyBase.Clone,dtPAINT_SHOPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPAINT_SHOPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTION_DATE = MyBase.Columns("PRODUCTION_DATE")
            Me.columnON_TIME = MyBase.Columns("ON_TIME")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnLOT_ID = MyBase.Columns("LOT_ID")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnBLOCK_MODEL = MyBase.Columns("BLOCK_MODEL")
            Me.columnBLOCK_SEQ = MyBase.Columns("BLOCK_SEQ")
            Me.columnPROCESS_RESULT_DATE = MyBase.Columns("PROCESS_RESULT_DATE")
            Me.columnIMPORT_CODE = MyBase.Columns("IMPORT_CODE")
            Me.columnGA_SHOP = MyBase.Columns("GA_SHOP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTION_DATE = New Global.System.Data.DataColumn("PRODUCTION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION_DATE)
            Me.columnON_TIME = New Global.System.Data.DataColumn("ON_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_TIME)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnLOT_ID = New Global.System.Data.DataColumn("LOT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ID)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnBLOCK_MODEL = New Global.System.Data.DataColumn("BLOCK_MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_MODEL)
            Me.columnBLOCK_SEQ = New Global.System.Data.DataColumn("BLOCK_SEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_SEQ)
            Me.columnPROCESS_RESULT_DATE = New Global.System.Data.DataColumn("PROCESS_RESULT_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_RESULT_DATE)
            Me.columnIMPORT_CODE = New Global.System.Data.DataColumn("IMPORT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_CODE)
            Me.columnGA_SHOP = New Global.System.Data.DataColumn("GA_SHOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGA_SHOP)
            Me.columnPRODUCTION_DATE.MaxLength = 8
            Me.columnON_TIME.MaxLength = 4
            Me.columnSKIT_NO.AllowDBNull = false
            Me.columnLOT_ID.MaxLength = 3
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnBLOCK_MODEL.MaxLength = 8
            Me.columnBLOCK_SEQ.MaxLength = 3
            Me.columnPROCESS_RESULT_DATE.ReadOnly = true
            Me.columnPROCESS_RESULT_DATE.MaxLength = 61
            Me.columnIMPORT_CODE.MaxLength = 10
            Me.columnGA_SHOP.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPAINT_SHOPRow() As dtPAINT_SHOPRow
            Return CType(Me.NewRow,dtPAINT_SHOPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPAINT_SHOPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPAINT_SHOPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPAINT_SHOPRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPAINT_SHOPRowChanged(Me, New dtPAINT_SHOPRowChangeEvent(CType(e.Row,dtPAINT_SHOPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPAINT_SHOPRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPAINT_SHOPRowChanging(Me, New dtPAINT_SHOPRowChangeEvent(CType(e.Row,dtPAINT_SHOPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPAINT_SHOPRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPAINT_SHOPRowDeleted(Me, New dtPAINT_SHOPRowChangeEvent(CType(e.Row,dtPAINT_SHOPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPAINT_SHOPRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPAINT_SHOPRowDeleting(Me, New dtPAINT_SHOPRowChangeEvent(CType(e.Row,dtPAINT_SHOPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPAINT_SHOPRow(ByVal row As dtPAINT_SHOPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPAINT_SHOPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPROCESS_OPTION_CELLDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPROCESS_OPTION_CELLRow)
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnOPTION_ID As Global.System.Data.DataColumn
        
        Private columnIS_USED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPROCESS_OPTION_CELL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_USEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_USED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPROCESS_OPTION_CELLRow
            Get
                Return CType(Me.Rows(index),dtPROCESS_OPTION_CELLRow)
            End Get
        End Property
        
        Public Event dtPROCESS_OPTION_CELLRowChanging As dtPROCESS_OPTION_CELLRowChangeEventHandler
        
        Public Event dtPROCESS_OPTION_CELLRowChanged As dtPROCESS_OPTION_CELLRowChangeEventHandler
        
        Public Event dtPROCESS_OPTION_CELLRowDeleting As dtPROCESS_OPTION_CELLRowChangeEventHandler
        
        Public Event dtPROCESS_OPTION_CELLRowDeleted As dtPROCESS_OPTION_CELLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPROCESS_OPTION_CELLRow(ByVal row As dtPROCESS_OPTION_CELLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPROCESS_OPTION_CELLRow(ByVal parentdtPROCESS_MSTRowByFK_T_PROCESS_OPTION_CELL_PROCESS_NO As dtPROCESS_MSTRow, ByVal parentdtOPTION_MSTRowByFK_T_PROCESS_OPTION_CELL_OPTION_ID As dtOPTION_MSTRow, ByVal IS_USED As Boolean) As dtPROCESS_OPTION_CELLRow
            Dim rowdtPROCESS_OPTION_CELLRow As dtPROCESS_OPTION_CELLRow = CType(Me.NewRow,dtPROCESS_OPTION_CELLRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, IS_USED}
            If (Not (parentdtPROCESS_MSTRowByFK_T_PROCESS_OPTION_CELL_PROCESS_NO) Is Nothing) Then
                columnValuesArray(0) = parentdtPROCESS_MSTRowByFK_T_PROCESS_OPTION_CELL_PROCESS_NO(3)
            End If
            If (Not (parentdtOPTION_MSTRowByFK_T_PROCESS_OPTION_CELL_OPTION_ID) Is Nothing) Then
                columnValuesArray(1) = parentdtOPTION_MSTRowByFK_T_PROCESS_OPTION_CELL_OPTION_ID(0)
            End If
            rowdtPROCESS_OPTION_CELLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPROCESS_OPTION_CELLRow)
            Return rowdtPROCESS_OPTION_CELLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPROCESS_NOOPTION_ID(ByVal PROCESS_NO As Integer, ByVal OPTION_ID As Integer) As dtPROCESS_OPTION_CELLRow
            Return CType(Me.Rows.Find(New Object() {PROCESS_NO, OPTION_ID}),dtPROCESS_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPROCESS_OPTION_CELLDataTable = CType(MyBase.Clone,dtPROCESS_OPTION_CELLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPROCESS_OPTION_CELLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnOPTION_ID = MyBase.Columns("OPTION_ID")
            Me.columnIS_USED = MyBase.Columns("IS_USED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnOPTION_ID = New Global.System.Data.DataColumn("OPTION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_ID)
            Me.columnIS_USED = New Global.System.Data.DataColumn("IS_USED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_USED)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROCESS_NO, Me.columnOPTION_ID}, true))
            Me.columnPROCESS_NO.AllowDBNull = false
            Me.columnOPTION_ID.AllowDBNull = false
            Me.columnIS_USED.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPROCESS_OPTION_CELLRow() As dtPROCESS_OPTION_CELLRow
            Return CType(Me.NewRow,dtPROCESS_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPROCESS_OPTION_CELLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPROCESS_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPROCESS_OPTION_CELLRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_OPTION_CELLRowChanged(Me, New dtPROCESS_OPTION_CELLRowChangeEvent(CType(e.Row,dtPROCESS_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPROCESS_OPTION_CELLRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_OPTION_CELLRowChanging(Me, New dtPROCESS_OPTION_CELLRowChangeEvent(CType(e.Row,dtPROCESS_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPROCESS_OPTION_CELLRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_OPTION_CELLRowDeleted(Me, New dtPROCESS_OPTION_CELLRowChangeEvent(CType(e.Row,dtPROCESS_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPROCESS_OPTION_CELLRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_OPTION_CELLRowDeleting(Me, New dtPROCESS_OPTION_CELLRowChangeEvent(CType(e.Row,dtPROCESS_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPROCESS_OPTION_CELLRow(ByVal row As dtPROCESS_OPTION_CELLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPROCESS_OPTION_CELLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPROCESS_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPROCESS_MSTRow)
        
        Private columnPROCESS_NAME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TIME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TYPE As Global.System.Data.DataColumn
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnENTRANCE_FLAG As Global.System.Data.DataColumn
        
        Private columnUPPER_PROCESS_NAME As Global.System.Data.DataColumn
        
        Private columnPROCESS_CODE As Global.System.Data.DataColumn
        
        Private columnPROCESS_GROUP_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPROCESS_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENTRANCE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTRANCE_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPPER_PROCESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPPER_PROCESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_GROUP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_GROUP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPROCESS_MSTRow
            Get
                Return CType(Me.Rows(index),dtPROCESS_MSTRow)
            End Get
        End Property
        
        Public Event dtPROCESS_MSTRowChanging As dtPROCESS_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_MSTRowChanged As dtPROCESS_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_MSTRowDeleting As dtPROCESS_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_MSTRowDeleted As dtPROCESS_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPROCESS_MSTRow(ByVal row As dtPROCESS_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPROCESS_MSTRow(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal parentdtProcessTypeRowBydtProcessType_dtPROCESS_MST As dtProcessTypeRow, ByVal ENTRANCE_FLAG As Boolean, ByVal UPPER_PROCESS_NAME As String, ByVal PROCESS_CODE As Integer, ByVal parentdtPROCESS_GROUP_MSTRowByFK_T_PROCESS_MST_PROCESS_GROUP_ID As dtPROCESS_GROUP_MSTRow) As dtPROCESS_MSTRow
            Dim rowdtPROCESS_MSTRow As dtPROCESS_MSTRow = CType(Me.NewRow,dtPROCESS_MSTRow)
            Dim columnValuesArray() As Object = New Object() {PROCESS_NAME, PROCESS_TIME, Nothing, Nothing, ENTRANCE_FLAG, UPPER_PROCESS_NAME, PROCESS_CODE, Nothing}
            If (Not (parentdtProcessTypeRowBydtProcessType_dtPROCESS_MST) Is Nothing) Then
                columnValuesArray(2) = parentdtProcessTypeRowBydtProcessType_dtPROCESS_MST(0)
            End If
            If (Not (parentdtPROCESS_GROUP_MSTRowByFK_T_PROCESS_MST_PROCESS_GROUP_ID) Is Nothing) Then
                columnValuesArray(7) = parentdtPROCESS_GROUP_MSTRowByFK_T_PROCESS_MST_PROCESS_GROUP_ID(0)
            End If
            rowdtPROCESS_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPROCESS_MSTRow)
            Return rowdtPROCESS_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPROCESS_NO(ByVal PROCESS_NO As Integer) As dtPROCESS_MSTRow
            Return CType(Me.Rows.Find(New Object() {PROCESS_NO}),dtPROCESS_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPROCESS_MSTDataTable = CType(MyBase.Clone,dtPROCESS_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPROCESS_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROCESS_NAME = MyBase.Columns("PROCESS_NAME")
            Me.columnPROCESS_TIME = MyBase.Columns("PROCESS_TIME")
            Me.columnPROCESS_TYPE = MyBase.Columns("PROCESS_TYPE")
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnENTRANCE_FLAG = MyBase.Columns("ENTRANCE_FLAG")
            Me.columnUPPER_PROCESS_NAME = MyBase.Columns("UPPER_PROCESS_NAME")
            Me.columnPROCESS_CODE = MyBase.Columns("PROCESS_CODE")
            Me.columnPROCESS_GROUP_ID = MyBase.Columns("PROCESS_GROUP_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROCESS_NAME = New Global.System.Data.DataColumn("PROCESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NAME)
            Me.columnPROCESS_TIME = New Global.System.Data.DataColumn("PROCESS_TIME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TIME)
            Me.columnPROCESS_TYPE = New Global.System.Data.DataColumn("PROCESS_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TYPE)
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnENTRANCE_FLAG = New Global.System.Data.DataColumn("ENTRANCE_FLAG", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTRANCE_FLAG)
            Me.columnUPPER_PROCESS_NAME = New Global.System.Data.DataColumn("UPPER_PROCESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPPER_PROCESS_NAME)
            Me.columnPROCESS_CODE = New Global.System.Data.DataColumn("PROCESS_CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_CODE)
            Me.columnPROCESS_GROUP_ID = New Global.System.Data.DataColumn("PROCESS_GROUP_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_GROUP_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROCESS_NO}, true))
            Me.columnPROCESS_NAME.AllowDBNull = false
            Me.columnPROCESS_NAME.MaxLength = 60
            Me.columnPROCESS_TIME.AllowDBNull = false
            Me.columnPROCESS_TYPE.AllowDBNull = false
            Me.columnPROCESS_NO.AutoIncrement = true
            Me.columnPROCESS_NO.AutoIncrementSeed = -1
            Me.columnPROCESS_NO.AutoIncrementStep = -1
            Me.columnPROCESS_NO.AllowDBNull = false
            Me.columnPROCESS_NO.ReadOnly = true
            Me.columnPROCESS_NO.Unique = true
            Me.columnENTRANCE_FLAG.AllowDBNull = false
            Me.columnUPPER_PROCESS_NAME.ReadOnly = true
            Me.columnUPPER_PROCESS_NAME.MaxLength = 60
            Me.columnPROCESS_CODE.AllowDBNull = false
            Me.columnPROCESS_GROUP_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Return CType(Me.NewRow,dtPROCESS_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPROCESS_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPROCESS_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPROCESS_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_MSTRowChanged(Me, New dtPROCESS_MSTRowChangeEvent(CType(e.Row,dtPROCESS_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPROCESS_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_MSTRowChanging(Me, New dtPROCESS_MSTRowChangeEvent(CType(e.Row,dtPROCESS_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPROCESS_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_MSTRowDeleted(Me, New dtPROCESS_MSTRowChangeEvent(CType(e.Row,dtPROCESS_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPROCESS_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_MSTRowDeleting(Me, New dtPROCESS_MSTRowChangeEvent(CType(e.Row,dtPROCESS_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPROCESS_MSTRow(ByVal row As dtPROCESS_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPROCESS_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPLC_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPLC_MSTRow)
        
        Private columnPLC_ID As Global.System.Data.DataColumn
        
        Private columnSTAGE_CODE As Global.System.Data.DataColumn
        
        Private columnPLC_NET As Global.System.Data.DataColumn
        
        Private columnPLC_NODE As Global.System.Data.DataColumn
        
        Private columnPLC_UNIT As Global.System.Data.DataColumn
        
        Private columnREAD_DM As Global.System.Data.DataColumn
        
        Private columnWRITE_DATA_DM As Global.System.Data.DataColumn
        
        Private columnWRITE_STATUS_DM As Global.System.Data.DataColumn
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnPLC_ONLINE_FLAG As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPLC_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STAGE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAGE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_NETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_NET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_NODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_NODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property READ_DMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAD_DM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WRITE_DATA_DMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWRITE_DATA_DM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WRITE_STATUS_DMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWRITE_STATUS_DM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_ONLINE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_ONLINE_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPLC_MSTRow
            Get
                Return CType(Me.Rows(index),dtPLC_MSTRow)
            End Get
        End Property
        
        Public Event dtPLC_MSTRowChanging As dtPLC_MSTRowChangeEventHandler
        
        Public Event dtPLC_MSTRowChanged As dtPLC_MSTRowChangeEventHandler
        
        Public Event dtPLC_MSTRowDeleting As dtPLC_MSTRowChangeEventHandler
        
        Public Event dtPLC_MSTRowDeleted As dtPLC_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPLC_MSTRow(ByVal row As dtPLC_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPLC_MSTRow(ByVal STAGE_CODE As Integer, ByVal PLC_NET As Integer, ByVal PLC_NODE As Integer, ByVal PLC_UNIT As Integer, ByVal READ_DM As Integer, ByVal WRITE_DATA_DM As Integer, ByVal WRITE_STATUS_DM As Integer, ByVal parentdtPROCESS_MSTRowByFK_T_PLC_MST_PROCESS_NO As dtPROCESS_MSTRow, ByVal PLC_ONLINE_FLAG As Boolean) As dtPLC_MSTRow
            Dim rowdtPLC_MSTRow As dtPLC_MSTRow = CType(Me.NewRow,dtPLC_MSTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, STAGE_CODE, PLC_NET, PLC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, Nothing, PLC_ONLINE_FLAG}
            If (Not (parentdtPROCESS_MSTRowByFK_T_PLC_MST_PROCESS_NO) Is Nothing) Then
                columnValuesArray(8) = parentdtPROCESS_MSTRowByFK_T_PLC_MST_PROCESS_NO(3)
            End If
            rowdtPLC_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPLC_MSTRow)
            Return rowdtPLC_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPLC_ID(ByVal PLC_ID As Integer) As dtPLC_MSTRow
            Return CType(Me.Rows.Find(New Object() {PLC_ID}),dtPLC_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPLC_MSTDataTable = CType(MyBase.Clone,dtPLC_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPLC_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPLC_ID = MyBase.Columns("PLC_ID")
            Me.columnSTAGE_CODE = MyBase.Columns("STAGE_CODE")
            Me.columnPLC_NET = MyBase.Columns("PLC_NET")
            Me.columnPLC_NODE = MyBase.Columns("PLC_NODE")
            Me.columnPLC_UNIT = MyBase.Columns("PLC_UNIT")
            Me.columnREAD_DM = MyBase.Columns("READ_DM")
            Me.columnWRITE_DATA_DM = MyBase.Columns("WRITE_DATA_DM")
            Me.columnWRITE_STATUS_DM = MyBase.Columns("WRITE_STATUS_DM")
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnPLC_ONLINE_FLAG = MyBase.Columns("PLC_ONLINE_FLAG")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPLC_ID = New Global.System.Data.DataColumn("PLC_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_ID)
            Me.columnSTAGE_CODE = New Global.System.Data.DataColumn("STAGE_CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAGE_CODE)
            Me.columnPLC_NET = New Global.System.Data.DataColumn("PLC_NET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_NET)
            Me.columnPLC_NODE = New Global.System.Data.DataColumn("PLC_NODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_NODE)
            Me.columnPLC_UNIT = New Global.System.Data.DataColumn("PLC_UNIT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_UNIT)
            Me.columnREAD_DM = New Global.System.Data.DataColumn("READ_DM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAD_DM)
            Me.columnWRITE_DATA_DM = New Global.System.Data.DataColumn("WRITE_DATA_DM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWRITE_DATA_DM)
            Me.columnWRITE_STATUS_DM = New Global.System.Data.DataColumn("WRITE_STATUS_DM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWRITE_STATUS_DM)
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnPLC_ONLINE_FLAG = New Global.System.Data.DataColumn("PLC_ONLINE_FLAG", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_ONLINE_FLAG)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLC_ID}, true))
            Me.columnPLC_ID.AutoIncrement = true
            Me.columnPLC_ID.AutoIncrementSeed = -1
            Me.columnPLC_ID.AutoIncrementStep = -1
            Me.columnPLC_ID.AllowDBNull = false
            Me.columnPLC_ID.ReadOnly = true
            Me.columnPLC_ID.Unique = true
            Me.columnSTAGE_CODE.AllowDBNull = false
            Me.columnPLC_NET.AllowDBNull = false
            Me.columnPLC_NODE.AllowDBNull = false
            Me.columnPLC_UNIT.AllowDBNull = false
            Me.columnREAD_DM.AllowDBNull = false
            Me.columnWRITE_DATA_DM.AllowDBNull = false
            Me.columnWRITE_STATUS_DM.AllowDBNull = false
            Me.columnPROCESS_NO.AllowDBNull = false
            Me.columnPLC_ONLINE_FLAG.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPLC_MSTRow() As dtPLC_MSTRow
            Return CType(Me.NewRow,dtPLC_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPLC_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPLC_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPLC_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPLC_MSTRowChanged(Me, New dtPLC_MSTRowChangeEvent(CType(e.Row,dtPLC_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPLC_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPLC_MSTRowChanging(Me, New dtPLC_MSTRowChangeEvent(CType(e.Row,dtPLC_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPLC_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPLC_MSTRowDeleted(Me, New dtPLC_MSTRowChangeEvent(CType(e.Row,dtPLC_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPLC_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPLC_MSTRowDeleting(Me, New dtPLC_MSTRowChangeEvent(CType(e.Row,dtPLC_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPLC_MSTRow(ByVal row As dtPLC_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPLC_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPROCESS_GROUP_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPROCESS_GROUP_MSTRow)
        
        Private columnPROCESS_GROUP_ID As Global.System.Data.DataColumn
        
        Private columnPROCESS_GROUP_SEQ As Global.System.Data.DataColumn
        
        Private columnPROCESS_GROUP_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPROCESS_GROUP_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_GROUP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_GROUP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_GROUP_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_GROUP_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_GROUP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_GROUP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPROCESS_GROUP_MSTRow
            Get
                Return CType(Me.Rows(index),dtPROCESS_GROUP_MSTRow)
            End Get
        End Property
        
        Public Event dtPROCESS_GROUP_MSTRowChanging As dtPROCESS_GROUP_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_GROUP_MSTRowChanged As dtPROCESS_GROUP_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_GROUP_MSTRowDeleting As dtPROCESS_GROUP_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_GROUP_MSTRowDeleted As dtPROCESS_GROUP_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPROCESS_GROUP_MSTRow(ByVal row As dtPROCESS_GROUP_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPROCESS_GROUP_MSTRow(ByVal PROCESS_GROUP_SEQ As Integer, ByVal PROCESS_GROUP_NAME As String) As dtPROCESS_GROUP_MSTRow
            Dim rowdtPROCESS_GROUP_MSTRow As dtPROCESS_GROUP_MSTRow = CType(Me.NewRow,dtPROCESS_GROUP_MSTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PROCESS_GROUP_SEQ, PROCESS_GROUP_NAME}
            rowdtPROCESS_GROUP_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPROCESS_GROUP_MSTRow)
            Return rowdtPROCESS_GROUP_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPROCESS_GROUP_ID(ByVal PROCESS_GROUP_ID As Integer) As dtPROCESS_GROUP_MSTRow
            Return CType(Me.Rows.Find(New Object() {PROCESS_GROUP_ID}),dtPROCESS_GROUP_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPROCESS_GROUP_MSTDataTable = CType(MyBase.Clone,dtPROCESS_GROUP_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPROCESS_GROUP_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROCESS_GROUP_ID = MyBase.Columns("PROCESS_GROUP_ID")
            Me.columnPROCESS_GROUP_SEQ = MyBase.Columns("PROCESS_GROUP_SEQ")
            Me.columnPROCESS_GROUP_NAME = MyBase.Columns("PROCESS_GROUP_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROCESS_GROUP_ID = New Global.System.Data.DataColumn("PROCESS_GROUP_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_GROUP_ID)
            Me.columnPROCESS_GROUP_SEQ = New Global.System.Data.DataColumn("PROCESS_GROUP_SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_GROUP_SEQ)
            Me.columnPROCESS_GROUP_NAME = New Global.System.Data.DataColumn("PROCESS_GROUP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_GROUP_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROCESS_GROUP_ID}, true))
            Me.columnPROCESS_GROUP_ID.AutoIncrement = true
            Me.columnPROCESS_GROUP_ID.AutoIncrementSeed = -1
            Me.columnPROCESS_GROUP_ID.AutoIncrementStep = -1
            Me.columnPROCESS_GROUP_ID.AllowDBNull = false
            Me.columnPROCESS_GROUP_ID.ReadOnly = true
            Me.columnPROCESS_GROUP_ID.Unique = true
            Me.columnPROCESS_GROUP_SEQ.AllowDBNull = false
            Me.columnPROCESS_GROUP_NAME.AllowDBNull = false
            Me.columnPROCESS_GROUP_NAME.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPROCESS_GROUP_MSTRow() As dtPROCESS_GROUP_MSTRow
            Return CType(Me.NewRow,dtPROCESS_GROUP_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPROCESS_GROUP_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPROCESS_GROUP_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPROCESS_GROUP_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_GROUP_MSTRowChanged(Me, New dtPROCESS_GROUP_MSTRowChangeEvent(CType(e.Row,dtPROCESS_GROUP_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPROCESS_GROUP_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_GROUP_MSTRowChanging(Me, New dtPROCESS_GROUP_MSTRowChangeEvent(CType(e.Row,dtPROCESS_GROUP_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPROCESS_GROUP_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_GROUP_MSTRowDeleted(Me, New dtPROCESS_GROUP_MSTRowChangeEvent(CType(e.Row,dtPROCESS_GROUP_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPROCESS_GROUP_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_GROUP_MSTRowDeleting(Me, New dtPROCESS_GROUP_MSTRowChangeEvent(CType(e.Row,dtPROCESS_GROUP_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPROCESS_GROUP_MSTRow(ByVal row As dtPROCESS_GROUP_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPROCESS_GROUP_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPROCESS_LINKAGEDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPROCESS_LINKAGERow)
        
        Private columnFROM_PROCESS_NO As Global.System.Data.DataColumn
        
        Private columnTO_PROCESS_NO As Global.System.Data.DataColumn
        
        Private columnFROM_PROCESS_NAME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TIME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TYPE As Global.System.Data.DataColumn
        
        Private columnENTRANCE_FLAG As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPROCESS_LINKAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FROM_PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFROM_PROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TO_PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTO_PROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FROM_PROCESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFROM_PROCESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENTRANCE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTRANCE_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPROCESS_LINKAGERow
            Get
                Return CType(Me.Rows(index),dtPROCESS_LINKAGERow)
            End Get
        End Property
        
        Public Event dtPROCESS_LINKAGERowChanging As dtPROCESS_LINKAGERowChangeEventHandler
        
        Public Event dtPROCESS_LINKAGERowChanged As dtPROCESS_LINKAGERowChangeEventHandler
        
        Public Event dtPROCESS_LINKAGERowDeleting As dtPROCESS_LINKAGERowChangeEventHandler
        
        Public Event dtPROCESS_LINKAGERowDeleted As dtPROCESS_LINKAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPROCESS_LINKAGERow(ByVal row As dtPROCESS_LINKAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPROCESS_LINKAGERow(ByVal parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO As dtPROCESS_MSTRow, ByVal parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO As dtPROCESS_MSTRow, ByVal FROM_PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As String) As dtPROCESS_LINKAGERow
            Dim rowdtPROCESS_LINKAGERow As dtPROCESS_LINKAGERow = CType(Me.NewRow,dtPROCESS_LINKAGERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, FROM_PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, ENTRANCE_FLAG}
            If (Not (parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO) Is Nothing) Then
                columnValuesArray(0) = parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO(3)
            End If
            If (Not (parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO) Is Nothing) Then
                columnValuesArray(1) = parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO(3)
            End If
            rowdtPROCESS_LINKAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPROCESS_LINKAGERow)
            Return rowdtPROCESS_LINKAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFROM_PROCESS_NOTO_PROCESS_NO(ByVal FROM_PROCESS_NO As Integer, ByVal TO_PROCESS_NO As Integer) As dtPROCESS_LINKAGERow
            Return CType(Me.Rows.Find(New Object() {FROM_PROCESS_NO, TO_PROCESS_NO}),dtPROCESS_LINKAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPROCESS_LINKAGEDataTable = CType(MyBase.Clone,dtPROCESS_LINKAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPROCESS_LINKAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFROM_PROCESS_NO = MyBase.Columns("FROM_PROCESS_NO")
            Me.columnTO_PROCESS_NO = MyBase.Columns("TO_PROCESS_NO")
            Me.columnFROM_PROCESS_NAME = MyBase.Columns("FROM_PROCESS_NAME")
            Me.columnPROCESS_TIME = MyBase.Columns("PROCESS_TIME")
            Me.columnPROCESS_TYPE = MyBase.Columns("PROCESS_TYPE")
            Me.columnENTRANCE_FLAG = MyBase.Columns("ENTRANCE_FLAG")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFROM_PROCESS_NO = New Global.System.Data.DataColumn("FROM_PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFROM_PROCESS_NO)
            Me.columnTO_PROCESS_NO = New Global.System.Data.DataColumn("TO_PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTO_PROCESS_NO)
            Me.columnFROM_PROCESS_NAME = New Global.System.Data.DataColumn("FROM_PROCESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFROM_PROCESS_NAME)
            Me.columnPROCESS_TIME = New Global.System.Data.DataColumn("PROCESS_TIME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TIME)
            Me.columnPROCESS_TYPE = New Global.System.Data.DataColumn("PROCESS_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TYPE)
            Me.columnENTRANCE_FLAG = New Global.System.Data.DataColumn("ENTRANCE_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTRANCE_FLAG)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFROM_PROCESS_NO, Me.columnTO_PROCESS_NO}, true))
            Me.columnFROM_PROCESS_NO.AllowDBNull = false
            Me.columnTO_PROCESS_NO.AllowDBNull = false
            Me.columnFROM_PROCESS_NAME.ReadOnly = true
            Me.columnFROM_PROCESS_NAME.MaxLength = 60
            Me.columnPROCESS_TIME.ReadOnly = true
            Me.columnPROCESS_TYPE.ReadOnly = true
            Me.columnENTRANCE_FLAG.ReadOnly = true
            Me.columnENTRANCE_FLAG.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPROCESS_LINKAGERow() As dtPROCESS_LINKAGERow
            Return CType(Me.NewRow,dtPROCESS_LINKAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPROCESS_LINKAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPROCESS_LINKAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPROCESS_LINKAGERowChangedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_LINKAGERowChanged(Me, New dtPROCESS_LINKAGERowChangeEvent(CType(e.Row,dtPROCESS_LINKAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPROCESS_LINKAGERowChangingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_LINKAGERowChanging(Me, New dtPROCESS_LINKAGERowChangeEvent(CType(e.Row,dtPROCESS_LINKAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPROCESS_LINKAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_LINKAGERowDeleted(Me, New dtPROCESS_LINKAGERowChangeEvent(CType(e.Row,dtPROCESS_LINKAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPROCESS_LINKAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_LINKAGERowDeleting(Me, New dtPROCESS_LINKAGERowChangeEvent(CType(e.Row,dtPROCESS_LINKAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPROCESS_LINKAGERow(ByVal row As dtPROCESS_LINKAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPROCESS_LINKAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtLOG_DATDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtLOG_DATRow)
        
        Private columnLOG_ID As Global.System.Data.DataColumn
        
        Private columnLOG_TYPE As Global.System.Data.DataColumn
        
        Private columnLOG_LEVEL As Global.System.Data.DataColumn
        
        Private columnPC_NAME As Global.System.Data.DataColumn
        
        Private columnOCC_DATE As Global.System.Data.DataColumn
        
        Private columnLOG_CODE As Global.System.Data.DataColumn
        
        Private columnMESSAGE As Global.System.Data.DataColumn
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnDATE As Global.System.Data.DataColumn
        
        Private columnTIME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtLOG_DAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PC_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPC_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OCC_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOCC_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MESSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMESSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtLOG_DATRow
            Get
                Return CType(Me.Rows(index),dtLOG_DATRow)
            End Get
        End Property
        
        Public Event dtLOG_DATRowChanging As dtLOG_DATRowChangeEventHandler
        
        Public Event dtLOG_DATRowChanged As dtLOG_DATRowChangeEventHandler
        
        Public Event dtLOG_DATRowDeleting As dtLOG_DATRowChangeEventHandler
        
        Public Event dtLOG_DATRowDeleted As dtLOG_DATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtLOG_DATRow(ByVal row As dtLOG_DATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtLOG_DATRow(ByVal LOG_TYPE As Integer, ByVal LOG_LEVEL As Integer, ByVal PC_NAME As String, ByVal OCC_DATE As Date, ByVal LOG_CODE As String, ByVal MESSAGE As String, ByVal parentdtPROCESS_MSTRowBydtPROCESS_MST_dtLOG_DAT As dtPROCESS_MSTRow, ByVal _DATE As String, ByVal TIME As String) As dtLOG_DATRow
            Dim rowdtLOG_DATRow As dtLOG_DATRow = CType(Me.NewRow,dtLOG_DATRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LOG_TYPE, LOG_LEVEL, PC_NAME, OCC_DATE, LOG_CODE, MESSAGE, Nothing, _DATE, TIME}
            If (Not (parentdtPROCESS_MSTRowBydtPROCESS_MST_dtLOG_DAT) Is Nothing) Then
                columnValuesArray(7) = parentdtPROCESS_MSTRowBydtPROCESS_MST_dtLOG_DAT(3)
            End If
            rowdtLOG_DATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtLOG_DATRow)
            Return rowdtLOG_DATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOG_ID(ByVal LOG_ID As Integer) As dtLOG_DATRow
            Return CType(Me.Rows.Find(New Object() {LOG_ID}),dtLOG_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtLOG_DATDataTable = CType(MyBase.Clone,dtLOG_DATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtLOG_DATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOG_ID = MyBase.Columns("LOG_ID")
            Me.columnLOG_TYPE = MyBase.Columns("LOG_TYPE")
            Me.columnLOG_LEVEL = MyBase.Columns("LOG_LEVEL")
            Me.columnPC_NAME = MyBase.Columns("PC_NAME")
            Me.columnOCC_DATE = MyBase.Columns("OCC_DATE")
            Me.columnLOG_CODE = MyBase.Columns("LOG_CODE")
            Me.columnMESSAGE = MyBase.Columns("MESSAGE")
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnDATE = MyBase.Columns("DATE")
            Me.columnTIME = MyBase.Columns("TIME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOG_ID = New Global.System.Data.DataColumn("LOG_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_ID)
            Me.columnLOG_TYPE = New Global.System.Data.DataColumn("LOG_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_TYPE)
            Me.columnLOG_LEVEL = New Global.System.Data.DataColumn("LOG_LEVEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_LEVEL)
            Me.columnPC_NAME = New Global.System.Data.DataColumn("PC_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPC_NAME)
            Me.columnOCC_DATE = New Global.System.Data.DataColumn("OCC_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOCC_DATE)
            Me.columnLOG_CODE = New Global.System.Data.DataColumn("LOG_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_CODE)
            Me.columnMESSAGE = New Global.System.Data.DataColumn("MESSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMESSAGE)
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnDATE = New Global.System.Data.DataColumn("DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DATEColumn")
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDATE")
            Me.columnDATE.ExtendedProperties.Add("Generator_UserColumnName", "DATE")
            MyBase.Columns.Add(Me.columnDATE)
            Me.columnTIME = New Global.System.Data.DataColumn("TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLOG_ID}, true))
            Me.columnLOG_ID.AutoIncrement = true
            Me.columnLOG_ID.AutoIncrementSeed = -1
            Me.columnLOG_ID.AutoIncrementStep = -1
            Me.columnLOG_ID.AllowDBNull = false
            Me.columnLOG_ID.ReadOnly = true
            Me.columnLOG_ID.Unique = true
            Me.columnLOG_TYPE.AllowDBNull = false
            Me.columnLOG_LEVEL.AllowDBNull = false
            Me.columnPC_NAME.MaxLength = 255
            Me.columnOCC_DATE.AllowDBNull = false
            Me.columnLOG_CODE.AllowDBNull = false
            Me.columnLOG_CODE.MaxLength = 15
            Me.columnMESSAGE.AllowDBNull = false
            Me.columnMESSAGE.MaxLength = 255
            Me.columnDATE.ReadOnly = true
            Me.columnDATE.MaxLength = 30
            Me.columnTIME.ReadOnly = true
            Me.columnTIME.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtLOG_DATRow() As dtLOG_DATRow
            Return CType(Me.NewRow,dtLOG_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtLOG_DATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtLOG_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtLOG_DATRowChangedEvent) Is Nothing) Then
                RaiseEvent dtLOG_DATRowChanged(Me, New dtLOG_DATRowChangeEvent(CType(e.Row,dtLOG_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtLOG_DATRowChangingEvent) Is Nothing) Then
                RaiseEvent dtLOG_DATRowChanging(Me, New dtLOG_DATRowChangeEvent(CType(e.Row,dtLOG_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtLOG_DATRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtLOG_DATRowDeleted(Me, New dtLOG_DATRowChangeEvent(CType(e.Row,dtLOG_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtLOG_DATRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtLOG_DATRowDeleting(Me, New dtLOG_DATRowChangeEvent(CType(e.Row,dtLOG_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtLOG_DATRow(ByVal row As dtLOG_DATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtLOG_DATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtFINISHING_LINEDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtFINISHING_LINERow)
        
        Private columnPRODUCTION_DATE As Global.System.Data.DataColumn
        
        Private columnON_TIME As Global.System.Data.DataColumn
        
        Private columnLOT_ID As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnBLOCK_MODEL As Global.System.Data.DataColumn
        
        Private columnBLOCK_SEQ As Global.System.Data.DataColumn
        
        Private columnPROCESS_RESULT_DATE As Global.System.Data.DataColumn
        
        Private columnIMPORT_CODE As Global.System.Data.DataColumn
        
        Private columnGA_SHOP As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtFINISHING_LINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_MODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_RESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GA_SHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGA_SHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtFINISHING_LINERow
            Get
                Return CType(Me.Rows(index),dtFINISHING_LINERow)
            End Get
        End Property
        
        Public Event dtFINISHING_LINERowChanging As dtFINISHING_LINERowChangeEventHandler
        
        Public Event dtFINISHING_LINERowChanged As dtFINISHING_LINERowChangeEventHandler
        
        Public Event dtFINISHING_LINERowDeleting As dtFINISHING_LINERowChangeEventHandler
        
        Public Event dtFINISHING_LINERowDeleted As dtFINISHING_LINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtFINISHING_LINERow(ByVal row As dtFINISHING_LINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtFINISHING_LINERow(ByVal PRODUCTION_DATE As String, ByVal ON_TIME As String, ByVal LOT_ID As String, ByVal SKIT_NO As Integer, ByVal MODEL_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal BLOCK_MODEL As String, ByVal BLOCK_SEQ As String, ByVal PROCESS_RESULT_DATE As String, ByVal IMPORT_CODE As String, ByVal GA_SHOP As String, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String) As dtFINISHING_LINERow
            Dim rowdtFINISHING_LINERow As dtFINISHING_LINERow = CType(Me.NewRow,dtFINISHING_LINERow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTION_DATE, ON_TIME, LOT_ID, SKIT_NO, MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, PROCESS_RESULT_DATE, IMPORT_CODE, GA_SHOP, MODEL_YEAR, SUFFIX_CODE}
            rowdtFINISHING_LINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtFINISHING_LINERow)
            Return rowdtFINISHING_LINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtFINISHING_LINEDataTable = CType(MyBase.Clone,dtFINISHING_LINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtFINISHING_LINEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTION_DATE = MyBase.Columns("PRODUCTION_DATE")
            Me.columnON_TIME = MyBase.Columns("ON_TIME")
            Me.columnLOT_ID = MyBase.Columns("LOT_ID")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnBLOCK_MODEL = MyBase.Columns("BLOCK_MODEL")
            Me.columnBLOCK_SEQ = MyBase.Columns("BLOCK_SEQ")
            Me.columnPROCESS_RESULT_DATE = MyBase.Columns("PROCESS_RESULT_DATE")
            Me.columnIMPORT_CODE = MyBase.Columns("IMPORT_CODE")
            Me.columnGA_SHOP = MyBase.Columns("GA_SHOP")
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTION_DATE = New Global.System.Data.DataColumn("PRODUCTION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION_DATE)
            Me.columnON_TIME = New Global.System.Data.DataColumn("ON_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_TIME)
            Me.columnLOT_ID = New Global.System.Data.DataColumn("LOT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ID)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnBLOCK_MODEL = New Global.System.Data.DataColumn("BLOCK_MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_MODEL)
            Me.columnBLOCK_SEQ = New Global.System.Data.DataColumn("BLOCK_SEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_SEQ)
            Me.columnPROCESS_RESULT_DATE = New Global.System.Data.DataColumn("PROCESS_RESULT_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_RESULT_DATE)
            Me.columnIMPORT_CODE = New Global.System.Data.DataColumn("IMPORT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_CODE)
            Me.columnGA_SHOP = New Global.System.Data.DataColumn("GA_SHOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGA_SHOP)
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnPRODUCTION_DATE.MaxLength = 8
            Me.columnON_TIME.MaxLength = 4
            Me.columnLOT_ID.MaxLength = 3
            Me.columnSKIT_NO.AllowDBNull = false
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnBLOCK_MODEL.MaxLength = 8
            Me.columnBLOCK_SEQ.MaxLength = 3
            Me.columnPROCESS_RESULT_DATE.ReadOnly = true
            Me.columnPROCESS_RESULT_DATE.MaxLength = 61
            Me.columnIMPORT_CODE.MaxLength = 10
            Me.columnGA_SHOP.MaxLength = 2
            Me.columnMODEL_YEAR.AllowDBNull = false
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.AllowDBNull = false
            Me.columnSUFFIX_CODE.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtFINISHING_LINERow() As dtFINISHING_LINERow
            Return CType(Me.NewRow,dtFINISHING_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtFINISHING_LINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtFINISHING_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtFINISHING_LINERowChangedEvent) Is Nothing) Then
                RaiseEvent dtFINISHING_LINERowChanged(Me, New dtFINISHING_LINERowChangeEvent(CType(e.Row,dtFINISHING_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtFINISHING_LINERowChangingEvent) Is Nothing) Then
                RaiseEvent dtFINISHING_LINERowChanging(Me, New dtFINISHING_LINERowChangeEvent(CType(e.Row,dtFINISHING_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtFINISHING_LINERowDeletedEvent) Is Nothing) Then
                RaiseEvent dtFINISHING_LINERowDeleted(Me, New dtFINISHING_LINERowChangeEvent(CType(e.Row,dtFINISHING_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtFINISHING_LINERowDeletingEvent) Is Nothing) Then
                RaiseEvent dtFINISHING_LINERowDeleting(Me, New dtFINISHING_LINERowChangeEvent(CType(e.Row,dtFINISHING_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtFINISHING_LINERow(ByVal row As dtFINISHING_LINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtFINISHING_LINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtMESSAGE_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtMESSAGE_MSTRow)
        
        Private columnLOG_CODE As Global.System.Data.DataColumn
        
        Private columnLOG_MESSAGE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtMESSAGE_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_MESSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_MESSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtMESSAGE_MSTRow
            Get
                Return CType(Me.Rows(index),dtMESSAGE_MSTRow)
            End Get
        End Property
        
        Public Event dtMESSAGE_MSTRowChanging As dtMESSAGE_MSTRowChangeEventHandler
        
        Public Event dtMESSAGE_MSTRowChanged As dtMESSAGE_MSTRowChangeEventHandler
        
        Public Event dtMESSAGE_MSTRowDeleting As dtMESSAGE_MSTRowChangeEventHandler
        
        Public Event dtMESSAGE_MSTRowDeleted As dtMESSAGE_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtMESSAGE_MSTRow(ByVal row As dtMESSAGE_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtMESSAGE_MSTRow(ByVal LOG_CODE As String, ByVal LOG_MESSAGE As String) As dtMESSAGE_MSTRow
            Dim rowdtMESSAGE_MSTRow As dtMESSAGE_MSTRow = CType(Me.NewRow,dtMESSAGE_MSTRow)
            Dim columnValuesArray() As Object = New Object() {LOG_CODE, LOG_MESSAGE}
            rowdtMESSAGE_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtMESSAGE_MSTRow)
            Return rowdtMESSAGE_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOG_CODE(ByVal LOG_CODE As String) As dtMESSAGE_MSTRow
            Return CType(Me.Rows.Find(New Object() {LOG_CODE}),dtMESSAGE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtMESSAGE_MSTDataTable = CType(MyBase.Clone,dtMESSAGE_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtMESSAGE_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOG_CODE = MyBase.Columns("LOG_CODE")
            Me.columnLOG_MESSAGE = MyBase.Columns("LOG_MESSAGE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOG_CODE = New Global.System.Data.DataColumn("LOG_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_CODE)
            Me.columnLOG_MESSAGE = New Global.System.Data.DataColumn("LOG_MESSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_MESSAGE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLOG_CODE}, true))
            Me.columnLOG_CODE.AllowDBNull = false
            Me.columnLOG_CODE.Unique = true
            Me.columnLOG_CODE.MaxLength = 15
            Me.columnLOG_MESSAGE.AllowDBNull = false
            Me.columnLOG_MESSAGE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtMESSAGE_MSTRow() As dtMESSAGE_MSTRow
            Return CType(Me.NewRow,dtMESSAGE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtMESSAGE_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtMESSAGE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtMESSAGE_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtMESSAGE_MSTRowChanged(Me, New dtMESSAGE_MSTRowChangeEvent(CType(e.Row,dtMESSAGE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtMESSAGE_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtMESSAGE_MSTRowChanging(Me, New dtMESSAGE_MSTRowChangeEvent(CType(e.Row,dtMESSAGE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtMESSAGE_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtMESSAGE_MSTRowDeleted(Me, New dtMESSAGE_MSTRowChangeEvent(CType(e.Row,dtMESSAGE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtMESSAGE_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtMESSAGE_MSTRowDeleting(Me, New dtMESSAGE_MSTRowChangeEvent(CType(e.Row,dtMESSAGE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtMESSAGE_MSTRow(ByVal row As dtMESSAGE_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtMESSAGE_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPlcStatusDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPlcStatusRow)
        
        Private columnPROCESS_NAME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TIME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TYPE As Global.System.Data.DataColumn
        
        Private columnENTRANCE_FLAG As Global.System.Data.DataColumn
        
        Private columnPROCESS_CODE As Global.System.Data.DataColumn
        
        Private columnSTAGE_CODE As Global.System.Data.DataColumn
        
        Private columnCUR_STATUS As Global.System.Data.DataColumn
        
        Private columnLASTEST_MSG As Global.System.Data.DataColumn
        
        Private columnSTRING_PROCESS_NO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPlcStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENTRANCE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTRANCE_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STAGE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAGE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUR_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUR_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTEST_MSGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTEST_MSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRING_PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRING_PROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPlcStatusRow
            Get
                Return CType(Me.Rows(index),dtPlcStatusRow)
            End Get
        End Property
        
        Public Event dtPlcStatusRowChanging As dtPlcStatusRowChangeEventHandler
        
        Public Event dtPlcStatusRowChanged As dtPlcStatusRowChangeEventHandler
        
        Public Event dtPlcStatusRowDeleting As dtPlcStatusRowChangeEventHandler
        
        Public Event dtPlcStatusRowDeleted As dtPlcStatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPlcStatusRow(ByVal row As dtPlcStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPlcStatusRow(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean, ByVal PROCESS_CODE As Integer, ByVal STAGE_CODE As Integer, ByVal CUR_STATUS As String, ByVal LASTEST_MSG As String, ByVal STRING_PROCESS_NO As String) As dtPlcStatusRow
            Dim rowdtPlcStatusRow As dtPlcStatusRow = CType(Me.NewRow,dtPlcStatusRow)
            Dim columnValuesArray() As Object = New Object() {PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, ENTRANCE_FLAG, PROCESS_CODE, STAGE_CODE, CUR_STATUS, LASTEST_MSG, STRING_PROCESS_NO}
            rowdtPlcStatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPlcStatusRow)
            Return rowdtPlcStatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPlcStatusDataTable = CType(MyBase.Clone,dtPlcStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPlcStatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROCESS_NAME = MyBase.Columns("PROCESS_NAME")
            Me.columnPROCESS_TIME = MyBase.Columns("PROCESS_TIME")
            Me.columnPROCESS_TYPE = MyBase.Columns("PROCESS_TYPE")
            Me.columnENTRANCE_FLAG = MyBase.Columns("ENTRANCE_FLAG")
            Me.columnPROCESS_CODE = MyBase.Columns("PROCESS_CODE")
            Me.columnSTAGE_CODE = MyBase.Columns("STAGE_CODE")
            Me.columnCUR_STATUS = MyBase.Columns("CUR_STATUS")
            Me.columnLASTEST_MSG = MyBase.Columns("LASTEST_MSG")
            Me.columnSTRING_PROCESS_NO = MyBase.Columns("STRING_PROCESS_NO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROCESS_NAME = New Global.System.Data.DataColumn("PROCESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NAME)
            Me.columnPROCESS_TIME = New Global.System.Data.DataColumn("PROCESS_TIME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TIME)
            Me.columnPROCESS_TYPE = New Global.System.Data.DataColumn("PROCESS_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TYPE)
            Me.columnENTRANCE_FLAG = New Global.System.Data.DataColumn("ENTRANCE_FLAG", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTRANCE_FLAG)
            Me.columnPROCESS_CODE = New Global.System.Data.DataColumn("PROCESS_CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_CODE)
            Me.columnSTAGE_CODE = New Global.System.Data.DataColumn("STAGE_CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAGE_CODE)
            Me.columnCUR_STATUS = New Global.System.Data.DataColumn("CUR_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUR_STATUS)
            Me.columnLASTEST_MSG = New Global.System.Data.DataColumn("LASTEST_MSG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTEST_MSG)
            Me.columnSTRING_PROCESS_NO = New Global.System.Data.DataColumn("STRING_PROCESS_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRING_PROCESS_NO)
            Me.columnPROCESS_NAME.AllowDBNull = false
            Me.columnPROCESS_NAME.MaxLength = 60
            Me.columnPROCESS_TIME.AllowDBNull = false
            Me.columnPROCESS_TYPE.AllowDBNull = false
            Me.columnENTRANCE_FLAG.AllowDBNull = false
            Me.columnPROCESS_CODE.AllowDBNull = false
            Me.columnSTAGE_CODE.AllowDBNull = false
            Me.columnSTRING_PROCESS_NO.ReadOnly = true
            Me.columnSTRING_PROCESS_NO.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPlcStatusRow() As dtPlcStatusRow
            Return CType(Me.NewRow,dtPlcStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPlcStatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPlcStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPlcStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPlcStatusRowChanged(Me, New dtPlcStatusRowChangeEvent(CType(e.Row,dtPlcStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPlcStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPlcStatusRowChanging(Me, New dtPlcStatusRowChangeEvent(CType(e.Row,dtPlcStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPlcStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPlcStatusRowDeleted(Me, New dtPlcStatusRowChangeEvent(CType(e.Row,dtPlcStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPlcStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPlcStatusRowDeleting(Me, New dtPlcStatusRowChangeEvent(CType(e.Row,dtPlcStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPlcStatusRow(ByVal row As dtPlcStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPlcStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPBRPassResultDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPBRPassResultRow)
        
        Private columnPRODUCTION_DATE As Global.System.Data.DataColumn
        
        Private columnON_TIME As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnLOT_ID As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnBLOCK_MODEL As Global.System.Data.DataColumn
        
        Private columnBLOCK_SEQ As Global.System.Data.DataColumn
        
        Private columnIMPORT_CODE As Global.System.Data.DataColumn
        
        Private columnGA_SHOP As Global.System.Data.DataColumn
        
        Private columnBLANK_COL As Global.System.Data.DataColumn
        
        Private columnPBR_ON As Global.System.Data.DataColumn
        
        Private columnPBR_OFF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPBRPassResult"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_MODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GA_SHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGA_SHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLANK_COLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLANK_COL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PBR_ONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPBR_ON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PBR_OFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPBR_OFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPBRPassResultRow
            Get
                Return CType(Me.Rows(index),dtPBRPassResultRow)
            End Get
        End Property
        
        Public Event dtPBRPassResultRowChanging As dtPBRPassResultRowChangeEventHandler
        
        Public Event dtPBRPassResultRowChanged As dtPBRPassResultRowChangeEventHandler
        
        Public Event dtPBRPassResultRowDeleting As dtPBRPassResultRowChangeEventHandler
        
        Public Event dtPBRPassResultRowDeleted As dtPBRPassResultRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPBRPassResultRow(ByVal row As dtPBRPassResultRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPBRPassResultRow(ByVal PRODUCTION_DATE As String, ByVal ON_TIME As String, ByVal SKIT_NO As Integer, ByVal LOT_ID As String, ByVal MODEL_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal BLOCK_MODEL As String, ByVal BLOCK_SEQ As String, ByVal IMPORT_CODE As String, ByVal GA_SHOP As String, ByVal BLANK_COL As String, ByVal PBR_ON As String, ByVal PBR_OFF As String) As dtPBRPassResultRow
            Dim rowdtPBRPassResultRow As dtPBRPassResultRow = CType(Me.NewRow,dtPBRPassResultRow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, IMPORT_CODE, GA_SHOP, BLANK_COL, PBR_ON, PBR_OFF}
            rowdtPBRPassResultRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPBRPassResultRow)
            Return rowdtPBRPassResultRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPBRPassResultDataTable = CType(MyBase.Clone,dtPBRPassResultDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPBRPassResultDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTION_DATE = MyBase.Columns("PRODUCTION_DATE")
            Me.columnON_TIME = MyBase.Columns("ON_TIME")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnLOT_ID = MyBase.Columns("LOT_ID")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnBLOCK_MODEL = MyBase.Columns("BLOCK_MODEL")
            Me.columnBLOCK_SEQ = MyBase.Columns("BLOCK_SEQ")
            Me.columnIMPORT_CODE = MyBase.Columns("IMPORT_CODE")
            Me.columnGA_SHOP = MyBase.Columns("GA_SHOP")
            Me.columnBLANK_COL = MyBase.Columns("BLANK_COL")
            Me.columnPBR_ON = MyBase.Columns("PBR_ON")
            Me.columnPBR_OFF = MyBase.Columns("PBR_OFF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTION_DATE = New Global.System.Data.DataColumn("PRODUCTION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION_DATE)
            Me.columnON_TIME = New Global.System.Data.DataColumn("ON_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_TIME)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnLOT_ID = New Global.System.Data.DataColumn("LOT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ID)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnBLOCK_MODEL = New Global.System.Data.DataColumn("BLOCK_MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_MODEL)
            Me.columnBLOCK_SEQ = New Global.System.Data.DataColumn("BLOCK_SEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_SEQ)
            Me.columnIMPORT_CODE = New Global.System.Data.DataColumn("IMPORT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_CODE)
            Me.columnGA_SHOP = New Global.System.Data.DataColumn("GA_SHOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGA_SHOP)
            Me.columnBLANK_COL = New Global.System.Data.DataColumn("BLANK_COL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLANK_COL)
            Me.columnPBR_ON = New Global.System.Data.DataColumn("PBR_ON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPBR_ON)
            Me.columnPBR_OFF = New Global.System.Data.DataColumn("PBR_OFF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPBR_OFF)
            Me.columnPRODUCTION_DATE.MaxLength = 8
            Me.columnON_TIME.MaxLength = 4
            Me.columnLOT_ID.MaxLength = 3
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnBLOCK_MODEL.MaxLength = 8
            Me.columnBLOCK_SEQ.MaxLength = 3
            Me.columnIMPORT_CODE.MaxLength = 10
            Me.columnGA_SHOP.MaxLength = 2
            Me.columnBLANK_COL.ReadOnly = true
            Me.columnBLANK_COL.MaxLength = 1
            Me.columnPBR_ON.ReadOnly = true
            Me.columnPBR_ON.MaxLength = 61
            Me.columnPBR_OFF.ReadOnly = true
            Me.columnPBR_OFF.MaxLength = 61
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPBRPassResultRow() As dtPBRPassResultRow
            Return CType(Me.NewRow,dtPBRPassResultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPBRPassResultRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPBRPassResultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPBRPassResultRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPBRPassResultRowChanged(Me, New dtPBRPassResultRowChangeEvent(CType(e.Row,dtPBRPassResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPBRPassResultRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPBRPassResultRowChanging(Me, New dtPBRPassResultRowChangeEvent(CType(e.Row,dtPBRPassResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPBRPassResultRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPBRPassResultRowDeleted(Me, New dtPBRPassResultRowChangeEvent(CType(e.Row,dtPBRPassResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPBRPassResultRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPBRPassResultRowDeleting(Me, New dtPBRPassResultRowChangeEvent(CType(e.Row,dtPBRPassResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPBRPassResultRow(ByVal row As dtPBRPassResultRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPBRPassResultDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtProcessTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtProcessTypeRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtProcessType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtProcessTypeRow
            Get
                Return CType(Me.Rows(index),dtProcessTypeRow)
            End Get
        End Property
        
        Public Event dtProcessTypeRowChanging As dtProcessTypeRowChangeEventHandler
        
        Public Event dtProcessTypeRowChanged As dtProcessTypeRowChangeEventHandler
        
        Public Event dtProcessTypeRowDeleting As dtProcessTypeRowChangeEventHandler
        
        Public Event dtProcessTypeRowDeleted As dtProcessTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtProcessTypeRow(ByVal row As dtProcessTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtProcessTypeRow(ByVal ID As Integer, ByVal NAME As String) As dtProcessTypeRow
            Dim rowdtProcessTypeRow As dtProcessTypeRow = CType(Me.NewRow,dtProcessTypeRow)
            Dim columnValuesArray() As Object = New Object() {ID, NAME}
            rowdtProcessTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtProcessTypeRow)
            Return rowdtProcessTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtProcessTypeDataTable = CType(MyBase.Clone,dtProcessTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtProcessTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnNAME = MyBase.Columns("NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtProcessTypeRow() As dtProcessTypeRow
            Return CType(Me.NewRow,dtProcessTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtProcessTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtProcessTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtProcessTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent dtProcessTypeRowChanged(Me, New dtProcessTypeRowChangeEvent(CType(e.Row,dtProcessTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtProcessTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent dtProcessTypeRowChanging(Me, New dtProcessTypeRowChangeEvent(CType(e.Row,dtProcessTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtProcessTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtProcessTypeRowDeleted(Me, New dtProcessTypeRowChangeEvent(CType(e.Row,dtProcessTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtProcessTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtProcessTypeRowDeleting(Me, New dtProcessTypeRowChangeEvent(CType(e.Row,dtProcessTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtProcessTypeRow(ByVal row As dtProcessTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPAINT = New dsPAINT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtProcessTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtMODEL_OPTION_ROWRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtMODEL_OPTION_ROW As dtMODEL_OPTION_ROWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtMODEL_OPTION_ROW = CType(Me.Table,dtMODEL_OPTION_ROWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_OPTION_ROW_ID() As Integer
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_ROW.MODEL_OPTION_ROW_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_ROW.MODEL_OPTION_ROW_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR_PATTERN() As String
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_ROW.MODEL_YEAR_PATTERNColumn),String)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_ROW.MODEL_YEAR_PATTERNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE_PATTERN() As String
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_ROW.SUFFIX_CODE_PATTERNColumn),String)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_ROW.SUFFIX_CODE_PATTERNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMODEL_OPTION_ROW.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtMODEL_OPTION_ROW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_ROW.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtMODEL_OPTION_ROW.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtMODEL_OPTION_ROW.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtMODEL_OPTION_CELLRows() As dtMODEL_OPTION_CELLRow()
            If (Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID") Is Nothing) Then
                Return New dtMODEL_OPTION_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID")),dtMODEL_OPTION_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtINSTRUCTION_DATARows() As dtINSTRUCTION_DATARow()
            If (Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1") Is Nothing) Then
                Return New dtINSTRUCTION_DATARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1")),dtINSTRUCTION_DATARow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtSKIT_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtSKIT_MST As dtSKIT_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtSKIT_MST = CType(Me.Table,dtSKIT_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Return CType(Me(Me.tabledtSKIT_MST.SKIT_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtSKIT_MST.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                If Me.IsMODEL_YEARNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tabledtSKIT_MST.MODEL_YEARColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtSKIT_MST.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                If Me.IsSUFFIX_CODENull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tabledtSKIT_MST.SUFFIX_CODEColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtSKIT_MST.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                If Me.IsLOT_NONull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tabledtSKIT_MST.LOT_NOColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtSKIT_MST.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                If Me.IsUNITNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tabledtSKIT_MST.UNITColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtSKIT_MST.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPRODUCTION_DATRowParent() As dtPRODUCTION_DATRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")),dtPRODUCTION_DATRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtFINISHING_LINERowParent() As dtFINISHING_LINERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1")),dtFINISHING_LINERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_YEARNull() As Boolean
            Return Me.IsNull(Me.tabledtSKIT_MST.MODEL_YEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_YEARNull()
            Me(Me.tabledtSKIT_MST.MODEL_YEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUFFIX_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtSKIT_MST.SUFFIX_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUFFIX_CODENull()
            Me(Me.tabledtSKIT_MST.SUFFIX_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_NONull() As Boolean
            Return Me.IsNull(Me.tabledtSKIT_MST.LOT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_NONull()
            Me(Me.tabledtSKIT_MST.LOT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNITNull() As Boolean
            Return Me.IsNull(Me.tabledtSKIT_MST.UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNITNull()
            Me(Me.tabledtSKIT_MST.UNITColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtWBS_ONRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtWBS_ON As dtWBS_ONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtWBS_ON = CType(Me.Table,dtWBS_ONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LANE_NO() As Integer
            Get
                Return CType(Me(Me.tabledtWBS_ON.LANE_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtWBS_ON.LANE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEQUENCE() As Integer
            Get
                Return CType(Me(Me.tabledtWBS_ON.SEQUENCEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtWBS_ON.SEQUENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                Return CType(Me(Me.tabledtWBS_ON.MODEL_YEARColumn),String)
            End Get
            Set
                Me(Me.tabledtWBS_ON.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                Return CType(Me(Me.tabledtWBS_ON.SUFFIX_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtWBS_ON.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtWBS_ON.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtWBS_ON.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtWBS_ON.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtWBS_ON.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSITION() As String
            Get
                If Me.IsPOSITIONNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tabledtWBS_ON.POSITIONColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtWBS_ON.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtLANE_MSTRow() As dtLANE_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_WBS_ON_LANE_NO")),dtLANE_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_WBS_ON_LANE_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPRODUCTION_DATRowParent() As dtPRODUCTION_DATRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")),dtPRODUCTION_DATRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSITIONNull() As Boolean
            Return Me.IsNull(Me.tabledtWBS_ON.POSITIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSITIONNull()
            Me(Me.tabledtWBS_ON.POSITIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtLANE_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtLANE_MST As dtLANE_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtLANE_MST = CType(Me.Table,dtLANE_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LANE_NO() As Integer
            Get
                Return CType(Me(Me.tabledtLANE_MST.LANE_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtLANE_MST.LANE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtWBS_ONRows() As dtWBS_ONRow()
            If (Me.Table.ChildRelations("FK_T_WBS_ON_LANE_NO") Is Nothing) Then
                Return New dtWBS_ONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_WBS_ON_LANE_NO")),dtWBS_ONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtMODEL_OPTION_CELLRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtMODEL_OPTION_CELL As dtMODEL_OPTION_CELLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtMODEL_OPTION_CELL = CType(Me.Table,dtMODEL_OPTION_CELLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_OPTION_ROW_ID() As Integer
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_CELL.MODEL_OPTION_ROW_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_CELL.MODEL_OPTION_ROW_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_ID() As Integer
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_CELL.OPTION_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_CELL.OPTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_USED() As Boolean
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_CELL.IS_USEDColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_CELL.IS_USEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtMODEL_OPTION_ROWRow() As dtMODEL_OPTION_ROWRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID")),dtMODEL_OPTION_ROWRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtOPTION_MSTRow() As dtOPTION_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID")),dtOPTION_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtINSTRUCTION_DATARow
        Inherits Global.System.Data.DataRow
        
        Private tabledtINSTRUCTION_DATA As dtINSTRUCTION_DATADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtINSTRUCTION_DATA = CType(Me.Table,dtINSTRUCTION_DATADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                Return CType(Me(Me.tabledtINSTRUCTION_DATA.MODEL_YEARColumn),String)
            End Get
            Set
                Me(Me.tabledtINSTRUCTION_DATA.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                Return CType(Me(Me.tabledtINSTRUCTION_DATA.SUFFIX_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtINSTRUCTION_DATA.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtINSTRUCTION_DATA.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtINSTRUCTION_DATA.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtINSTRUCTION_DATA.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtINSTRUCTION_DATA.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_OPTION_ROW_ID() As Integer
            Get
                Return CType(Me(Me.tabledtINSTRUCTION_DATA.MODEL_OPTION_ROW_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtINSTRUCTION_DATA.MODEL_OPTION_ROW_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_ID() As Integer
            Get
                Return CType(Me(Me.tabledtINSTRUCTION_DATA.OPTION_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtINSTRUCTION_DATA.OPTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_DISPLAY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtINSTRUCTION_DATA.OPTION_DISPLAYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTION_DISPLAY' in table 'dtINSTRUCTION_DATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtINSTRUCTION_DATA.OPTION_DISPLAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtMODEL_OPTION_ROWRow() As dtMODEL_OPTION_ROWRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1")),dtMODEL_OPTION_ROWRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtOPTION_MSTRow() As dtOPTION_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("dtOPTION_MST_dtINSTRUCTION_DATA")),dtOPTION_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("dtOPTION_MST_dtINSTRUCTION_DATA"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTION_DISPLAYNull() As Boolean
            Return Me.IsNull(Me.tabledtINSTRUCTION_DATA.OPTION_DISPLAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTION_DISPLAYNull()
            Me(Me.tabledtINSTRUCTION_DATA.OPTION_DISPLAYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPRODUCTION_DATRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPRODUCTION_DAT As dtPRODUCTION_DATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPRODUCTION_DAT = CType(Me.Table,dtPRODUCTION_DATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDEX_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.INDEX_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INDEX_NO' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.INDEX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTION_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.PRODUCTION_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION_DATE' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.PRODUCTION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ON_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.ON_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ON_TIME' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.SKIT_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKIT_NO' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.LOT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOT_ID' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.LOT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                Return CType(Me(Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn),String)
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                Return CType(Me(Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPRODUCTION_DAT.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPRODUCTION_DAT.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BLOCK_MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_MODEL' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BLOCK_MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_SEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BLOCK_SEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_SEQ' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BLOCK_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.IMPORT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT_CODE' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.IMPORT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GA_SHOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.GA_SHOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GA_SHOP' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.GA_SHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LANE_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.LANE_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LANE_NO' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.LANE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURRENT_PROCESS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.CURRENT_PROCESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENT_PROCESS' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.CURRENT_PROCESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEQ_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.SEQ_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEQ_NO' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SEQ_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MARK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.MARKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MARK' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.MARKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHIFT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.SHIFTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIFT' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SHIFTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y_CHASSIS_FLAG() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.Y_CHASSIS_FLAGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Y_CHASSIS_FLAG' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.Y_CHASSIS_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BODY_SHOP_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BODY_SHOP_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BODY_SHOP_CODE' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BODY_SHOP_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HANDLE_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.HANDLE_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HANDLE_TYPE' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.HANDLE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BODY_COLOR_TC_SW() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_TC_SWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BODY_COLOR_TC_SW' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_TC_SWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BODY_COLOR_SEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_SEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BODY_COLOR_SEQ' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BODY_COLOR_OPT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_OPTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BODY_COLOR_OPT' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_OPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BODY_COLOR_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BODY_COLOR_NAME' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURFACE_COLOR_SF_SW() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_SF_SWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SURFACE_COLOR_SF_SW' in table 'dtPRODUCTION_DAT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_SF_SWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURFACE_COLOR_XXX() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_XXXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SURFACE_COLOR_XXX' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_XXXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURFACE_COLOR_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SURFACE_COLOR_NAME' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FILE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.FILE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FILE_NAME' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.FILE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINDEX_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.INDEX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINDEX_NONull()
            Me(Me.tabledtPRODUCTION_DAT.INDEX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTION_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.PRODUCTION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTION_DATENull()
            Me(Me.tabledtPRODUCTION_DAT.PRODUCTION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsON_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.ON_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetON_TIMENull()
            Me(Me.tabledtPRODUCTION_DAT.ON_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKIT_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.SKIT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKIT_NONull()
            Me(Me.tabledtPRODUCTION_DAT.SKIT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.LOT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_IDNull()
            Me(Me.tabledtPRODUCTION_DAT.LOT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtPRODUCTION_DAT.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_MODELNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BLOCK_MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_MODELNull()
            Me(Me.tabledtPRODUCTION_DAT.BLOCK_MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_SEQNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BLOCK_SEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_SEQNull()
            Me(Me.tabledtPRODUCTION_DAT.BLOCK_SEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORT_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.IMPORT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORT_CODENull()
            Me(Me.tabledtPRODUCTION_DAT.IMPORT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGA_SHOPNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.GA_SHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGA_SHOPNull()
            Me(Me.tabledtPRODUCTION_DAT.GA_SHOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLANE_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.LANE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLANE_NONull()
            Me(Me.tabledtPRODUCTION_DAT.LANE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURRENT_PROCESSNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.CURRENT_PROCESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURRENT_PROCESSNull()
            Me(Me.tabledtPRODUCTION_DAT.CURRENT_PROCESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEQ_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.SEQ_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEQ_NONull()
            Me(Me.tabledtPRODUCTION_DAT.SEQ_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMARKNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.MARKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMARKNull()
            Me(Me.tabledtPRODUCTION_DAT.MARKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHIFTNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.SHIFTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHIFTNull()
            Me(Me.tabledtPRODUCTION_DAT.SHIFTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsY_CHASSIS_FLAGNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.Y_CHASSIS_FLAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetY_CHASSIS_FLAGNull()
            Me(Me.tabledtPRODUCTION_DAT.Y_CHASSIS_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBODY_SHOP_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BODY_SHOP_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBODY_SHOP_CODENull()
            Me(Me.tabledtPRODUCTION_DAT.BODY_SHOP_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHANDLE_TYPENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.HANDLE_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHANDLE_TYPENull()
            Me(Me.tabledtPRODUCTION_DAT.HANDLE_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBODY_COLOR_TC_SWNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BODY_COLOR_TC_SWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBODY_COLOR_TC_SWNull()
            Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_TC_SWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBODY_COLOR_SEQNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BODY_COLOR_SEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBODY_COLOR_SEQNull()
            Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_SEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBODY_COLOR_OPTNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BODY_COLOR_OPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBODY_COLOR_OPTNull()
            Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_OPTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBODY_COLOR_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BODY_COLOR_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBODY_COLOR_NAMENull()
            Me(Me.tabledtPRODUCTION_DAT.BODY_COLOR_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSURFACE_COLOR_SF_SWNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_SF_SWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSURFACE_COLOR_SF_SWNull()
            Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_SF_SWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSURFACE_COLOR_XXXNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_XXXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSURFACE_COLOR_XXXNull()
            Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_XXXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSURFACE_COLOR_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSURFACE_COLOR_NAMENull()
            Me(Me.tabledtPRODUCTION_DAT.SURFACE_COLOR_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFILE_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.FILE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFILE_NAMENull()
            Me(Me.tabledtPRODUCTION_DAT.FILE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtSKIT_MSTRows() As dtSKIT_MSTRow()
            If (Me.Table.ChildRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT") Is Nothing) Then
                Return New dtSKIT_MSTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")),dtSKIT_MSTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPAINT_CELLRows() As dtPAINT_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT") Is Nothing) Then
                Return New dtPAINT_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT")),dtPAINT_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtWBS_ONRows() As dtWBS_ONRow()
            If (Me.Table.ChildRelations("FK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT") Is Nothing) Then
                Return New dtWBS_ONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_WBS_ON_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")),dtWBS_ONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtOPTION_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtOPTION_MST As dtOPTION_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtOPTION_MST = CType(Me.Table,dtOPTION_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_ID() As Integer
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_NAME() As String
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_NAMEColumn),String)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_SEQ() As Integer
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_SEQColumn),Integer)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_CODE() As String
            Get
                If Me.IsOPTION_CODENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtOPTION_MST.OPTION_CODEColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_DISPLAY() As String
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_DISPLAYColumn),String)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_DISPLAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_TYPE() As Integer
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_TYPEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_SEQ_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOPTION_MST.OPTION_SEQ_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTION_SEQ_NAME' in table 'dtOPTION_MST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_SEQ_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTION_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtOPTION_MST.OPTION_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTION_CODENull()
            Me(Me.tabledtOPTION_MST.OPTION_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTION_SEQ_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtOPTION_MST.OPTION_SEQ_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTION_SEQ_NAMENull()
            Me(Me.tabledtOPTION_MST.OPTION_SEQ_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtMODEL_OPTION_CELLRows() As dtMODEL_OPTION_CELLRow()
            If (Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID") Is Nothing) Then
                Return New dtMODEL_OPTION_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID")),dtMODEL_OPTION_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtINSTRUCTION_DATARows() As dtINSTRUCTION_DATARow()
            If (Me.Table.ChildRelations("dtOPTION_MST_dtINSTRUCTION_DATA") Is Nothing) Then
                Return New dtINSTRUCTION_DATARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("dtOPTION_MST_dtINSTRUCTION_DATA")),dtINSTRUCTION_DATARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_OPTION_CELLRows() As dtPROCESS_OPTION_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_OPTION_CELL_OPTION_ID") Is Nothing) Then
                Return New dtPROCESS_OPTION_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_OPTION_CELL_OPTION_ID")),dtPROCESS_OPTION_CELLRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPAINT_CELLRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPAINT_CELL As dtPAINT_CELLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPAINT_CELL = CType(Me.Table,dtPAINT_CELLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.MODEL_YEARColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.SUFFIX_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESULT_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_CELL.RESULT_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESULT_DATE' in table 'dtPAINT_CELL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_RESULT_DATE() As Date
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.PROCESS_RESULT_DATEColumn),Date)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.PROCESS_RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPRODUCTION_DATRowParent() As dtPRODUCTION_DATRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT")),dtPRODUCTION_DATRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtFINISHING_LINERowParent() As dtFINISHING_LINERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1")),dtFINISHING_LINERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PAINT_CELL_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PAINT_CELL_PROCESS_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESULT_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_CELL.RESULT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESULT_DATENull()
            Me(Me.tabledtPAINT_CELL.RESULT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPAINT_PROGRESSRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPAINT_PROGRESS As dtPAINT_PROGRESSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPAINT_PROGRESS = CType(Me.Table,dtPAINT_PROGRESSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTION_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.PRODUCTION_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION_DATE' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.PRODUCTION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ON_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.ON_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ON_TIME' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.SKIT_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKIT_NO' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.LOT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOT_ID' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.LOT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPAINT_PROGRESS.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPAINT_PROGRESS.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.BLOCK_MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_MODEL' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.BLOCK_MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_SEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.BLOCK_SEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_SEQ' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.BLOCK_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.IMPORT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT_CODE' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.IMPORT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GA_SHOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.GA_SHOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GA_SHOP' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.GA_SHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_RESULT_DATE() As Date
            Get
                Return CType(Me(Me.tabledtPAINT_PROGRESS.PROCESS_RESULT_DATEColumn),Date)
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.PROCESS_RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_PROGRESS.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtPAINT_PROGRESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_PROGRESS.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTION_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.PRODUCTION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTION_DATENull()
            Me(Me.tabledtPAINT_PROGRESS.PRODUCTION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsON_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.ON_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetON_TIMENull()
            Me(Me.tabledtPAINT_PROGRESS.ON_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKIT_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.SKIT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKIT_NONull()
            Me(Me.tabledtPAINT_PROGRESS.SKIT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.LOT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_IDNull()
            Me(Me.tabledtPAINT_PROGRESS.LOT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_MODELNull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.BLOCK_MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_MODELNull()
            Me(Me.tabledtPAINT_PROGRESS.BLOCK_MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_SEQNull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.BLOCK_SEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_SEQNull()
            Me(Me.tabledtPAINT_PROGRESS.BLOCK_SEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORT_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.IMPORT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORT_CODENull()
            Me(Me.tabledtPAINT_PROGRESS.IMPORT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGA_SHOPNull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.GA_SHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGA_SHOPNull()
            Me(Me.tabledtPAINT_PROGRESS.GA_SHOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_PROGRESS.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtPAINT_PROGRESS.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPAINT_SHOPRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPAINT_SHOP As dtPAINT_SHOPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPAINT_SHOP = CType(Me.Table,dtPAINT_SHOPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTION_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.PRODUCTION_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION_DATE' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.PRODUCTION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ON_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.ON_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ON_TIME' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPAINT_SHOP.SKIT_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.LOT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOT_ID' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.LOT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPAINT_SHOP.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPAINT_SHOP.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.BLOCK_MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_MODEL' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.BLOCK_MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_SEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.BLOCK_SEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_SEQ' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.BLOCK_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_RESULT_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.PROCESS_RESULT_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_RESULT_DATE' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.PROCESS_RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.IMPORT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT_CODE' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.IMPORT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GA_SHOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_SHOP.GA_SHOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GA_SHOP' in table 'dtPAINT_SHOP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_SHOP.GA_SHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTION_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.PRODUCTION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTION_DATENull()
            Me(Me.tabledtPAINT_SHOP.PRODUCTION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsON_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.ON_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetON_TIMENull()
            Me(Me.tabledtPAINT_SHOP.ON_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.LOT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_IDNull()
            Me(Me.tabledtPAINT_SHOP.LOT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtPAINT_SHOP.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_MODELNull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.BLOCK_MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_MODELNull()
            Me(Me.tabledtPAINT_SHOP.BLOCK_MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_SEQNull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.BLOCK_SEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_SEQNull()
            Me(Me.tabledtPAINT_SHOP.BLOCK_SEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_RESULT_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.PROCESS_RESULT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_RESULT_DATENull()
            Me(Me.tabledtPAINT_SHOP.PROCESS_RESULT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORT_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.IMPORT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORT_CODENull()
            Me(Me.tabledtPAINT_SHOP.IMPORT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGA_SHOPNull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_SHOP.GA_SHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGA_SHOPNull()
            Me(Me.tabledtPAINT_SHOP.GA_SHOPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPROCESS_OPTION_CELLRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPROCESS_OPTION_CELL As dtPROCESS_OPTION_CELLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPROCESS_OPTION_CELL = CType(Me.Table,dtPROCESS_OPTION_CELLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_OPTION_CELL.PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_OPTION_CELL.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_ID() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_OPTION_CELL.OPTION_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_OPTION_CELL.OPTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_USED() As Boolean
            Get
                Return CType(Me(Me.tabledtPROCESS_OPTION_CELL.IS_USEDColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtPROCESS_OPTION_CELL.IS_USEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtOPTION_MSTRow() As dtOPTION_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_OPTION_CELL_OPTION_ID")),dtOPTION_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_OPTION_CELL_OPTION_ID"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPROCESS_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPROCESS_MST As dtPROCESS_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPROCESS_MST = CType(Me.Table,dtPROCESS_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NAME() As String
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_NAMEColumn),String)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TIME() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_TIMEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TYPE() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_TYPEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENTRANCE_FLAG() As Boolean
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.ENTRANCE_FLAGColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.ENTRANCE_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPPER_PROCESS_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_MST.UPPER_PROCESS_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPPER_PROCESS_NAME' in table 'dtPROCESS_MST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.UPPER_PROCESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_CODE() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_CODEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_GROUP_ID() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_GROUP_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_GROUP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_GROUP_MSTRow() As dtPROCESS_GROUP_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_MST_PROCESS_GROUP_ID")),dtPROCESS_GROUP_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_MST_PROCESS_GROUP_ID"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtProcessTypeRow() As dtProcessTypeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("dtProcessType_dtPROCESS_MST")),dtProcessTypeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("dtProcessType_dtPROCESS_MST"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUPPER_PROCESS_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_MST.UPPER_PROCESS_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUPPER_PROCESS_NAMENull()
            Me(Me.tabledtPROCESS_MST.UPPER_PROCESS_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_OPTION_CELLRows() As dtPROCESS_OPTION_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO") Is Nothing) Then
                Return New dtPROCESS_OPTION_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO")),dtPROCESS_OPTION_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPLC_MSTRows() As dtPLC_MSTRow()
            If (Me.Table.ChildRelations("FK_T_PLC_MST_PROCESS_NO") Is Nothing) Then
                Return New dtPLC_MSTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PLC_MST_PROCESS_NO")),dtPLC_MSTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_LINKAGERowsByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO() As dtPROCESS_LINKAGERow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO") Is Nothing) Then
                Return New dtPROCESS_LINKAGERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO")),dtPROCESS_LINKAGERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_LINKAGERowsByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO() As dtPROCESS_LINKAGERow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO") Is Nothing) Then
                Return New dtPROCESS_LINKAGERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO")),dtPROCESS_LINKAGERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtLOG_DATRows() As dtLOG_DATRow()
            If (Me.Table.ChildRelations("dtPROCESS_MST_dtLOG_DAT") Is Nothing) Then
                Return New dtLOG_DATRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("dtPROCESS_MST_dtLOG_DAT")),dtLOG_DATRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPAINT_CELLRows() As dtPAINT_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PAINT_CELL_PROCESS_NO") Is Nothing) Then
                Return New dtPAINT_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PAINT_CELL_PROCESS_NO")),dtPAINT_CELLRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPLC_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPLC_MST As dtPLC_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPLC_MST = CType(Me.Table,dtPLC_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_ID() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STAGE_CODE() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.STAGE_CODEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.STAGE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_NET() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_NETColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_NETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_NODE() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_NODEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_NODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_UNIT() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_UNITColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property READ_DM() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.READ_DMColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.READ_DMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WRITE_DATA_DM() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.WRITE_DATA_DMColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.WRITE_DATA_DMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WRITE_STATUS_DM() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.WRITE_STATUS_DMColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.WRITE_STATUS_DMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_ONLINE_FLAG() As Boolean
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_ONLINE_FLAGColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_ONLINE_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PLC_MST_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PLC_MST_PROCESS_NO"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPROCESS_GROUP_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPROCESS_GROUP_MST As dtPROCESS_GROUP_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPROCESS_GROUP_MST = CType(Me.Table,dtPROCESS_GROUP_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_GROUP_ID() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_GROUP_SEQ() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_SEQColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_GROUP_NAME() As String
            Get
                Return CType(Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_NAMEColumn),String)
            End Get
            Set
                Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_MSTRows() As dtPROCESS_MSTRow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_MST_PROCESS_GROUP_ID") Is Nothing) Then
                Return New dtPROCESS_MSTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_MST_PROCESS_GROUP_ID")),dtPROCESS_MSTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPROCESS_LINKAGERow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPROCESS_LINKAGE As dtPROCESS_LINKAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPROCESS_LINKAGE = CType(Me.Table,dtPROCESS_LINKAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FROM_PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TO_PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_LINKAGE.TO_PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.TO_PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FROM_PROCESS_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FROM_PROCESS_NAME' in table 'dtPROCESS_LINKAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TIME() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TIMEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_TIME' in table 'dtPROCESS_LINKAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_TYPE' in table 'dtPROCESS_LINKAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENTRANCE_FLAG() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_LINKAGE.ENTRANCE_FLAGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENTRANCE_FLAG' in table 'dtPROCESS_LINKAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.ENTRANCE_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFROM_PROCESS_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFROM_PROCESS_NAMENull()
            Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_LINKAGE.PROCESS_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_TIMENull()
            Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_TYPENull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_LINKAGE.PROCESS_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_TYPENull()
            Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENTRANCE_FLAGNull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_LINKAGE.ENTRANCE_FLAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENTRANCE_FLAGNull()
            Me(Me.tabledtPROCESS_LINKAGE.ENTRANCE_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtLOG_DATRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtLOG_DAT As dtLOG_DATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtLOG_DAT = CType(Me.Table,dtLOG_DATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_ID() As Integer
            Get
                Return CType(Me(Me.tabledtLOG_DAT.LOG_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.LOG_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_TYPE() As Integer
            Get
                Return CType(Me(Me.tabledtLOG_DAT.LOG_TYPEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.LOG_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_LEVEL() As Integer
            Get
                Return CType(Me(Me.tabledtLOG_DAT.LOG_LEVELColumn),Integer)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.LOG_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PC_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtLOG_DAT.PC_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PC_NAME' in table 'dtLOG_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtLOG_DAT.PC_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OCC_DATE() As Date
            Get
                Return CType(Me(Me.tabledtLOG_DAT.OCC_DATEColumn),Date)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.OCC_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_CODE() As String
            Get
                Return CType(Me(Me.tabledtLOG_DAT.LOG_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.LOG_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MESSAGE() As String
            Get
                Return CType(Me(Me.tabledtLOG_DAT.MESSAGEColumn),String)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.MESSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtLOG_DAT.PROCESS_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_NO' in table 'dtLOG_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtLOG_DAT.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtLOG_DAT.DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE' in table 'dtLOG_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtLOG_DAT.DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtLOG_DAT.TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME' in table 'dtLOG_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtLOG_DAT.TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("dtPROCESS_MST_dtLOG_DAT")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("dtPROCESS_MST_dtLOG_DAT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPC_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtLOG_DAT.PC_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPC_NAMENull()
            Me(Me.tabledtLOG_DAT.PC_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_NONull() As Boolean
            Return Me.IsNull(Me.tabledtLOG_DAT.PROCESS_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_NONull()
            Me(Me.tabledtLOG_DAT.PROCESS_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtLOG_DAT.DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_DATENull()
            Me(Me.tabledtLOG_DAT.DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIMENull() As Boolean
            Return Me.IsNull(Me.tabledtLOG_DAT.TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIMENull()
            Me(Me.tabledtLOG_DAT.TIMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtFINISHING_LINERow
        Inherits Global.System.Data.DataRow
        
        Private tabledtFINISHING_LINE As dtFINISHING_LINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtFINISHING_LINE = CType(Me.Table,dtFINISHING_LINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTION_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.PRODUCTION_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION_DATE' in table 'dtFINISHING_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.PRODUCTION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ON_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.ON_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ON_TIME' in table 'dtFINISHING_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.LOT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOT_ID' in table 'dtFINISHING_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.LOT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Return CType(Me(Me.tabledtFINISHING_LINE.SKIT_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtFINISHING_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtFINISHING_LINE.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtFINISHING_LINE.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.BLOCK_MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_MODEL' in table 'dtFINISHING_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.BLOCK_MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_SEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.BLOCK_SEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_SEQ' in table 'dtFINISHING_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.BLOCK_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_RESULT_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.PROCESS_RESULT_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_RESULT_DATE' in table 'dtFINISHING_LINE' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.PROCESS_RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.IMPORT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT_CODE' in table 'dtFINISHING_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.IMPORT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GA_SHOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtFINISHING_LINE.GA_SHOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GA_SHOP' in table 'dtFINISHING_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.GA_SHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                Return CType(Me(Me.tabledtFINISHING_LINE.MODEL_YEARColumn),String)
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                Return CType(Me(Me.tabledtFINISHING_LINE.SUFFIX_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtFINISHING_LINE.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTION_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.PRODUCTION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTION_DATENull()
            Me(Me.tabledtFINISHING_LINE.PRODUCTION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsON_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.ON_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetON_TIMENull()
            Me(Me.tabledtFINISHING_LINE.ON_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.LOT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_IDNull()
            Me(Me.tabledtFINISHING_LINE.LOT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtFINISHING_LINE.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_MODELNull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.BLOCK_MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_MODELNull()
            Me(Me.tabledtFINISHING_LINE.BLOCK_MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_SEQNull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.BLOCK_SEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_SEQNull()
            Me(Me.tabledtFINISHING_LINE.BLOCK_SEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_RESULT_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.PROCESS_RESULT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_RESULT_DATENull()
            Me(Me.tabledtFINISHING_LINE.PROCESS_RESULT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORT_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.IMPORT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORT_CODENull()
            Me(Me.tabledtFINISHING_LINE.IMPORT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGA_SHOPNull() As Boolean
            Return Me.IsNull(Me.tabledtFINISHING_LINE.GA_SHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGA_SHOPNull()
            Me(Me.tabledtFINISHING_LINE.GA_SHOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtSKIT_MSTRows() As dtSKIT_MSTRow()
            If (Me.Table.ChildRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1") Is Nothing) Then
                Return New dtSKIT_MSTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT1")),dtSKIT_MSTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPAINT_CELLRows() As dtPAINT_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1") Is Nothing) Then
                Return New dtPAINT_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT1")),dtPAINT_CELLRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtMESSAGE_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtMESSAGE_MST As dtMESSAGE_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtMESSAGE_MST = CType(Me.Table,dtMESSAGE_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_CODE() As String
            Get
                Return CType(Me(Me.tabledtMESSAGE_MST.LOG_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtMESSAGE_MST.LOG_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_MESSAGE() As String
            Get
                Return CType(Me(Me.tabledtMESSAGE_MST.LOG_MESSAGEColumn),String)
            End Get
            Set
                Me(Me.tabledtMESSAGE_MST.LOG_MESSAGEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPlcStatusRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPlcStatus As dtPlcStatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPlcStatus = CType(Me.Table,dtPlcStatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NAME() As String
            Get
                Return CType(Me(Me.tabledtPlcStatus.PROCESS_NAMEColumn),String)
            End Get
            Set
                Me(Me.tabledtPlcStatus.PROCESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TIME() As Integer
            Get
                Return CType(Me(Me.tabledtPlcStatus.PROCESS_TIMEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPlcStatus.PROCESS_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TYPE() As Integer
            Get
                Return CType(Me(Me.tabledtPlcStatus.PROCESS_TYPEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPlcStatus.PROCESS_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENTRANCE_FLAG() As Boolean
            Get
                Return CType(Me(Me.tabledtPlcStatus.ENTRANCE_FLAGColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtPlcStatus.ENTRANCE_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_CODE() As Integer
            Get
                Return CType(Me(Me.tabledtPlcStatus.PROCESS_CODEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPlcStatus.PROCESS_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STAGE_CODE() As Integer
            Get
                Return CType(Me(Me.tabledtPlcStatus.STAGE_CODEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPlcStatus.STAGE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUR_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPlcStatus.CUR_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUR_STATUS' in table 'dtPlcStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPlcStatus.CUR_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTEST_MSG() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPlcStatus.LASTEST_MSGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTEST_MSG' in table 'dtPlcStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPlcStatus.LASTEST_MSGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRING_PROCESS_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPlcStatus.STRING_PROCESS_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRING_PROCESS_NO' in table 'dtPlcStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPlcStatus.STRING_PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUR_STATUSNull() As Boolean
            Return Me.IsNull(Me.tabledtPlcStatus.CUR_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUR_STATUSNull()
            Me(Me.tabledtPlcStatus.CUR_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTEST_MSGNull() As Boolean
            Return Me.IsNull(Me.tabledtPlcStatus.LASTEST_MSGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTEST_MSGNull()
            Me(Me.tabledtPlcStatus.LASTEST_MSGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRING_PROCESS_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPlcStatus.STRING_PROCESS_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRING_PROCESS_NONull()
            Me(Me.tabledtPlcStatus.STRING_PROCESS_NOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPBRPassResultRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPBRPassResult As dtPBRPassResultDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPBRPassResult = CType(Me.Table,dtPBRPassResultDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTION_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.PRODUCTION_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION_DATE' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.PRODUCTION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ON_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.ON_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ON_TIME' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.SKIT_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKIT_NO' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.LOT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOT_ID' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.LOT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPBRPassResult.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPBRPassResult.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPBRPassResult.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPBRPassResult.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.BLOCK_MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_MODEL' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.BLOCK_MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_SEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.BLOCK_SEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_SEQ' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.BLOCK_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.IMPORT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT_CODE' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.IMPORT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GA_SHOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.GA_SHOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GA_SHOP' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.GA_SHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLANK_COL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.BLANK_COLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLANK_COL' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.BLANK_COLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PBR_ON() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.PBR_ONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PBR_ON' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.PBR_ONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PBR_OFF() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPBRPassResult.PBR_OFFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PBR_OFF' in table 'dtPBRPassResult' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPBRPassResult.PBR_OFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTION_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.PRODUCTION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTION_DATENull()
            Me(Me.tabledtPBRPassResult.PRODUCTION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsON_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.ON_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetON_TIMENull()
            Me(Me.tabledtPBRPassResult.ON_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKIT_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.SKIT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKIT_NONull()
            Me(Me.tabledtPBRPassResult.SKIT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.LOT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_IDNull()
            Me(Me.tabledtPBRPassResult.LOT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtPBRPassResult.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_MODELNull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.BLOCK_MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_MODELNull()
            Me(Me.tabledtPBRPassResult.BLOCK_MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_SEQNull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.BLOCK_SEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_SEQNull()
            Me(Me.tabledtPBRPassResult.BLOCK_SEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORT_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.IMPORT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORT_CODENull()
            Me(Me.tabledtPBRPassResult.IMPORT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGA_SHOPNull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.GA_SHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGA_SHOPNull()
            Me(Me.tabledtPBRPassResult.GA_SHOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLANK_COLNull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.BLANK_COLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLANK_COLNull()
            Me(Me.tabledtPBRPassResult.BLANK_COLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPBR_ONNull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.PBR_ONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPBR_ONNull()
            Me(Me.tabledtPBRPassResult.PBR_ONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPBR_OFFNull() As Boolean
            Return Me.IsNull(Me.tabledtPBRPassResult.PBR_OFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPBR_OFFNull()
            Me(Me.tabledtPBRPassResult.PBR_OFFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtProcessTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtProcessType As dtProcessTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtProcessType = CType(Me.Table,dtProcessTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtProcessType.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'dtProcessType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtProcessType.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtProcessType.NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'dtProcessType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtProcessType.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tabledtProcessType.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tabledtProcessType.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tabledtProcessType.NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAMENull()
            Me(Me.tabledtProcessType.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_MSTRows() As dtPROCESS_MSTRow()
            If (Me.Table.ChildRelations("dtProcessType_dtPROCESS_MST") Is Nothing) Then
                Return New dtPROCESS_MSTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("dtProcessType_dtPROCESS_MST")),dtPROCESS_MSTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtMODEL_OPTION_ROWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtMODEL_OPTION_ROWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtMODEL_OPTION_ROWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtMODEL_OPTION_ROWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtSKIT_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtSKIT_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtSKIT_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtSKIT_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtWBS_ONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtWBS_ONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtWBS_ONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtWBS_ONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtLANE_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtLANE_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtLANE_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtLANE_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtMODEL_OPTION_CELLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtMODEL_OPTION_CELLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtMODEL_OPTION_CELLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtMODEL_OPTION_CELLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtINSTRUCTION_DATARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtINSTRUCTION_DATARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtINSTRUCTION_DATARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtINSTRUCTION_DATARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPRODUCTION_DATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPRODUCTION_DATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPRODUCTION_DATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPRODUCTION_DATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtOPTION_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtOPTION_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtOPTION_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtOPTION_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPAINT_CELLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPAINT_CELLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPAINT_CELLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPAINT_CELLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPAINT_PROGRESSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPAINT_PROGRESSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPAINT_PROGRESSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPAINT_PROGRESSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPAINT_SHOPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPAINT_SHOPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPAINT_SHOPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPAINT_SHOPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPROCESS_OPTION_CELLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPROCESS_OPTION_CELLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPROCESS_OPTION_CELLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPROCESS_OPTION_CELLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPROCESS_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPROCESS_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPROCESS_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPROCESS_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPLC_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPLC_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPLC_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPLC_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPROCESS_GROUP_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPROCESS_GROUP_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPROCESS_GROUP_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPROCESS_GROUP_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPROCESS_LINKAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPROCESS_LINKAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPROCESS_LINKAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPROCESS_LINKAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtLOG_DATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtLOG_DATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtLOG_DATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtLOG_DATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtFINISHING_LINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtFINISHING_LINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtFINISHING_LINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtFINISHING_LINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtMESSAGE_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtMESSAGE_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtMESSAGE_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtMESSAGE_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPlcStatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPlcStatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPlcStatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPlcStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPBRPassResultRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPBRPassResultRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPBRPassResultRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPBRPassResultRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtProcessTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtProcessTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtProcessTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtProcessTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsPAINTTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taMODEL_OPTION_ROW
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtMODEL_OPTION_ROW"
            tableMapping.ColumnMappings.Add("MODEL_OPTION_ROW_ID", "MODEL_OPTION_ROW_ID")
            tableMapping.ColumnMappings.Add("MODEL_YEAR_PATTERN", "MODEL_YEAR_PATTERN")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE_PATTERN", "SUFFIX_CODE_PATTERN")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_MODEL_OPTION_ROW] WHERE (([MODEL_OPTION_ROW_ID] = @Original_MODEL_"& _ 
                "OPTION_ROW_ID) AND ([MODEL_YEAR_PATTERN] = @Original_MODEL_YEAR_PATTERN) AND ([S"& _ 
                "UFFIX_CODE_PATTERN] = @Original_SUFFIX_CODE_PATTERN))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_MODEL_OPTION_ROW] ([MODEL_YEAR_PATTERN], [SUFFIX_CODE_PATTERN]) VA"& _ 
                "LUES (@MODEL_YEAR_PATTERN, @SUFFIX_CODE_PATTERN);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_OPTION_ROW_ID, M"& _ 
                "ODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, MODEL_YEAR_PATTERN + SUFFIX_CODE_PATTERN"& _ 
                " AS MODEL_CODE FROM T_MODEL_OPTION_ROW WHERE (MODEL_OPTION_ROW_ID = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_MODEL_OPTION_ROW] SET [MODEL_YEAR_PATTERN] = @MODEL_YEAR_PATTERN, [SUFF"& _ 
                "IX_CODE_PATTERN] = @SUFFIX_CODE_PATTERN WHERE (([MODEL_OPTION_ROW_ID] = @Origina"& _ 
                "l_MODEL_OPTION_ROW_ID) AND ([MODEL_YEAR_PATTERN] = @Original_MODEL_YEAR_PATTERN)"& _ 
                " AND ([SUFFIX_CODE_PATTERN] = @Original_SUFFIX_CODE_PATTERN));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_OPT"& _ 
                "ION_ROW_ID, MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, MODEL_YEAR_PATTERN + SUFFIX"& _ 
                "_CODE_PATTERN AS MODEL_CODE FROM T_MODEL_OPTION_ROW WHERE (MODEL_OPTION_ROW_ID ="& _ 
                " @MODEL_OPTION_ROW_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     MODEL_OPTION_ROW_ID, MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                MODEL_YEAR_PATTERN + SUFFIX_CODE_PATTERN AS MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    "& _ 
                "     T_MODEL_OPTION_ROW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT TOP (1) '' AS MODEL_CODE, MODEL_OPTION_ROW_ID, MODEL_YEAR_PATTERN, SUFFIX_"& _ 
                "CODE_PATTERN FROM T_MODEL_OPTION_ROW WHERE (MODEL_YEAR_PATTERN LIKE @MODEL_YEAR_"& _ 
                "PATTERN) AND (SUFFIX_CODE_PATTERN LIKE @SUFFIX_CODE_PATTERN)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"TOP (@BLOCK) 0 AS INDEX_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_OPTION_ROW_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PAT"& _ 
                "TERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SUFFIX_CODE_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PATTERN + SUFFIX_CODE_PATTERN AS"& _ 
                " MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_OPTION_ROW_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PATTE"& _ 
                "RN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SUFFIX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"T_MODEL_OPTION_ROW AS my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "         WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(MODEL_YEAR_PATTERN >= @MODEL_YEAR_PATTERN) AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(not exis"& _ 
                "ts(    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"select"&Global.Microsoft.VisualBasic.ChrW(9)&"* "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"from"&Global.Microsoft.VisualBasic.ChrW(9)&"T_MODEL_OPTION_CELL as child    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"where"&Global.Microsoft.VisualBasic.ChrW(9)&"child.MODEL_OPTION_ROW_ID = my.MODEL_OPTION_ROW_ID and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"chil"& _ 
                "d.IS_USED = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  ) OR 1 = @NEW_MODEL_FLAG )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   (NO"& _ 
                "T (MODEL_YEAR_PATTERN = @MODEL_YEAR_PATTERN)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        (NOT (SUFFIX_CODE_PATT"& _ 
                "ERN < @SUFFIX_CODE_PATTERN))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NEW_MODEL_FLAG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"TOP (@BLOCK) 0 AS INDEX_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_OPTION_ROW_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PAT"& _ 
                "TERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SUFFIX_CODE_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            MODEL_YEAR_PATTERN + SUFFIX_CODE_P"& _ 
                "ATTERN AS MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_OPTION_ROW_ID, MODEL_YEAR_PATTERN"& _ 
                ", SUFFIX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM        T_MODEL_OPTION_ROW AS my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "     WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(MODEL_YEAR_PATTERN <= @MODEL_YEAR_PATTERN) AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(not exists( "& _ 
                "   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"select"&Global.Microsoft.VisualBasic.ChrW(9)&"* "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"from"&Global.Microsoft.VisualBasic.ChrW(9)&"T_MODEL_OPTION_CELL as child    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"w"& _ 
                "here"&Global.Microsoft.VisualBasic.ChrW(9)&"child.MODEL_OPTION_ROW_ID = my.MODEL_OPTION_ROW_ID and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"child.IS"& _ 
                "_USED = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  ) OR 1 = @NEW_MODEL_FLAG )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   (NOT (M"& _ 
                "ODEL_YEAR_PATTERN = @MODEL_YEAR_PATTERN)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        (NOT (SUFFIX_CODE_PATTERN "& _ 
                "> @SUFFIX_CODE_PATTERN))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY MODEL_YEAR_PATTERN DESC, SUFFIX_CODE_PATTERN "& _ 
                "DESC"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NEW_MODEL_FLAG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"COUNT(*) AS OffsetBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SU"& _ 
                "FFIX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM    ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PATTERN, SUFF"& _ 
                "IX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        FROM        T_MODEL_OPTION_ROW AS my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                       WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(MODEL_YEAR_PATTERN <= @MODEL_YEAR_PATTERN) AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(not exists(    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"select"&Global.Microsoft.VisualBasic.ChrW(9)&"* "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"from"&Global.Microsoft.VisualBasic.ChrW(9)&"T_MODEL_OPTION_CELL as ch"& _ 
                "ild    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"where"&Global.Microsoft.VisualBasic.ChrW(9)&"child.MODEL_OPTION_ROW_ID = my.MODEL_OPTION_ROW_ID and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"child.IS_USED = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  ) OR 1 = @NEW_MODEL_FLAG )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "      ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            WHERE   (NOT (MODEL_YEAR_PATTERN = @MODEL_YEAR_PATTER"& _ 
                "N)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    (NOT (SUFFIX_CODE_PATTERN > @SUFFIX_CODE_PATTERN))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "        ) AS derivedtbl_1"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NEW_MODEL_FLAG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable = New dsPAINT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModelCode(ByVal dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModelCode(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String) As dsPAINT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Dim dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable = New dsPAINT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable, ByVal BLOCK As Integer, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(NEW_MODEL_FLAG,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal BLOCK As Integer, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As dsPAINT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(NEW_MODEL_FLAG,Decimal)
            Dim dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable = New dsPAINT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable, ByVal BLOCK As Integer, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(NEW_MODEL_FLAG,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal BLOCK As Integer, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As dsPAINT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(NEW_MODEL_FLAG,Decimal)
            Dim dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable = New dsPAINT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtMODEL_OPTION_ROWDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtMODEL_OPTION_ROW")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_MODEL_YEAR_PATTERN As String, ByVal Original_SUFFIX_CODE_PATTERN As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MODEL_OPTION_ROW_ID,Integer)
            If (Original_MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MODEL_YEAR_PATTERN,String)
            End If
            If (Original_SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SUFFIX_CODE_PATTERN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String) As Integer
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_MODEL_YEAR_PATTERN As String, ByVal Original_SUFFIX_CODE_PATTERN As String, ByVal MODEL_OPTION_ROW_ID As Integer) As Integer
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_MODEL_OPTION_ROW_ID,Integer)
            If (Original_MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MODEL_YEAR_PATTERN,String)
            End If
            If (Original_SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MODEL_OPTION_ROW_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_MODEL_YEAR_PATTERN As String, ByVal Original_SUFFIX_CODE_PATTERN As String) As Integer
            Return Me.Update(MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, Original_MODEL_OPTION_ROW_ID, Original_MODEL_YEAR_PATTERN, Original_SUFFIX_CODE_PATTERN, Original_MODEL_OPTION_ROW_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetDataByOffsetBase(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                command.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                command.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            command.Parameters(2).Value = CType(NEW_MODEL_FLAG,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taSKIT_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtSKIT_MST"
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_SKIT_MST] WHERE (([SKIT_NO] = @Original_SKIT_NO) AND ((@IsNull_MOD"& _ 
                "EL_YEAR = 1 AND [MODEL_YEAR] IS NULL) OR ([MODEL_YEAR] = @Original_MODEL_YEAR)) "& _ 
                "AND ((@IsNull_SUFFIX_CODE = 1 AND [SUFFIX_CODE] IS NULL) OR ([SUFFIX_CODE] = @Or"& _ 
                "iginal_SUFFIX_CODE)) AND ((@IsNull_LOT_NO = 1 AND [LOT_NO] IS NULL) OR ([LOT_NO]"& _ 
                " = @Original_LOT_NO)) AND ((@IsNull_UNIT = 1 AND [UNIT] IS NULL) OR ([UNIT] = @O"& _ 
                "riginal_UNIT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MODEL_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUFFIX_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_SKIT_MST] ([SKIT_NO], [MODEL_YEAR], [SUFFIX_CODE], [LOT_NO], [UNIT"& _ 
                "]) VALUES (@SKIT_NO, @MODEL_YEAR, @SUFFIX_CODE, @LOT_NO, @UNIT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SKIT_NO"& _ 
                ", MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT FROM T_SKIT_MST WHERE (SKIT_NO = @SKIT_N"& _ 
                "O)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_SKIT_MST] SET [SKIT_NO] = @SKIT_NO, [MODEL_YEAR] = @MODEL_YEAR, [SUFFIX"& _ 
                "_CODE] = @SUFFIX_CODE, [LOT_NO] = @LOT_NO, [UNIT] = @UNIT WHERE (([SKIT_NO] = @O"& _ 
                "riginal_SKIT_NO) AND ((@IsNull_MODEL_YEAR = 1 AND [MODEL_YEAR] IS NULL) OR ([MOD"& _ 
                "EL_YEAR] = @Original_MODEL_YEAR)) AND ((@IsNull_SUFFIX_CODE = 1 AND [SUFFIX_CODE"& _ 
                "] IS NULL) OR ([SUFFIX_CODE] = @Original_SUFFIX_CODE)) AND ((@IsNull_LOT_NO = 1 "& _ 
                "AND [LOT_NO] IS NULL) OR ([LOT_NO] = @Original_LOT_NO)) AND ((@IsNull_UNIT = 1 A"& _ 
                "ND [UNIT] IS NULL) OR ([UNIT] = @Original_UNIT)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SKIT_NO, MODEL_YEAR, "& _ 
                "SUFFIX_CODE, LOT_NO, UNIT FROM T_SKIT_MST WHERE (SKIT_NO = @SKIT_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MODEL_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUFFIX_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT  SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    T_SKIT_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_SKIT_MS"& _ 
                "T"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (MODEL_YEAR IS NULL) AND (SUFFIX_CODE IS NULL) AND (LOT_NO IS NULL)"& _ 
                " AND (UNIT IS NULL) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (SKIT_NO = @skitNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skitNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT  SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    T_SKIT_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " MODEL_YEAR = @MODEL_YEAR "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND SUFFIX_CODE = @SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND LOT_NO = @LOT_NO"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND UNIT = @UNIT"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT   *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     T_SKIT_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   SKIT_NO = @skitNo"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skitNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT  SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    T_SKIT_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " MODEL_YEAR IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND SUFFIX_CODE IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND LOT_NO IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND UNIT IS NU"& _ 
                "LL"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT  COUNT(SKIT_NO)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     T_SKIT_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   SKIT_NO = @skitNo"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skitNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"COUNT(skit.SKIT_NO) AS countSkitNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_SKIT_MST AS skit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN "& _ 
                "("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   "&Global.Microsoft.VisualBasic.ChrW(9)&"     SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"wbs.SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"     FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"                T_WBS_ON AS wbs"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"     WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"wbs.SEQUENCE = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"     )AS FirstWbs"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON skit.SKIT_NO = FirstW"& _ 
                "bs.SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"skit.SKIT_NO = @skitNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND skit.MODEL_YEAR = @modelYear"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AN"& _ 
                "D skit.SUFFIX_CODE = @suffixCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND skit.LOT_NO = @lotNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND skit.UNIT = @u"& _ 
                "nit"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skitNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "INSERT INTO T_SKIT_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (SKIT_NO, MODEL_YEAR, SUFFIX_CODE, "& _ 
                "LOT_NO, UNIT)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT     @SKIT_NO AS Expr1, NULL AS Expr2, NULL AS Expr3, NULL "& _ 
                "AS Expr4, NULL AS Expr5"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT EXISTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          (SELEC"& _ 
                "T     SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          "& _ 
                "  FROM          T_SKIT_MST AS T_SKIT_MST_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            WHERE   "& _ 
                "   (SKIT_NO = @SKIT_NO)))"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtSKIT_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtSKIT_MSTDataTable = New dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByAvailableSkid(ByVal dataTable As dsPAINT.dtSKIT_MSTDataTable, ByVal skitNo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(skitNo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByAvailableSkid(ByVal skitNo As Integer) As dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(skitNo,Integer)
            Dim dataTable As dsPAINT.dtSKIT_MSTDataTable = New dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByItem(ByVal dataTable As dsPAINT.dtSKIT_MSTDataTable, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (MODEL_YEAR Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByItem(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (MODEL_YEAR Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Dim dataTable As dsPAINT.dtSKIT_MSTDataTable = New dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySkitNo(ByVal dataTable As dsPAINT.dtSKIT_MSTDataTable, ByVal skitNo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(skitNo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySkitNo(ByVal skitNo As Integer) As dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(skitNo,Integer)
            Dim dataTable As dsPAINT.dtSKIT_MSTDataTable = New dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillEmpty(ByVal dataTable As dsPAINT.dtSKIT_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataEmpty() As dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Dim dataTable As dsPAINT.dtSKIT_MSTDataTable = New dsPAINT.dtSKIT_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtSKIT_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtSKIT_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SKIT_NO As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SKIT_NO,Integer)
            If (Original_MODEL_YEAR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SKIT_NO As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SKIT_NO,Integer)
            If (MODEL_YEAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SKIT_NO As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal Original_SKIT_NO As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SKIT_NO,Integer)
            If (MODEL_YEAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SKIT_NO,Integer)
            If (Original_MODEL_YEAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal Original_SKIT_NO As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Return Me.Update(Original_SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, Original_SKIT_NO, Original_MODEL_YEAR, Original_SUFFIX_CODE, Original_LOT_NO, Original_UNIT)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCountBySkitNo(ByVal skitNo As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(skitNo,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCountFirstSeqOfEachLaneBySkitNoAndModel(ByVal skitNo As Integer, ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(skitNo,Integer)
            If (modelYear Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(unit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNew(ByVal SKIT_NO As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            command.Parameters(0).Value = CType(SKIT_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taWBS_ON
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtWBS_ON"
            tableMapping.ColumnMappings.Add("LANE_NO", "LANE_NO")
            tableMapping.ColumnMappings.Add("SEQUENCE", "SEQUENCE")
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("POSITION", "POSITION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_WBS_ON] WHERE (([LANE_NO] = @Original_LANE_NO) AND ([SEQUENCE] = @"& _ 
                "Original_SEQUENCE) AND ([MODEL_YEAR] = @Original_MODEL_YEAR) AND ([SUFFIX_CODE] "& _ 
                "= @Original_SUFFIX_CODE) AND ([LOT_NO] = @Original_LOT_NO) AND ([UNIT] = @Origin"& _ 
                "al_UNIT))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LANE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQUENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQUENCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_WBS_ON] ([LANE_NO], [SEQUENCE], [MODEL_YEAR], [SUFFIX_CODE], [LOT_"& _ 
                "NO], [UNIT]) VALUES (@LANE_NO, @SEQUENCE, @MODEL_YEAR, @SUFFIX_CODE, @LOT_NO, @U"& _ 
                "NIT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LANE_NO, SEQUENCE, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, MODEL_YE"& _ 
                "AR + SUFFIX_CODE + '/' + LOT_NO + '/' + UNIT AS POSITION FROM T_WBS_ON WHERE (LA"& _ 
                "NE_NO = @LANE_NO) AND (SEQUENCE = @SEQUENCE) ORDER BY LANE_NO, SEQUENCE"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQUENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQUENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_WBS_ON] SET [LANE_NO] = @LANE_NO, [SEQUENCE] = @SEQUENCE, [MODEL_YEAR] "& _ 
                "= @MODEL_YEAR, [SUFFIX_CODE] = @SUFFIX_CODE, [LOT_NO] = @LOT_NO, [UNIT] = @UNIT "& _ 
                "WHERE (([LANE_NO] = @Original_LANE_NO) AND ([SEQUENCE] = @Original_SEQUENCE) AND"& _ 
                " ([MODEL_YEAR] = @Original_MODEL_YEAR) AND ([SUFFIX_CODE] = @Original_SUFFIX_COD"& _ 
                "E) AND ([LOT_NO] = @Original_LOT_NO) AND ([UNIT] = @Original_UNIT));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LAN"& _ 
                "E_NO, SEQUENCE, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, MODEL_YEAR + SUFFIX_CODE "& _ 
                "+ '/' + LOT_NO + '/' + UNIT AS POSITION FROM T_WBS_ON WHERE (LANE_NO = @LANE_NO)"& _ 
                " AND (SEQUENCE = @SEQUENCE) ORDER BY LANE_NO, SEQUENCE"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQUENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQUENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LANE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQUENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQUENCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.psis_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        LANE_NO, SEQUENCE, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, MODEL_YEA"& _ 
                "R + SUFFIX_CODE + '/' + LOT_NO + '/' + UNIT AS POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            T_WBS_O"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY LANE_NO, SEQUENCE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(1).CommandText = "DELETE FROM T_WBS_ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (MODEL_YEAR = @modelYear) AND (SUFFIX_CODE = @suf"& _ 
                "fixCode) AND (LOT_NO = @lotNo) AND (UNIT =@unit)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(2).CommandText = "SELECT LANE_NO, LOT_NO, MODEL_YEAR, SEQUENCE, SUFFIX_CODE, UNIT, (MODEL_YEAR + SU"& _ 
                "FFIX_CODE + '/' + LOT_NO + '/' +UNIT) as POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" FROM T_WBS_ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" WHERE (LANE_"& _ 
                "NO = @laneNo) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY SEQUENCE"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@laneNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(3).CommandText = "SELECT LANE_NO, LOT_NO, MODEL_YEAR, SEQUENCE, SUFFIX_CODE, UNIT, (MODEL_YEAR + SU"& _ 
                "FFIX_CODE + '/' + LOT_NO + '/' +UNIT) as POSITION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM T_WBS_ON WHERE (LANE_NO"& _ 
                " = (SELECT LANE_NO FROM T_WBS_ON AS T1 WHERE (MODEL_YEAR = @modelYear) AND (SUFF"& _ 
                "IX_CODE = @suffixCode) AND (LOT_NO = @lotNo) AND (UNIT = @unit))) ORDER BY LANE_"& _ 
                "NO, SEQUENCE"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(4).CommandText = "SELECT  LANE_NO, SEQUENCE, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM "& _ 
                "   (SELECT  LANE_NO, 9999 AS SEQUENCE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" '000' AS MODEL_YEAR,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" '00000' AS SUFFI"& _ 
                "X_CODE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" '000' AS LOT_NO,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" '000' AS UNIT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" 'END' AS POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FRO"& _ 
                "M     T_LANE_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            SELECT  LANE_NO, SEQUENCE ,MODE"& _ 
                "L_YEAR, SUFFIX_CODE, LOT_NO, UNIT, MODEL_YEAR + SUFFIX_CODE + '/' + LOT_NO + '/'"& _ 
                " + UNIT AS POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM    T_WBS_ON AS w"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            WHERE NOT (("& _ 
                "MODEL_YEAR = @modelYear) AND (SUFFIX_CODE = @suffixCode)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AND (LOT_NO = @lotNo)"& _ 
                " AND (UNIT = @unit))) AS a"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY LANE_NO, SEQUENCE"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(5).CommandText = "SELECT     MAX(SEQUENCE) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_WBS_ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (LANE_NO = @l"& _ 
                "aneNo)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@laneNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(6).CommandText = "UPDATE       T_WBS_ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                LANE_NO = @New_LANE_NO, SEQUENCE = ISNU"& _ 
                "LL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             ((SELECT        SEQUENCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "            FROM            T_WBS_ON AS wo_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                 WH"& _ 
                "ERE        (MODEL_YEAR = @BeforeModelYear) AND (SUFFIX_CODE = @BeforeSuffixCode)"& _ 
                " AND (LOT_NO = @BeforeLotNo) AND (UNIT = @BeforeUnit)), 10000) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "          - 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (MODEL_YEAR = @OriginalModelYear) AND (SUFFIX_CODE ="& _ 
                " @OriginalSuffixCode) AND (LOT_NO = @OriginalLotNo) AND (UNIT = @OriginalUnit)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@New_LANE_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OriginalModelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OriginalSuffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OriginalLotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OriginalUnit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeforeModelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeforeSuffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeforeLotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeforeUnit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(7).CommandText = "UPDATE [T_WBS_ON]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET [SEQUENCE] = ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT COUNT(MODEL_YEAR + SUFFIX_CODE + L"& _ 
                "OT_NO + UNIT)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM [T_WBS_ON] wo_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE wo_.LANE_NO = [T_WBS_ON].LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"A"& _ 
                "ND wo_.[SEQUENCE] <= [T_WBS_ON].[SEQUENCE]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&")"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(8).CommandText = "UPDATE [T_WBS_ON]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET [SEQUENCE] = [SEQUENCE] + 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE [LANE_NO] = @Original_L"& _ 
                "ANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  AND [SEQUENCE] >= ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    SELECT min(wo_.[SEQUENCE])"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    FROM [T_WBS_O"& _ 
                "N] wo_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    WHERE wo_.[LANE_NO] = @Original_LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ((wo_.MODEL_YEA"& _ 
                "R = @OriginalModelYear) AND (wo_.SUFFIX_CODE = @OriginalSuffixCode)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AND (wo_.L"& _ 
                "OT_NO = @OriginalLotNo) AND (wo_.UNIT = @OriginalUnit))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    )"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LANE_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OriginalModelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OriginalSuffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OriginalLotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OriginalUnit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtWBS_ONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtWBS_ONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtWBS_ONDataTable = New dsPAINT.dtWBS_ONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLaneNo(ByVal dataTable As dsPAINT.dtWBS_ONDataTable, ByVal laneNo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(laneNo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLaneNo(ByVal laneNo As Integer) As dsPAINT.dtWBS_ONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(laneNo,Integer)
            Dim dataTable As dsPAINT.dtWBS_ONDataTable = New dsPAINT.dtWBS_ONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLaneOfModelYearSuffixCodeLotNoUnit(ByVal dataTable As dsPAINT.dtWBS_ONDataTable, ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLaneOfModelYearSuffixCodeLotNoUnit(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As dsPAINT.dtWBS_ONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            Dim dataTable As dsPAINT.dtWBS_ONDataTable = New dsPAINT.dtWBS_ONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByWithEOL(ByVal dataTable As dsPAINT.dtWBS_ONDataTable, ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByWithEOL(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As dsPAINT.dtWBS_ONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            Dim dataTable As dsPAINT.dtWBS_ONDataTable = New dsPAINT.dtWBS_ONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtWBS_ONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtWBS_ON")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LANE_NO As Integer, ByVal Original_SEQUENCE As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LANE_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEQUENCE,Integer)
            If (Original_MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LANE_NO As Integer, ByVal SEQUENCE As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(LANE_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SEQUENCE,Integer)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LANE_NO As Integer, ByVal SEQUENCE As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal Original_LANE_NO As Integer, ByVal Original_SEQUENCE As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LANE_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SEQUENCE,Integer)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_LANE_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SEQUENCE,Integer)
            If (Original_MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal Original_LANE_NO As Integer, ByVal Original_SEQUENCE As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Return Me.Update(Original_LANE_NO, Original_SEQUENCE, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, Original_LANE_NO, Original_SEQUENCE, Original_MODEL_YEAR, Original_SUFFIX_CODE, Original_LOT_NO, Original_UNIT)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteByModelYearSuffixCodeLotNoUnit(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                command.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                command.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                command.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                command.Parameters(3).Value = CType(unit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetMaxSeqOfLane(ByVal laneNo As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(laneNo,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function MoveLaneSeq(ByVal New_LANE_NO As Integer, ByVal OriginalModelYear As String, ByVal OriginalSuffixCode As String, ByVal OriginalLotNo As String, ByVal OriginalUnit As String, ByVal BeforeModelYear As String, ByVal BeforeSuffixCode As String, ByVal BeforeLotNo As String, ByVal BeforeUnit As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(New_LANE_NO,Integer)
            If (OriginalModelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OriginalModelYear")
            Else
                command.Parameters(1).Value = CType(OriginalModelYear,String)
            End If
            If (OriginalSuffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OriginalSuffixCode")
            Else
                command.Parameters(2).Value = CType(OriginalSuffixCode,String)
            End If
            If (OriginalLotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OriginalLotNo")
            Else
                command.Parameters(3).Value = CType(OriginalLotNo,String)
            End If
            If (OriginalUnit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OriginalUnit")
            Else
                command.Parameters(4).Value = CType(OriginalUnit,String)
            End If
            If (BeforeModelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BeforeModelYear")
            Else
                command.Parameters(5).Value = CType(BeforeModelYear,String)
            End If
            If (BeforeSuffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BeforeSuffixCode")
            Else
                command.Parameters(6).Value = CType(BeforeSuffixCode,String)
            End If
            If (BeforeLotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BeforeLotNo")
            Else
                command.Parameters(7).Value = CType(BeforeLotNo,String)
            End If
            If (BeforeUnit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BeforeUnit")
            Else
                command.Parameters(8).Value = CType(BeforeUnit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ReorderSeq() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ShiftSeq(ByVal Original_LANE_NO As Integer, ByVal OriginalModelYear As String, ByVal OriginalSuffixCode As String, ByVal OriginalLotNo As String, ByVal OriginalUnit As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            command.Parameters(0).Value = CType(Original_LANE_NO,Integer)
            If (OriginalModelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OriginalModelYear")
            Else
                command.Parameters(1).Value = CType(OriginalModelYear,String)
            End If
            If (OriginalSuffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OriginalSuffixCode")
            Else
                command.Parameters(2).Value = CType(OriginalSuffixCode,String)
            End If
            If (OriginalLotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OriginalLotNo")
            Else
                command.Parameters(3).Value = CType(OriginalLotNo,String)
            End If
            If (OriginalUnit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OriginalUnit")
            Else
                command.Parameters(4).Value = CType(OriginalUnit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taLANE_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtLANE_MST"
            tableMapping.ColumnMappings.Add("LANE_NO", "LANE_NO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_LANE_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     COUNT(LANE_NO) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_LANE_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (LANE_NO ="& _ 
                " @laneNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@laneNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtLANE_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtLANE_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtLANE_MSTDataTable = New dsPAINT.dtLANE_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCountLaneNoByLaneNo(ByVal laneNo As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(laneNo,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taMODEL_OPTION_CELL
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtMODEL_OPTION_CELL"
            tableMapping.ColumnMappings.Add("MODEL_OPTION_ROW_ID", "MODEL_OPTION_ROW_ID")
            tableMapping.ColumnMappings.Add("OPTION_ID", "OPTION_ID")
            tableMapping.ColumnMappings.Add("IS_USED", "IS_USED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_MODEL_OPTION_CELL] WHERE (([MODEL_OPTION_ROW_ID] = @Original_MODEL"& _ 
                "_OPTION_ROW_ID) AND ([OPTION_ID] = @Original_OPTION_ID) AND ([IS_USED] = @Origin"& _ 
                "al_IS_USED))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_MODEL_OPTION_CELL] ([MODEL_OPTION_ROW_ID], [OPTION_ID], [IS_USED])"& _ 
                " VALUES (@MODEL_OPTION_ROW_ID, @OPTION_ID, @IS_USED);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_OPTION_ROW_I"& _ 
                "D, OPTION_ID, IS_USED FROM T_MODEL_OPTION_CELL WHERE (MODEL_OPTION_ROW_ID = @MOD"& _ 
                "EL_OPTION_ROW_ID) AND (OPTION_ID = @OPTION_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_MODEL_OPTION_CELL] SET [MODEL_OPTION_ROW_ID] = @MODEL_OPTION_ROW_ID, [O"& _ 
                "PTION_ID] = @OPTION_ID, [IS_USED] = @IS_USED WHERE (([MODEL_OPTION_ROW_ID] = @Or"& _ 
                "iginal_MODEL_OPTION_ROW_ID) AND ([OPTION_ID] = @Original_OPTION_ID) AND ([IS_USE"& _ 
                "D] = @Original_IS_USED));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_OPTION_ROW_ID, OPTION_ID, IS_USED FROM T"& _ 
                "_MODEL_OPTION_CELL WHERE (MODEL_OPTION_ROW_ID = @MODEL_OPTION_ROW_ID) AND (OPTIO"& _ 
                "N_ID = @OPTION_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     MODEL_OPTION_ROW_ID, OPTION_ID, IS_USED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_MODEL_OPTION_C"& _ 
                "ELL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     cell.IS_USED, cell.MODEL_OPTION_ROW_ID, cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T"& _ 
                "_MODEL_OPTION_CELL AS cell INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_MST AS mst"& _ 
                " ON mst.OPTION_ID = cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (mst.OPTION_TYPE = @TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER B"& _ 
                "Y mst.OPTION_SEQ"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "Insert into T_MODEL_OPTION_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(MODEL_OPTION_ROW_ID,OPTION_ID,IS_USED)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"selec"& _ 
                "t modelId.MODEL_OPTION_ROW_ID, optionId.OPTION_ID, 'FALSE' as IS_USED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"("& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"select T_MODEL_OPTION_ROW.MODEL_OPTION_ROW_ID, T_MODEL_OPTION_CELL.MODEL_OPT"& _ 
                "ION_ROW_ID as temp"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&" from T_MODEL_OPTION_ROW left join T_MODEL_OPTION_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "  on T_MODEL_OPTION_ROW.MODEL_OPTION_ROW_ID = T_MODEL_OPTION_CELL.MODEL_OPTION_R"& _ 
                "OW_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"where T_MODEL_OPTION_CELL.MODEL_OPTION_ROW_ID IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&") as modelId,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"select T_OPTION_MST.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  from T_OPTION_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  where T_OPTIO"& _ 
                "N_MST.OPTION_TYPE = 2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&") as optionId"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "Insert into T_MODEL_OPTION_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(MODEL_OPTION_ROW_ID,OPTION_ID,IS_USED)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"selec"& _ 
                "t sub_q2.MODEL_OPTION_ROW_ID,sub_q1.OPTION_ID,'FALSE' as IS_USED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(select"& _ 
                " opt_mst.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"from T_OPTION_MST opt_mst left join T_MODEL_OPTION_CELL mod"& _ 
                "_opt_cel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"on opt_mst.OPTION_ID = mod_opt_cel.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"where mod_opt_cel.OPTI"& _ 
                "ON_ID is null and opt_mst.OPTION_TYPE = 2) as sub_q1,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(select MODEL_OPTION_ROW"& _ 
                "_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"from T_MODEL_OPTION_ROW) as sub_q2"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtMODEL_OPTION_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtMODEL_OPTION_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtMODEL_OPTION_CELLDataTable = New dsPAINT.dtMODEL_OPTION_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptType(ByVal dataTable As dsPAINT.dtMODEL_OPTION_CELLDataTable, ByVal TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptType(ByVal TYPE As Integer) As dsPAINT.dtMODEL_OPTION_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            Dim dataTable As dsPAINT.dtMODEL_OPTION_CELLDataTable = New dsPAINT.dtMODEL_OPTION_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtMODEL_OPTION_CELLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtMODEL_OPTION_CELL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MODEL_OPTION_ROW_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MODEL_OPTION_ROW_ID As Integer, ByVal OPTION_ID As Integer, ByVal IS_USED As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MODEL_OPTION_ROW_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OPTION_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_OPTION_ROW_ID As Integer, ByVal OPTION_ID As Integer, ByVal IS_USED As Boolean, ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MODEL_OPTION_ROW_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IS_USED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MODEL_OPTION_ROW_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IS_USED As Boolean, ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Return Me.Update(Original_MODEL_OPTION_ROW_ID, Original_OPTION_ID, IS_USED, Original_MODEL_OPTION_ROW_ID, Original_OPTION_ID, Original_IS_USED)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewModelOptionCells() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewWhenInsertNewOpt() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taINSTRUCTION_DATA
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtINSTRUCTION_DATA"
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("MODEL_OPTION_ROW_ID", "MODEL_OPTION_ROW_ID")
            tableMapping.ColumnMappings.Add("OPTION_ID", "OPTION_ID")
            tableMapping.ColumnMappings.Add("OPTION_DISPLAY", "OPTION_DISPLAY")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     prod.MODEL_YEAR, prod.SUFFIX_CODE, prod.LOT_NO, prod.UNIT, row.MODEL_O"& _ 
                "PTION_ROW_ID, cell.OPTION_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CASE cell.IS_USED WHEN 1 T"& _ 
                "HEN opt.OPTION_DISPLAY ELSE '' END AS OPTION_DISPLAY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PRODUCTION_"& _ 
                "DAT AS prod INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_MODEL_OPTION_ROW AS row ON dbo.f"& _ 
                "nc_compare_model_pattern(prod.MODEL_YEAR, prod.SUFFIX_CODE, row.MODEL_YEAR_PATTE"& _ 
                "RN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      row.SUFFIX_CODE_PATTERN) = 1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           T_MODEL_OPTION_CELL AS cell ON row.MODEL_OPTION_ROW_ID = cell.MODEL_O"& _ 
                "PTION_ROW_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_MST AS opt ON opt.OPTION"& _ 
                "_ID = cell.OPTION_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        prod.MODEL_YEAR, prod.SUFFIX_CODE, prod.LOT_NO, prod.UNIT, row.MODE"& _ 
                "L_OPTION_ROW_ID, cell.OPTION_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CASE cell.IS_USED WH"& _ 
                "EN 1 THEN opt.OPTION_DISPLAY ELSE '' END AS OPTION_DISPLAY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            T_PR"& _ 
                "ODUCTION_DAT AS prod INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         T_MODEL_OPTION_ROW AS "& _ 
                "row ON dbo.fnc_compare_model_pattern(prod.MODEL_YEAR, prod.SUFFIX_CODE, row.MODE"& _ 
                "L_YEAR_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         row.SUFFIX_CODE_PATTERN) = 1 INNER JO"& _ 
                "IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         T_MODEL_OPTION_CELL AS cell ON row.MODEL_OPTION_ROW"& _ 
                "_ID = cell.MODEL_OPTION_ROW_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         T_OPTION_MST"& _ 
                " AS opt ON opt.OPTION_ID = cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (prod.PRODUCTION_DATE + "& _ 
                "prod.ON_TIME BETWEEN @dateTime1 AND @dateTime2)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateTime1", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateTime2", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtINSTRUCTION_DATADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtINSTRUCTION_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtINSTRUCTION_DATADataTable = New dsPAINT.dtINSTRUCTION_DATADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProductionDateTimeRange(ByVal dataTable As dsPAINT.dtINSTRUCTION_DATADataTable, ByVal dateTime1 As String, ByVal dateTime2 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (dateTime1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dateTime1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(dateTime1,String)
            End If
            If (dateTime2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dateTime2")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dateTime2,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProductionDateTimeRange(ByVal dateTime1 As String, ByVal dateTime2 As String) As dsPAINT.dtINSTRUCTION_DATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (dateTime1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dateTime1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(dateTime1,String)
            End If
            If (dateTime2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dateTime2")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dateTime2,String)
            End If
            Dim dataTable As dsPAINT.dtINSTRUCTION_DATADataTable = New dsPAINT.dtINSTRUCTION_DATADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPRODUCTION_DAT
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPRODUCTION_DAT"
            tableMapping.ColumnMappings.Add("INDEX_NO", "INDEX_NO")
            tableMapping.ColumnMappings.Add("PRODUCTION_DATE", "PRODUCTION_DATE")
            tableMapping.ColumnMappings.Add("ON_TIME", "ON_TIME")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("LOT_ID", "LOT_ID")
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("BLOCK_MODEL", "BLOCK_MODEL")
            tableMapping.ColumnMappings.Add("BLOCK_SEQ", "BLOCK_SEQ")
            tableMapping.ColumnMappings.Add("IMPORT_CODE", "IMPORT_CODE")
            tableMapping.ColumnMappings.Add("GA_SHOP", "GA_SHOP")
            tableMapping.ColumnMappings.Add("LANE_NO", "LANE_NO")
            tableMapping.ColumnMappings.Add("CURRENT_PROCESS", "CURRENT_PROCESS")
            tableMapping.ColumnMappings.Add("SEQ_NO", "SEQ_NO")
            tableMapping.ColumnMappings.Add("MARK", "MARK")
            tableMapping.ColumnMappings.Add("SHIFT", "SHIFT")
            tableMapping.ColumnMappings.Add("Y_CHASSIS_FLAG", "Y_CHASSIS_FLAG")
            tableMapping.ColumnMappings.Add("BODY_SHOP_CODE", "BODY_SHOP_CODE")
            tableMapping.ColumnMappings.Add("HANDLE_TYPE", "HANDLE_TYPE")
            tableMapping.ColumnMappings.Add("BODY_COLOR_TC_SW", "BODY_COLOR_TC_SW")
            tableMapping.ColumnMappings.Add("BODY_COLOR_SEQ", "BODY_COLOR_SEQ")
            tableMapping.ColumnMappings.Add("BODY_COLOR_OPT", "BODY_COLOR_OPT")
            tableMapping.ColumnMappings.Add("BODY_COLOR_NAME", "BODY_COLOR_NAME")
            tableMapping.ColumnMappings.Add("SURFACE_COLOR_SF_SW", "SURFACE_COLOR_SF_SW")
            tableMapping.ColumnMappings.Add("SURFACE_COLOR_XXX", "SURFACE_COLOR_XXX")
            tableMapping.ColumnMappings.Add("SURFACE_COLOR_NAME", "SURFACE_COLOR_NAME")
            tableMapping.ColumnMappings.Add("FILE_NAME", "FILE_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PRODUCTION_DAT] WHERE (((@IsNull_SEQ_NO = 1 AND [SEQ_NO] IS NULL) "& _ 
                "OR ([SEQ_NO] = @Original_SEQ_NO)) AND ([MODEL_YEAR] = @Original_MODEL_YEAR) AND "& _ 
                "([SUFFIX_CODE] = @Original_SUFFIX_CODE) AND ((@IsNull_LOT_ID = 1 AND [LOT_ID] IS"& _ 
                " NULL) OR ([LOT_ID] = @Original_LOT_ID)) AND ([LOT_NO] = @Original_LOT_NO) AND ("& _ 
                "[UNIT] = @Original_UNIT) AND ((@IsNull_BLOCK_MODEL = 1 AND [BLOCK_MODEL] IS NULL"& _ 
                ") OR ([BLOCK_MODEL] = @Original_BLOCK_MODEL)) AND ((@IsNull_BLOCK_SEQ = 1 AND [B"& _ 
                "LOCK_SEQ] IS NULL) OR ([BLOCK_SEQ] = @Original_BLOCK_SEQ)) AND ((@IsNull_MARK = "& _ 
                "1 AND [MARK] IS NULL) OR ([MARK] = @Original_MARK)) AND ((@IsNull_PRODUCTION_DAT"& _ 
                "E = 1 AND [PRODUCTION_DATE] IS NULL) OR ([PRODUCTION_DATE] = @Original_PRODUCTIO"& _ 
                "N_DATE)) AND ((@IsNull_SHIFT = 1 AND [SHIFT] IS NULL) OR ([SHIFT] = @Original_SH"& _ 
                "IFT)) AND ((@IsNull_ON_TIME = 1 AND [ON_TIME] IS NULL) OR ([ON_TIME] = @Original"& _ 
                "_ON_TIME)) AND ((@IsNull_IMPORT_CODE = 1 AND [IMPORT_CODE] IS NULL) OR ([IMPORT_"& _ 
                "CODE] = @Original_IMPORT_CODE)) AND ((@IsNull_Y_CHASSIS_FLAG = 1 AND [Y_CHASSIS_"& _ 
                "FLAG] IS NULL) OR ([Y_CHASSIS_FLAG] = @Original_Y_CHASSIS_FLAG)) AND ((@IsNull_G"& _ 
                "A_SHOP = 1 AND [GA_SHOP] IS NULL) OR ([GA_SHOP] = @Original_GA_SHOP)) AND ((@IsN"& _ 
                "ull_BODY_SHOP_CODE = 1 AND [BODY_SHOP_CODE] IS NULL) OR ([BODY_SHOP_CODE] = @Ori"& _ 
                "ginal_BODY_SHOP_CODE)) AND ((@IsNull_HANDLE_TYPE = 1 AND [HANDLE_TYPE] IS NULL) "& _ 
                "OR ([HANDLE_TYPE] = @Original_HANDLE_TYPE)) AND ((@IsNull_BODY_COLOR_TC_SW = 1 A"& _ 
                "ND [BODY_COLOR_TC_SW] IS NULL) OR ([BODY_COLOR_TC_SW] = @Original_BODY_COLOR_TC_"& _ 
                "SW)) AND ((@IsNull_BODY_COLOR_SEQ = 1 AND [BODY_COLOR_SEQ] IS NULL) OR ([BODY_CO"& _ 
                "LOR_SEQ] = @Original_BODY_COLOR_SEQ)) AND ((@IsNull_BODY_COLOR_OPT = 1 AND [BODY"& _ 
                "_COLOR_OPT] IS NULL) OR ([BODY_COLOR_OPT] = @Original_BODY_COLOR_OPT)) AND ((@Is"& _ 
                "Null_BODY_COLOR_NAME = 1 AND [BODY_COLOR_NAME] IS NULL) OR ([BODY_COLOR_NAME] = "& _ 
                "@Original_BODY_COLOR_NAME)) AND ((@IsNull_SURFACE_COLOR_SF_SW = 1 AND [SURFACE_C"& _ 
                "OLOR_SF_SW] IS NULL) OR ([SURFACE_COLOR_SF_SW] = @Original_SURFACE_COLOR_SF_SW))"& _ 
                " AND ((@IsNull_SURFACE_COLOR_XXX = 1 AND [SURFACE_COLOR_XXX] IS NULL) OR ([SURFA"& _ 
                "CE_COLOR_XXX] = @Original_SURFACE_COLOR_XXX)) AND ((@IsNull_SURFACE_COLOR_NAME ="& _ 
                " 1 AND [SURFACE_COLOR_NAME] IS NULL) OR ([SURFACE_COLOR_NAME] = @Original_SURFAC"& _ 
                "E_COLOR_NAME)) AND ((@IsNull_FILE_NAME = 1 AND [FILE_NAME] IS NULL) OR ([FILE_NA"& _ 
                "ME] = @Original_FILE_NAME)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEQ_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOT_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BLOCK_MODEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BLOCK_MODEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BLOCK_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BLOCK_SEQ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MARK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MARK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRODUCTION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCTION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRODUCTION_DATE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCTION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIFT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIFT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIFT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIFT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ON_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ON_TIME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IMPORT_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IMPORT_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Y_CHASSIS_FLAG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_CHASSIS_FLAG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Y_CHASSIS_FLAG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_CHASSIS_FLAG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GA_SHOP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GA_SHOP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GA_SHOP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GA_SHOP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_SHOP_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_SHOP_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_SHOP_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_SHOP_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HANDLE_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDLE_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HANDLE_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDLE_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_COLOR_TC_SW", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_TC_SW", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_COLOR_TC_SW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_TC_SW", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_COLOR_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_SEQ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_COLOR_SEQ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_COLOR_OPT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_OPT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_COLOR_OPT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_OPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_COLOR_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_COLOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SURFACE_COLOR_SF_SW", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_SF_SW", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SURFACE_COLOR_SF_SW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_SF_SW", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SURFACE_COLOR_XXX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_XXX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SURFACE_COLOR_XXX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_XXX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SURFACE_COLOR_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SURFACE_COLOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FILE_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PRODUCTION_DAT] ([SEQ_NO], [MODEL_YEAR], [SUFFIX_CODE], [LOT_ID], "& _ 
                "[LOT_NO], [UNIT], [BLOCK_MODEL], [BLOCK_SEQ], [MARK], [PRODUCTION_DATE], [SHIFT]"& _ 
                ", [ON_TIME], [IMPORT_CODE], [Y_CHASSIS_FLAG], [GA_SHOP], [BODY_SHOP_CODE], [HAND"& _ 
                "LE_TYPE], [BODY_COLOR_TC_SW], [BODY_COLOR_SEQ], [BODY_COLOR_OPT], [BODY_COLOR_NA"& _ 
                "ME], [SURFACE_COLOR_SF_SW], [SURFACE_COLOR_XXX], [SURFACE_COLOR_NAME], [FILE_NAM"& _ 
                "E]) VALUES (@SEQ_NO, @MODEL_YEAR, @SUFFIX_CODE, @LOT_ID, @LOT_NO, @UNIT, @BLOCK_"& _ 
                "MODEL, @BLOCK_SEQ, @MARK, @PRODUCTION_DATE, @SHIFT, @ON_TIME, @IMPORT_CODE, @Y_C"& _ 
                "HASSIS_FLAG, @GA_SHOP, @BODY_SHOP_CODE, @HANDLE_TYPE, @BODY_COLOR_TC_SW, @BODY_C"& _ 
                "OLOR_SEQ, @BODY_COLOR_OPT, @BODY_COLOR_NAME, @SURFACE_COLOR_SF_SW, @SURFACE_COLO"& _ 
                "R_XXX, @SURFACE_COLOR_NAME, @FILE_NAME);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT 0 AS INDEX_NO, 0 AS SKIT_NO, MO"& _ 
                "DEL_YEAR + SUFFIX_CODE AS MODEL_CODE, 0 AS LANE_NO, CAST('' AS varchar(255)) AS "& _ 
                "CURRENT_PROCESS, SEQ_NO, MODEL_YEAR, SUFFIX_CODE, LOT_ID, LOT_NO, UNIT, BLOCK_MO"& _ 
                "DEL, BLOCK_SEQ, MARK, PRODUCTION_DATE, SHIFT, ON_TIME, IMPORT_CODE, Y_CHASSIS_FL"& _ 
                "AG, GA_SHOP, BODY_SHOP_CODE, HANDLE_TYPE, BODY_COLOR_TC_SW, BODY_COLOR_SEQ, BODY"& _ 
                "_COLOR_OPT, BODY_COLOR_NAME, SURFACE_COLOR_SF_SW, SURFACE_COLOR_XXX, SURFACE_COL"& _ 
                "OR_NAME, FILE_NAME FROM T_PRODUCTION_DAT WHERE (LOT_NO = @LOT_NO) AND (MODEL_YEA"& _ 
                "R = @MODEL_YEAR) AND (SUFFIX_CODE = @SUFFIX_CODE) AND (UNIT = @UNIT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK_MODEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK_SEQ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCTION_DATE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCTION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIFT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIFT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ON_TIME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IMPORT_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Y_CHASSIS_FLAG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_CHASSIS_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GA_SHOP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GA_SHOP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_SHOP_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_SHOP_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HANDLE_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDLE_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_COLOR_TC_SW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_TC_SW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_COLOR_SEQ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_COLOR_OPT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_OPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_COLOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SURFACE_COLOR_SF_SW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_SF_SW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SURFACE_COLOR_XXX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_XXX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SURFACE_COLOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PRODUCTION_DAT] SET [SEQ_NO] = @SEQ_NO, [MODEL_YEAR] = @MODEL_YEAR, [SU"& _ 
                "FFIX_CODE] = @SUFFIX_CODE, [LOT_ID] = @LOT_ID, [LOT_NO] = @LOT_NO, [UNIT] = @UNI"& _ 
                "T, [BLOCK_MODEL] = @BLOCK_MODEL, [BLOCK_SEQ] = @BLOCK_SEQ, [MARK] = @MARK, [PROD"& _ 
                "UCTION_DATE] = @PRODUCTION_DATE, [SHIFT] = @SHIFT, [ON_TIME] = @ON_TIME, [IMPORT"& _ 
                "_CODE] = @IMPORT_CODE, [Y_CHASSIS_FLAG] = @Y_CHASSIS_FLAG, [GA_SHOP] = @GA_SHOP,"& _ 
                " [BODY_SHOP_CODE] = @BODY_SHOP_CODE, [HANDLE_TYPE] = @HANDLE_TYPE, [BODY_COLOR_T"& _ 
                "C_SW] = @BODY_COLOR_TC_SW, [BODY_COLOR_SEQ] = @BODY_COLOR_SEQ, [BODY_COLOR_OPT] "& _ 
                "= @BODY_COLOR_OPT, [BODY_COLOR_NAME] = @BODY_COLOR_NAME, [SURFACE_COLOR_SF_SW] ="& _ 
                " @SURFACE_COLOR_SF_SW, [SURFACE_COLOR_XXX] = @SURFACE_COLOR_XXX, [SURFACE_COLOR_"& _ 
                "NAME] = @SURFACE_COLOR_NAME, [FILE_NAME] = @FILE_NAME WHERE (((@IsNull_SEQ_NO = "& _ 
                "1 AND [SEQ_NO] IS NULL) OR ([SEQ_NO] = @Original_SEQ_NO)) AND ([MODEL_YEAR] = @O"& _ 
                "riginal_MODEL_YEAR) AND ([SUFFIX_CODE] = @Original_SUFFIX_CODE) AND ((@IsNull_LO"& _ 
                "T_ID = 1 AND [LOT_ID] IS NULL) OR ([LOT_ID] = @Original_LOT_ID)) AND ([LOT_NO] ="& _ 
                " @Original_LOT_NO) AND ([UNIT] = @Original_UNIT) AND ((@IsNull_BLOCK_MODEL = 1 A"& _ 
                "ND [BLOCK_MODEL] IS NULL) OR ([BLOCK_MODEL] = @Original_BLOCK_MODEL)) AND ((@IsN"& _ 
                "ull_BLOCK_SEQ = 1 AND [BLOCK_SEQ] IS NULL) OR ([BLOCK_SEQ] = @Original_BLOCK_SEQ"& _ 
                ")) AND ((@IsNull_MARK = 1 AND [MARK] IS NULL) OR ([MARK] = @Original_MARK)) AND "& _ 
                "((@IsNull_PRODUCTION_DATE = 1 AND [PRODUCTION_DATE] IS NULL) OR ([PRODUCTION_DAT"& _ 
                "E] = @Original_PRODUCTION_DATE)) AND ((@IsNull_SHIFT = 1 AND [SHIFT] IS NULL) OR"& _ 
                " ([SHIFT] = @Original_SHIFT)) AND ((@IsNull_ON_TIME = 1 AND [ON_TIME] IS NULL) O"& _ 
                "R ([ON_TIME] = @Original_ON_TIME)) AND ((@IsNull_IMPORT_CODE = 1 AND [IMPORT_COD"& _ 
                "E] IS NULL) OR ([IMPORT_CODE] = @Original_IMPORT_CODE)) AND ((@IsNull_Y_CHASSIS_"& _ 
                "FLAG = 1 AND [Y_CHASSIS_FLAG] IS NULL) OR ([Y_CHASSIS_FLAG] = @Original_Y_CHASSI"& _ 
                "S_FLAG)) AND ((@IsNull_GA_SHOP = 1 AND [GA_SHOP] IS NULL) OR ([GA_SHOP] = @Origi"& _ 
                "nal_GA_SHOP)) AND ((@IsNull_BODY_SHOP_CODE = 1 AND [BODY_SHOP_CODE] IS NULL) OR "& _ 
                "([BODY_SHOP_CODE] = @Original_BODY_SHOP_CODE)) AND ((@IsNull_HANDLE_TYPE = 1 AND"& _ 
                " [HANDLE_TYPE] IS NULL) OR ([HANDLE_TYPE] = @Original_HANDLE_TYPE)) AND ((@IsNul"& _ 
                "l_BODY_COLOR_TC_SW = 1 AND [BODY_COLOR_TC_SW] IS NULL) OR ([BODY_COLOR_TC_SW] = "& _ 
                "@Original_BODY_COLOR_TC_SW)) AND ((@IsNull_BODY_COLOR_SEQ = 1 AND [BODY_COLOR_SE"& _ 
                "Q] IS NULL) OR ([BODY_COLOR_SEQ] = @Original_BODY_COLOR_SEQ)) AND ((@IsNull_BODY"& _ 
                "_COLOR_OPT = 1 AND [BODY_COLOR_OPT] IS NULL) OR ([BODY_COLOR_OPT] = @Original_BO"& _ 
                "DY_COLOR_OPT)) AND ((@IsNull_BODY_COLOR_NAME = 1 AND [BODY_COLOR_NAME] IS NULL) "& _ 
                "OR ([BODY_COLOR_NAME] = @Original_BODY_COLOR_NAME)) AND ((@IsNull_SURFACE_COLOR_"& _ 
                "SF_SW = 1 AND [SURFACE_COLOR_SF_SW] IS NULL) OR ([SURFACE_COLOR_SF_SW] = @Origin"& _ 
                "al_SURFACE_COLOR_SF_SW)) AND ((@IsNull_SURFACE_COLOR_XXX = 1 AND [SURFACE_COLOR_"& _ 
                "XXX] IS NULL) OR ([SURFACE_COLOR_XXX] = @Original_SURFACE_COLOR_XXX)) AND ((@IsN"& _ 
                "ull_SURFACE_COLOR_NAME = 1 AND [SURFACE_COLOR_NAME] IS NULL) OR ([SURFACE_COLOR_"& _ 
                "NAME] = @Original_SURFACE_COLOR_NAME)) AND ((@IsNull_FILE_NAME = 1 AND [FILE_NAM"& _ 
                "E] IS NULL) OR ([FILE_NAME] = @Original_FILE_NAME)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT 0 AS INDEX_NO, 0 A"& _ 
                "S SKIT_NO, MODEL_YEAR + SUFFIX_CODE AS MODEL_CODE, 0 AS LANE_NO, CAST('' AS varc"& _ 
                "har(255)) AS CURRENT_PROCESS, SEQ_NO, MODEL_YEAR, SUFFIX_CODE, LOT_ID, LOT_NO, U"& _ 
                "NIT, BLOCK_MODEL, BLOCK_SEQ, MARK, PRODUCTION_DATE, SHIFT, ON_TIME, IMPORT_CODE,"& _ 
                " Y_CHASSIS_FLAG, GA_SHOP, BODY_SHOP_CODE, HANDLE_TYPE, BODY_COLOR_TC_SW, BODY_CO"& _ 
                "LOR_SEQ, BODY_COLOR_OPT, BODY_COLOR_NAME, SURFACE_COLOR_SF_SW, SURFACE_COLOR_XXX"& _ 
                ", SURFACE_COLOR_NAME, FILE_NAME FROM T_PRODUCTION_DAT WHERE (LOT_NO = @LOT_NO) A"& _ 
                "ND (MODEL_YEAR = @MODEL_YEAR) AND (SUFFIX_CODE = @SUFFIX_CODE) AND (UNIT = @UNIT"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQ_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK_MODEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK_SEQ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MARK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCTION_DATE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCTION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIFT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIFT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ON_TIME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IMPORT_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Y_CHASSIS_FLAG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_CHASSIS_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GA_SHOP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GA_SHOP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_SHOP_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_SHOP_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HANDLE_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDLE_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_COLOR_TC_SW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_TC_SW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_COLOR_SEQ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_COLOR_OPT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_OPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BODY_COLOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SURFACE_COLOR_SF_SW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_SF_SW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SURFACE_COLOR_XXX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_XXX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SURFACE_COLOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEQ_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQ_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQ_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOT_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BLOCK_MODEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BLOCK_MODEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BLOCK_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BLOCK_SEQ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MARK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MARK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MARK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRODUCTION_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCTION_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRODUCTION_DATE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCTION_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SHIFT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIFT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SHIFT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIFT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ON_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ON_TIME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IMPORT_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IMPORT_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IMPORT_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Y_CHASSIS_FLAG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_CHASSIS_FLAG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Y_CHASSIS_FLAG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Y_CHASSIS_FLAG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GA_SHOP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GA_SHOP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GA_SHOP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GA_SHOP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_SHOP_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_SHOP_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_SHOP_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_SHOP_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HANDLE_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDLE_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HANDLE_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HANDLE_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_COLOR_TC_SW", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_TC_SW", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_COLOR_TC_SW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_TC_SW", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_COLOR_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_SEQ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_COLOR_SEQ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_COLOR_OPT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_OPT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_COLOR_OPT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_OPT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BODY_COLOR_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BODY_COLOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BODY_COLOR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SURFACE_COLOR_SF_SW", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_SF_SW", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SURFACE_COLOR_SF_SW", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_SF_SW", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SURFACE_COLOR_XXX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_XXX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SURFACE_COLOR_XXX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_XXX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SURFACE_COLOR_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SURFACE_COLOR_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SURFACE_COLOR_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FILE_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FILE_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FILE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(13) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT    0 AS INDEX_NO, 0 As SKIT_NO, MODEL_YEAR + SUFFIX_CODE AS MODEL_CODE, 0 "& _ 
                "AS LANE_NO, cast('' as varchar(255)) as CURRENT_PROCESS, T_PRODUCTION_DAT.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M         T_PRODUCTION_DAT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT TOP (1) p.production_date"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM T_PRODUCTION_DAT p"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE abs(Cast(p.produ"& _ 
                "ction_date as int) - @production_date) = ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    SELECT MIN(abs(Cast(p_.productio"& _ 
                "n_date as int) - @production_date))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    FROM T_PRODUCTION_DAT p_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&")"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@production_date", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "DELETE FROM T_PRODUCTION_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (MODEL_YEAR = @modelYear) AND (SUFFIX_"& _ 
                "CODE = @suffixCode) AND (LOT_NO = @lotNo) AND (UNIT = @unit)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "WITH TEMP(MIN_DATE) AS (SELECT     TOP (1) PROD.PRODUCTION_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "                                             FROM         T_PRODUCTION_DAT AS PR"& _ 
                "OD LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                            "& _ 
                "                            (SELECT     paintCell.MODEL_YEAR, paintCell.SUFFIX_C"& _ 
                "ODE, paintCell.LOT_NO, paintCell.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                         "& _ 
                "                                                 FROM          T_PAINT_CELL AS p"& _ 
                "aintCell INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                           "& _ 
                "                                                      T_PROCESS_MST AS pro ON pa"& _ 
                "intCell.PROCESS_NO = pro.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                           "& _ 
                "                                               WHERE      (pro.PROCESS_TYPE = '3"& _ 
                "') AND (pro.ENTRANCE_FLAG = 'False')) AS pbrOffList ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "                                                             PROD.MODEL_YEAR = p"& _ 
                "brOffList.MODEL_YEAR AND PROD.SUFFIX_CODE = pbrOffList.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                                                                             PRO"& _ 
                "D.LOT_NO = pbrOffList.LOT_NO AND PROD.UNIT = pbrOffList.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "                                           WHERE     (pbrOffList.MODEL_YEAR IS N"& _ 
                "ULL)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                             ORDER BY PROD"& _ 
                ".PRODUCTION_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    DELETE FROM T_PRODUCTION_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     WHERE     (PRODUCTION_"& _ 
                "DATE < CONVERT(VARCHAR(8),"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                (SELECT     CASE WHE"& _ 
                "N"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                             (SELECT     COUN"& _ 
                "T(MIN_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                               FROM"& _ 
                "          TEMP) > 0 THEN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                      "& _ 
                "       (SELECT     CONVERT(DATETIME, MIN_DATE, 112)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                                    FROM          TEMP) ELSE GETDATE() END - CON"& _ 
                "VERT(INTEGER, @expDate) AS Expr1), 112))"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expDate", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT TOP (1) 0 AS INDEX_NO, '' AS MODEL_CODE, x.BLOCK_MODEL, x.BLOCK_SEQ, x.BOD"& _ 
                "Y_COLOR_NAME, x.BODY_COLOR_OPT, x.BODY_COLOR_SEQ, x.BODY_COLOR_TC_SW, x.BODY_SHO"& _ 
                "P_CODE, x.FILE_NAME, x.GA_SHOP, x.HANDLE_TYPE, x.IMPORT_CODE, x.LOT_ID, x.LOT_NO"& _ 
                ", x.MARK, x.MODEL_YEAR, x.ON_TIME, x.PRODUCTION_DATE, x.SEQ_NO, x.SHIFT, x.SUFFI"& _ 
                "X_CODE, x.SURFACE_COLOR_NAME, x.SURFACE_COLOR_SF_SW, x.SURFACE_COLOR_XXX, x.UNIT"& _ 
                ", x.Y_CHASSIS_FLAG FROM T_PRODUCTION_DAT AS x INNER JOIN (SELECT pd.PRODUCTION_D"& _ 
                "ATE, MAX(pd.ON_TIME) AS ON_TIME FROM T_PRODUCTION_DAT AS pd INNER JOIN T_PAINT_C"& _ 
                "ELL AS pc ON pd.MODEL_YEAR = pc.MODEL_YEAR AND pd.SUFFIX_CODE = pc.SUFFIX_CODE A"& _ 
                "ND pd.LOT_NO = pc.LOT_NO AND pd.UNIT = pc.UNIT INNER JOIN T_PROCESS_MST AS p ON "& _ 
                "pc.PROCESS_NO = p.PROCESS_NO WHERE (p.PROCESS_TYPE = @PROCESS_TYPE) AND (pd.PROD"& _ 
                "UCTION_DATE = (SELECT MAX(pd_.PRODUCTION_DATE) AS max_PRODUCTION_DATE FROM T_PRO"& _ 
                "DUCTION_DAT AS pd_ INNER JOIN T_PAINT_CELL AS pc_ ON pd_.MODEL_YEAR = pc_.MODEL_"& _ 
                "YEAR AND pd_.SUFFIX_CODE = pc_.SUFFIX_CODE AND pd_.LOT_NO = pc_.LOT_NO AND pd_.U"& _ 
                "NIT = pc_.UNIT INNER JOIN T_PROCESS_MST AS p_ ON pc_.PROCESS_NO = p_.PROCESS_NO "& _ 
                "WHERE (p_.PROCESS_TYPE = @PROCESS_TYPE))) GROUP BY pd.PRODUCTION_DATE) AS y ON x"& _ 
                ".PRODUCTION_DATE = y.PRODUCTION_DATE AND x.ON_TIME = y.ON_TIME"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT TOP (1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    pd.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , 0 AS INDEX_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , '' AS MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , sk.S"& _ 
                "KIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM T_PRODUCTION_DAT pd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    LEFT OUTER JOIN T_SKIT_MST sk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ON "& _ 
                "pd.MODEL_YEAR = sk.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND pd.SUFFIX_CODE = sk.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "    AND pd.LOT_NO = sk.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND pd.UNIT = sk.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (pd.MODEL_YE"& _ 
                "AR LIKE @MODEL_YEAR)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (pd.SUFFIX_CODE LIKE @SUFFIX_CODE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (pd.LO"& _ 
                "T_NO LIKE @LOT_NO)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (pd.UNIT LIKE @UNIT)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (sk.SKIT_NO = @SKIT_NO"& _ 
                " OR @SKIT_NO = 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY pd.PRODUCTION_DATE, pd.ON_TIME"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TOP (@Block)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    0 AS INDEX_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.PRODUCTION_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.ON_T"& _ 
                "IME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , sk.SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.LOT_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.SUFFIX_COD"& _ 
                "E"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.MODEL_YEAR + ot.SUFFIX_CODE AS MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot"& _ 
                ".UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.BLOCK_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.IMPORT_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot."& _ 
                "GA_SHOP"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , @SORT_BLOCK_FLAG AS SORT_BLOCK_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ISNULL(p.PROCESS_NAME,"& _ 
                " '') as CURRENT_PROCESS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        SELECT    pd.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            , CASE WHEN"& _ 
                " (@SORT_BLOCK_FLAG) = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    THEN    CASE WHEN BLOCK_MODEL IS NU"& _ 
                "LL OR rtrim(BLOCK_MODEL) = ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    THEN 'ZZZZZZZ"& _ 
                "Z'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    ELSE BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "          END + "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                CASE WHEN BLOCK_SEQ IS NULL OR"& _ 
                " rtrim(BLOCK_SEQ) = ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    THEN 'ZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                            ELSE BLOCK_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                END"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    ELSE ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                END + PRODUCTION_DATE AS PARAM1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "       FROM T_PRODUCTION_DAT AS pd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        WHERE ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            CASE WHEN (@SOR"& _ 
                "T_BLOCK_FLAG) = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                THEN    CASE WHEN BLOCK_MODEL IS NULL OR rtri"& _ 
                "m(BLOCK_MODEL) = ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                THEN 'ZZZZZZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "                      ELSE BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            END +"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                       CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ) = ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                             THEN 'ZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                ELSE BL"& _ 
                "OCK_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            END"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ELSE ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            E"& _ 
                "ND + PRODUCTION_DATE >= @PRODUCTION_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ) AS ot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    LEFT O"& _ 
                "UTER JOIN T_SKIT_MST AS sk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ON ot.MODEL_YEAR = sk.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AN"& _ 
                "D ot.SUFFIX_CODE = sk.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ot.LOT_NO = sk.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AN"& _ 
                "D ot.UNIT = sk.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    LEFT OUTER JOIN T_PAINT_CELL pc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ON ot.MODEL_YE"& _ 
                "AR = pc.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ot.SUFFIX_CODE = pc.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ot."& _ 
                "LOT_NO = pc.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ot.UNIT = pc.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    LEFT OUTER JOIN T_PROCESS"& _ 
                "_MST p"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ON pc.PROCESS_NO = p.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ((NOT (ot.PARAM1 = @PRODU"& _ 
                "CTION_DATE))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    OR (NOT (ot.ON_TIME < @ON_TIME)))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (p.PROCESS_NO IS NU"& _ 
                "LL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        OR EXISTS ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            SELECT "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                pc_.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "              , pc_.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                , pc_.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ,"& _ 
                " pc_.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM T_PAINT_CELL pc_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            WHERE ot.MODEL_YEAR = "& _ 
                "pc_.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                AND ot.SUFFIX_CODE = pc_.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "      AND ot.LOT_NO = pc_.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                AND ot.UNIT = pc_.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "      GROUP BY "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                pc_.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                , pc_.SUFFIX_CO"& _ 
                "DE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                , pc_.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                , pc_.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            HAVING"& _ 
                " pc.PROCESS_RESULT_DATE = MAX(pc_.PROCESS_RESULT_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER "& _ 
                "BY ot.PARAM1, ot.ON_TIME"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SORT_BLOCK_FLAG", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCTION_DATE", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "PARAM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ON_TIME", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     SEQ_NO, MODEL_YEAR, SUFFIX_CODE, LOT_ID, LOT_NO, UNIT, BLOCK_MODEL, BL"& _ 
                "OCK_SEQ, MARK, PRODUCTION_DATE, SHIFT, ON_TIME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      IMPORT_C"& _ 
                "ODE, Y_CHASSIS_FLAG, GA_SHOP, BODY_SHOP_CODE, HANDLE_TYPE, BODY_COLOR_TC_SW, BOD"& _ 
                "Y_COLOR_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BODY_COLOR_OPT, BODY_COLOR_NAME, SURFACE_CO"& _ 
                "LOR_SF_SW, SURFACE_COLOR_XXX, SURFACE_COLOR_NAME, FILE_NAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROD"& _ 
                "UCTION_DAT AS prod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT EXISTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          (SELECT    "& _ 
                " MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO, PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                     FROM          T_PAINT_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            WHE"& _ 
                "RE      (MODEL_YEAR = prod.MODEL_YEAR) AND (SUFFIX_CODE = prod.SUFFIX_CODE) AND "& _ 
                "(LOT_NO = prod.LOT_NO) AND (UNIT = prod.UNIT)))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT        0 AS INDEX_NO, 0 AS SKIT_NO, MODEL_YEAR + SUFFIX_CODE AS MODEL_CODE"& _ 
                ", 0 AS LANE_NO, CAST('' AS varchar(255)) AS CURRENT_PROCESS, SEQ_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                MODEL_YEAR, SUFFIX_CODE, LOT_ID, LOT_NO, UNIT, BLOCK_MODEL, BLOC"& _ 
                "K_SEQ, MARK, PRODUCTION_DATE, SHIFT, ON_TIME, IMPORT_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      Y_CHASSIS_FLAG, GA_SHOP, BODY_SHOP_CODE, HANDLE_TYPE, BODY_COLOR_TC_SW, BO"& _ 
                "DY_COLOR_SEQ, BODY_COLOR_OPT, BODY_COLOR_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         SURFAC"& _ 
                "E_COLOR_SF_SW, SURFACE_COLOR_XXX, SURFACE_COLOR_NAME, FILE_NAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM           "& _ 
                " T_PRODUCTION_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (MODEL_YEAR = @modelYear) AND (SUFFIX_CODE = @su"& _ 
                "ffixCode) AND (LOT_NO = @lotNo) AND (UNIT = @unit)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PRODUCTION_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (MODEL_YEAR = @modelYear) "& _ 
                "AND (SUFFIX_CODE = @suffixCode) AND (LOT_NO = @lotNo) AND (UNIT = @unit) AND (BL"& _ 
                "OCK_MODEL = @block) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (BLOCK_SEQ = @blockSeq)"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@blockSeq", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT TOP (@block)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    0 as INDEX_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , null AS SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , "& _ 
                "@SORT_BLOCK_FLAG as SORT_BLOCK_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , '' AS CURRENT_PROCESS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "  SELECT  pd.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            , CASE WHEN (@SORT_BLOCK_FLAG) = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "THEN CASE WHEN BLOCK_MODEL IS NULL OR rtrim(BLOCK_MODEL)= ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "      THEN 'ZZZZZZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        ELSE BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "      END +"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ"& _ 
                ")= ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         THEN 'ZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ELSE BLOCK_"& _ 
                "SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     END"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ELSE ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              END + PR"& _ 
                "ODUCTION_DATE as PARAM1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        FROM T_PRODUCTION_DAT AS pd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        WHERE (( C"& _ 
                "ASE WHEN (@SORT_BLOCK_FLAG) = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     THEN CASE WHEN BLOCK_MODEL"& _ 
                " IS NULL OR rtrim(BLOCK_MODEL)= ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              THEN 'ZZZZZZZZ"& _ 
                "'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              ELSE BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          END"& _ 
                " +"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ)= '"& _ 
                "'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              THEN 'ZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              ELSE "& _ 
                "BLOCK_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          END"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     ELSE ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "         END + PRODUCTION_DATE) <= @PRODUCTION_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ) AS ot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (NOT ("& _ 
                "PARAM1 = @PRODUCTION_DATE))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    OR (NOT (ON_TIME > @ON_TIME))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY PARAM1 "& _ 
                "DESC, ON_TIME DESC"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SORT_BLOCK_FLAG", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCTION_DATE", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "PARAM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ON_TIME", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = "SELECT     SEQ_NO, MODEL_YEAR, SUFFIX_CODE, LOT_ID, LOT_NO, UNIT, BLOCK_MODEL, BL"& _ 
                "OCK_SEQ, MARK, PRODUCTION_DATE, SHIFT, ON_TIME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      IMPORT_C"& _ 
                "ODE, Y_CHASSIS_FLAG, GA_SHOP, BODY_SHOP_CODE, HANDLE_TYPE, BODY_COLOR_TC_SW, BOD"& _ 
                "Y_COLOR_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BODY_COLOR_OPT, BODY_COLOR_NAME, SURFACE_CO"& _ 
                "LOR_SF_SW, SURFACE_COLOR_XXX, SURFACE_COLOR_NAME, FILE_NAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROD"& _ 
                "UCTION_DAT AS prod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     EXISTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          (SELECT     MODE"& _ 
                "L_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO, PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "                FROM          T_PAINT_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            WHERE   "& _ 
                "   (MODEL_YEAR = prod.MODEL_YEAR) AND (SUFFIX_CODE = prod.SUFFIX_CODE) AND (LOT_"& _ 
                "NO = prod.LOT_NO) AND (UNIT = prod.UNIT))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(12).Connection = Me.Connection
            Me._commandCollection(12).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"prod.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PRODUCTION_DAT AS prod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_SKIT_MST AS skit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "ON prod.MODEL_YEAR = skit.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.SUFFIX_CODE = skit.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.LOT_NO = skit.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.UNIT = skit.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"skit.SKIT_N"& _ 
                "O = @skitNo"
            Me._commandCollection(12).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skitNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(13).Connection = Me.Connection
            Me._commandCollection(13).CommandText = "SELECT     COUNT(*) AS OffsetBase, @SORT_BLOCK_FLAG as SORT_BLOCK_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     "& _ 
                "    (SELECT     PRODUCTION_DATE, ON_TIME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          ("& _ 
                "SELECT     PRODUCTION_DATE, ON_TIME,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CASE WHEN (@SORT_BLOCK_FLAG) = 1 THEN CASE"& _ 
                " WHEN BLOCK_MODEL IS NULL OR rtrim(BLOCK_MODEL)= '' THEN 'ZZZZZZZZ' ELSE BLOCK_M"& _ 
                "ODEL END + CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ)= '' THEN 'ZZZ' ELSE B"& _ 
                "LOCK_SEQ END ELSE '' END + PRODUCTION_DATE as PARAM1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          "& _ 
                "                     FROM          T_Production_DAT AS pd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                          WHERE      ((CASE WHEN (@SORT_BLOCK_FLAG) = 1 THEN CAS"& _ 
                "E WHEN BLOCK_MODEL IS NULL OR rtrim(BLOCK_MODEL)= '' THEN 'ZZZZZZZZ' ELSE BLOCK_"& _ 
                "MODEL END + CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ)= '' THEN 'ZZZ' ELSE "& _ 
                "BLOCK_SEQ END ELSE '' END + PRODUCTION_DATE) <= @PRODUCTION_DATE) ) AS ot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                  WHERE      (NOT (PARAM1 = @PRODUCTION_DATE)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                 (NOT (ON_TIME > @ON_TIME))) AS derivedtbl_1"
            Me._commandCollection(13).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SORT_BLOCK_FLAG", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCTION_DATE", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ON_TIME", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLastestResult(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable, ByVal PROCESS_TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROCESS_TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLastestResult(ByVal PROCESS_TYPE As Integer) As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROCESS_TYPE,Integer)
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModelLotUnit(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal SKIT_NO As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            If (SKIT_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(SKIT_NO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModelLotUnit(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal SKIT_NO As Global.System.Nullable(Of Integer)) As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            If (SKIT_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(SKIT_NO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable, ByVal Block As Integer, ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As Object, ByVal ON_TIME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Block,Integer)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PRODUCTION_DATE,Object)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ON_TIME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal Block As Integer, ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As Object, ByVal ON_TIME As String) As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Block,Integer)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PRODUCTION_DATE,Object)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ON_TIME,String)
            End If
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNotResulted(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNotResulted() As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPk(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable, ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPk(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPKAndBlock(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable, ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal block As String, ByVal blockSeq As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            If (block Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(block,String)
            End If
            If (blockSeq Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(blockSeq,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPKAndBlock(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal block As String, ByVal blockSeq As String) As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            If (block Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(block,String)
            End If
            If (blockSeq Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(blockSeq,String)
            End If
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable, ByVal block As Integer, ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As Object, ByVal ON_TIME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PRODUCTION_DATE,Object)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ON_TIME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal block As Integer, ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As Object, ByVal ON_TIME As String) As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PRODUCTION_DATE,Object)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ON_TIME,String)
            End If
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByResulted(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByResulted() As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySkitNo(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable, ByVal skitNo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(skitNo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySkitNo(ByVal skitNo As Integer) As dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(skitNo,Integer)
            Dim dataTable As dsPAINT.dtPRODUCTION_DATDataTable = New dsPAINT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtPRODUCTION_DATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPRODUCTION_DAT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_SEQ_NO As String,  _
                    ByVal Original_MODEL_YEAR As String,  _
                    ByVal Original_SUFFIX_CODE As String,  _
                    ByVal Original_LOT_ID As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT As String,  _
                    ByVal Original_BLOCK_MODEL As String,  _
                    ByVal Original_BLOCK_SEQ As String,  _
                    ByVal Original_MARK As String,  _
                    ByVal Original_PRODUCTION_DATE As String,  _
                    ByVal Original_SHIFT As String,  _
                    ByVal Original_ON_TIME As String,  _
                    ByVal Original_IMPORT_CODE As String,  _
                    ByVal Original_Y_CHASSIS_FLAG As String,  _
                    ByVal Original_GA_SHOP As String,  _
                    ByVal Original_BODY_SHOP_CODE As String,  _
                    ByVal Original_HANDLE_TYPE As String,  _
                    ByVal Original_BODY_COLOR_TC_SW As String,  _
                    ByVal Original_BODY_COLOR_SEQ As String,  _
                    ByVal Original_BODY_COLOR_OPT As String,  _
                    ByVal Original_BODY_COLOR_NAME As String,  _
                    ByVal Original_SURFACE_COLOR_SF_SW As String,  _
                    ByVal Original_SURFACE_COLOR_XXX As String,  _
                    ByVal Original_SURFACE_COLOR_NAME As String,  _
                    ByVal Original_FILE_NAME As String) As Integer
            If (Original_SEQ_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEQ_NO,String)
            End If
            If (Original_MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_LOT_ID,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_UNIT,String)
            End If
            If (Original_BLOCK_MODEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_BLOCK_MODEL,String)
            End If
            If (Original_BLOCK_SEQ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_BLOCK_SEQ,String)
            End If
            If (Original_MARK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_MARK,String)
            End If
            If (Original_PRODUCTION_DATE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_PRODUCTION_DATE,String)
            End If
            If (Original_SHIFT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_SHIFT,String)
            End If
            If (Original_ON_TIME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ON_TIME,String)
            End If
            If (Original_IMPORT_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_IMPORT_CODE,String)
            End If
            If (Original_Y_CHASSIS_FLAG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_Y_CHASSIS_FLAG,String)
            End If
            If (Original_GA_SHOP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_GA_SHOP,String)
            End If
            If (Original_BODY_SHOP_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_BODY_SHOP_CODE,String)
            End If
            If (Original_HANDLE_TYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_HANDLE_TYPE,String)
            End If
            If (Original_BODY_COLOR_TC_SW Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_BODY_COLOR_TC_SW,String)
            End If
            If (Original_BODY_COLOR_SEQ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_BODY_COLOR_SEQ,String)
            End If
            If (Original_BODY_COLOR_OPT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_BODY_COLOR_OPT,String)
            End If
            If (Original_BODY_COLOR_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_BODY_COLOR_NAME,String)
            End If
            If (Original_SURFACE_COLOR_SF_SW Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_SURFACE_COLOR_SF_SW,String)
            End If
            If (Original_SURFACE_COLOR_XXX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_SURFACE_COLOR_XXX,String)
            End If
            If (Original_SURFACE_COLOR_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_SURFACE_COLOR_NAME,String)
            End If
            If (Original_FILE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_FILE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SEQ_NO As String,  _
                    ByVal MODEL_YEAR As String,  _
                    ByVal SUFFIX_CODE As String,  _
                    ByVal LOT_ID As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT As String,  _
                    ByVal BLOCK_MODEL As String,  _
                    ByVal BLOCK_SEQ As String,  _
                    ByVal MARK As String,  _
                    ByVal PRODUCTION_DATE As String,  _
                    ByVal SHIFT As String,  _
                    ByVal ON_TIME As String,  _
                    ByVal IMPORT_CODE As String,  _
                    ByVal Y_CHASSIS_FLAG As String,  _
                    ByVal GA_SHOP As String,  _
                    ByVal BODY_SHOP_CODE As String,  _
                    ByVal HANDLE_TYPE As String,  _
                    ByVal BODY_COLOR_TC_SW As String,  _
                    ByVal BODY_COLOR_SEQ As String,  _
                    ByVal BODY_COLOR_OPT As String,  _
                    ByVal BODY_COLOR_NAME As String,  _
                    ByVal SURFACE_COLOR_SF_SW As String,  _
                    ByVal SURFACE_COLOR_XXX As String,  _
                    ByVal SURFACE_COLOR_NAME As String,  _
                    ByVal FILE_NAME As String) As Integer
            If (SEQ_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SEQ_NO,String)
            End If
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LOT_ID,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(UNIT,String)
            End If
            If (BLOCK_MODEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(BLOCK_MODEL,String)
            End If
            If (BLOCK_SEQ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BLOCK_SEQ,String)
            End If
            If (MARK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MARK,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PRODUCTION_DATE,String)
            End If
            If (SHIFT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SHIFT,String)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ON_TIME,String)
            End If
            If (IMPORT_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(IMPORT_CODE,String)
            End If
            If (Y_CHASSIS_FLAG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Y_CHASSIS_FLAG,String)
            End If
            If (GA_SHOP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(GA_SHOP,String)
            End If
            If (BODY_SHOP_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(BODY_SHOP_CODE,String)
            End If
            If (HANDLE_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(HANDLE_TYPE,String)
            End If
            If (BODY_COLOR_TC_SW Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(BODY_COLOR_TC_SW,String)
            End If
            If (BODY_COLOR_SEQ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(BODY_COLOR_SEQ,String)
            End If
            If (BODY_COLOR_OPT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(BODY_COLOR_OPT,String)
            End If
            If (BODY_COLOR_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(BODY_COLOR_NAME,String)
            End If
            If (SURFACE_COLOR_SF_SW Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SURFACE_COLOR_SF_SW,String)
            End If
            If (SURFACE_COLOR_XXX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SURFACE_COLOR_XXX,String)
            End If
            If (SURFACE_COLOR_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SURFACE_COLOR_NAME,String)
            End If
            If (FILE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(FILE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SEQ_NO As String,  _
                    ByVal MODEL_YEAR As String,  _
                    ByVal SUFFIX_CODE As String,  _
                    ByVal LOT_ID As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT As String,  _
                    ByVal BLOCK_MODEL As String,  _
                    ByVal BLOCK_SEQ As String,  _
                    ByVal MARK As String,  _
                    ByVal PRODUCTION_DATE As String,  _
                    ByVal SHIFT As String,  _
                    ByVal ON_TIME As String,  _
                    ByVal IMPORT_CODE As String,  _
                    ByVal Y_CHASSIS_FLAG As String,  _
                    ByVal GA_SHOP As String,  _
                    ByVal BODY_SHOP_CODE As String,  _
                    ByVal HANDLE_TYPE As String,  _
                    ByVal BODY_COLOR_TC_SW As String,  _
                    ByVal BODY_COLOR_SEQ As String,  _
                    ByVal BODY_COLOR_OPT As String,  _
                    ByVal BODY_COLOR_NAME As String,  _
                    ByVal SURFACE_COLOR_SF_SW As String,  _
                    ByVal SURFACE_COLOR_XXX As String,  _
                    ByVal SURFACE_COLOR_NAME As String,  _
                    ByVal FILE_NAME As String,  _
                    ByVal Original_SEQ_NO As String,  _
                    ByVal Original_MODEL_YEAR As String,  _
                    ByVal Original_SUFFIX_CODE As String,  _
                    ByVal Original_LOT_ID As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT As String,  _
                    ByVal Original_BLOCK_MODEL As String,  _
                    ByVal Original_BLOCK_SEQ As String,  _
                    ByVal Original_MARK As String,  _
                    ByVal Original_PRODUCTION_DATE As String,  _
                    ByVal Original_SHIFT As String,  _
                    ByVal Original_ON_TIME As String,  _
                    ByVal Original_IMPORT_CODE As String,  _
                    ByVal Original_Y_CHASSIS_FLAG As String,  _
                    ByVal Original_GA_SHOP As String,  _
                    ByVal Original_BODY_SHOP_CODE As String,  _
                    ByVal Original_HANDLE_TYPE As String,  _
                    ByVal Original_BODY_COLOR_TC_SW As String,  _
                    ByVal Original_BODY_COLOR_SEQ As String,  _
                    ByVal Original_BODY_COLOR_OPT As String,  _
                    ByVal Original_BODY_COLOR_NAME As String,  _
                    ByVal Original_SURFACE_COLOR_SF_SW As String,  _
                    ByVal Original_SURFACE_COLOR_XXX As String,  _
                    ByVal Original_SURFACE_COLOR_NAME As String,  _
                    ByVal Original_FILE_NAME As String) As Integer
            If (SEQ_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SEQ_NO,String)
            End If
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LOT_ID,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(UNIT,String)
            End If
            If (BLOCK_MODEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(BLOCK_MODEL,String)
            End If
            If (BLOCK_SEQ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BLOCK_SEQ,String)
            End If
            If (MARK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MARK,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PRODUCTION_DATE,String)
            End If
            If (SHIFT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SHIFT,String)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ON_TIME,String)
            End If
            If (IMPORT_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IMPORT_CODE,String)
            End If
            If (Y_CHASSIS_FLAG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Y_CHASSIS_FLAG,String)
            End If
            If (GA_SHOP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(GA_SHOP,String)
            End If
            If (BODY_SHOP_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(BODY_SHOP_CODE,String)
            End If
            If (HANDLE_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(HANDLE_TYPE,String)
            End If
            If (BODY_COLOR_TC_SW Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(BODY_COLOR_TC_SW,String)
            End If
            If (BODY_COLOR_SEQ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(BODY_COLOR_SEQ,String)
            End If
            If (BODY_COLOR_OPT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(BODY_COLOR_OPT,String)
            End If
            If (BODY_COLOR_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(BODY_COLOR_NAME,String)
            End If
            If (SURFACE_COLOR_SF_SW Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SURFACE_COLOR_SF_SW,String)
            End If
            If (SURFACE_COLOR_XXX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SURFACE_COLOR_XXX,String)
            End If
            If (SURFACE_COLOR_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SURFACE_COLOR_NAME,String)
            End If
            If (FILE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(FILE_NAME,String)
            End If
            If (Original_SEQ_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SEQ_NO,String)
            End If
            If (Original_MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_LOT_ID,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_UNIT,String)
            End If
            If (Original_BLOCK_MODEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_BLOCK_MODEL,String)
            End If
            If (Original_BLOCK_SEQ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_BLOCK_SEQ,String)
            End If
            If (Original_MARK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_MARK,String)
            End If
            If (Original_PRODUCTION_DATE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_PRODUCTION_DATE,String)
            End If
            If (Original_SHIFT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_SHIFT,String)
            End If
            If (Original_ON_TIME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_ON_TIME,String)
            End If
            If (Original_IMPORT_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_IMPORT_CODE,String)
            End If
            If (Original_Y_CHASSIS_FLAG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Y_CHASSIS_FLAG,String)
            End If
            If (Original_GA_SHOP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_GA_SHOP,String)
            End If
            If (Original_BODY_SHOP_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_BODY_SHOP_CODE,String)
            End If
            If (Original_HANDLE_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_HANDLE_TYPE,String)
            End If
            If (Original_BODY_COLOR_TC_SW Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_BODY_COLOR_TC_SW,String)
            End If
            If (Original_BODY_COLOR_SEQ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_BODY_COLOR_SEQ,String)
            End If
            If (Original_BODY_COLOR_OPT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_BODY_COLOR_OPT,String)
            End If
            If (Original_BODY_COLOR_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_BODY_COLOR_NAME,String)
            End If
            If (Original_SURFACE_COLOR_SF_SW Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_SURFACE_COLOR_SF_SW,String)
            End If
            If (Original_SURFACE_COLOR_XXX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_SURFACE_COLOR_XXX,String)
            End If
            If (Original_SURFACE_COLOR_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_SURFACE_COLOR_NAME,String)
            End If
            If (Original_FILE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_FILE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SEQ_NO As String,  _
                    ByVal LOT_ID As String,  _
                    ByVal BLOCK_MODEL As String,  _
                    ByVal BLOCK_SEQ As String,  _
                    ByVal MARK As String,  _
                    ByVal PRODUCTION_DATE As String,  _
                    ByVal SHIFT As String,  _
                    ByVal ON_TIME As String,  _
                    ByVal IMPORT_CODE As String,  _
                    ByVal Y_CHASSIS_FLAG As String,  _
                    ByVal GA_SHOP As String,  _
                    ByVal BODY_SHOP_CODE As String,  _
                    ByVal HANDLE_TYPE As String,  _
                    ByVal BODY_COLOR_TC_SW As String,  _
                    ByVal BODY_COLOR_SEQ As String,  _
                    ByVal BODY_COLOR_OPT As String,  _
                    ByVal BODY_COLOR_NAME As String,  _
                    ByVal SURFACE_COLOR_SF_SW As String,  _
                    ByVal SURFACE_COLOR_XXX As String,  _
                    ByVal SURFACE_COLOR_NAME As String,  _
                    ByVal FILE_NAME As String,  _
                    ByVal Original_SEQ_NO As String,  _
                    ByVal Original_MODEL_YEAR As String,  _
                    ByVal Original_SUFFIX_CODE As String,  _
                    ByVal Original_LOT_ID As String,  _
                    ByVal Original_LOT_NO As String,  _
                    ByVal Original_UNIT As String,  _
                    ByVal Original_BLOCK_MODEL As String,  _
                    ByVal Original_BLOCK_SEQ As String,  _
                    ByVal Original_MARK As String,  _
                    ByVal Original_PRODUCTION_DATE As String,  _
                    ByVal Original_SHIFT As String,  _
                    ByVal Original_ON_TIME As String,  _
                    ByVal Original_IMPORT_CODE As String,  _
                    ByVal Original_Y_CHASSIS_FLAG As String,  _
                    ByVal Original_GA_SHOP As String,  _
                    ByVal Original_BODY_SHOP_CODE As String,  _
                    ByVal Original_HANDLE_TYPE As String,  _
                    ByVal Original_BODY_COLOR_TC_SW As String,  _
                    ByVal Original_BODY_COLOR_SEQ As String,  _
                    ByVal Original_BODY_COLOR_OPT As String,  _
                    ByVal Original_BODY_COLOR_NAME As String,  _
                    ByVal Original_SURFACE_COLOR_SF_SW As String,  _
                    ByVal Original_SURFACE_COLOR_XXX As String,  _
                    ByVal Original_SURFACE_COLOR_NAME As String,  _
                    ByVal Original_FILE_NAME As String) As Integer
            Return Me.Update(SEQ_NO, Original_MODEL_YEAR, Original_SUFFIX_CODE, LOT_ID, Original_LOT_NO, Original_UNIT, BLOCK_MODEL, BLOCK_SEQ, MARK, PRODUCTION_DATE, SHIFT, ON_TIME, IMPORT_CODE, Y_CHASSIS_FLAG, GA_SHOP, BODY_SHOP_CODE, HANDLE_TYPE, BODY_COLOR_TC_SW, BODY_COLOR_SEQ, BODY_COLOR_OPT, BODY_COLOR_NAME, SURFACE_COLOR_SF_SW, SURFACE_COLOR_XXX, SURFACE_COLOR_NAME, FILE_NAME, Original_SEQ_NO, Original_MODEL_YEAR, Original_SUFFIX_CODE, Original_LOT_ID, Original_LOT_NO, Original_UNIT, Original_BLOCK_MODEL, Original_BLOCK_SEQ, Original_MARK, Original_PRODUCTION_DATE, Original_SHIFT, Original_ON_TIME, Original_IMPORT_CODE, Original_Y_CHASSIS_FLAG, Original_GA_SHOP, Original_BODY_SHOP_CODE, Original_HANDLE_TYPE, Original_BODY_COLOR_TC_SW, Original_BODY_COLOR_SEQ, Original_BODY_COLOR_OPT, Original_BODY_COLOR_NAME, Original_SURFACE_COLOR_SF_SW, Original_SURFACE_COLOR_XXX, Original_SURFACE_COLOR_NAME, Original_FILE_NAME)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ClosesProductionDate(ByVal production_date As Decimal) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(production_date,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteByPk(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                command.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                command.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                command.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                command.Parameters(3).Value = CType(unit,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteOldDataByDate(ByVal expDate As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (expDate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("expDate")
            Else
                command.Parameters(0).Value = CType(expDate,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetDataByOffsetBase(ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As String, ByVal ON_TIME As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(13)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                command.Parameters(0).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                command.Parameters(1).Value = CType(PRODUCTION_DATE,String)
            End If
            If (ON_TIME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(ON_TIME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taOPTION_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtOPTION_MST"
            tableMapping.ColumnMappings.Add("OPTION_ID", "OPTION_ID")
            tableMapping.ColumnMappings.Add("OPTION_NAME", "OPTION_NAME")
            tableMapping.ColumnMappings.Add("OPTION_SEQ", "OPTION_SEQ")
            tableMapping.ColumnMappings.Add("OPTION_CODE", "OPTION_CODE")
            tableMapping.ColumnMappings.Add("OPTION_DISPLAY", "OPTION_DISPLAY")
            tableMapping.ColumnMappings.Add("OPTION_TYPE", "OPTION_TYPE")
            tableMapping.ColumnMappings.Add("OPTION_SEQ_NAME", "OPTION_SEQ_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_OPTION_MST] WHERE (([OPTION_ID] = @Original_OPTION_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_OPTION_MST] ([OPTION_NAME], [OPTION_SEQ], [OPTION_CODE], [OPTION_D"& _ 
                "ISPLAY], [OPTION_TYPE]) VALUES (@OPTION_NAME, @OPTION_SEQ, @OPTION_CODE, @OPTION"& _ 
                "_DISPLAY, @OPTION_TYPE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT OPTION_ID, OPTION_NAME, OPTION_SEQ, OPTION_CODE"& _ 
                ", OPTION_DISPLAY, OPTION_TYPE, 'OPTION ' + CONVERT (varchar, CASE WHEN option_ty"& _ 
                "pe = 1 THEN 1 ELSE OPTION_SEQ END) AS OPTION_SEQ_NAME FROM T_OPTION_MST WHERE (O"& _ 
                "PTION_ID = SCOPE_IDENTITY()) ORDER BY OPTION_TYPE, OPTION_SEQ"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_DISPLAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_OPTION_MST] SET [OPTION_NAME] = @OPTION_NAME, [OPTION_SEQ] = @OPTION_SE"& _ 
                "Q, [OPTION_CODE] = @OPTION_CODE, [OPTION_DISPLAY] = @OPTION_DISPLAY, [OPTION_TYP"& _ 
                "E] = @OPTION_TYPE WHERE (([OPTION_ID] = @Original_OPTION_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT OPTION_ID"& _ 
                ", OPTION_NAME, OPTION_SEQ, OPTION_CODE, OPTION_DISPLAY, OPTION_TYPE, 'OPTION ' +"& _ 
                " CONVERT (varchar, CASE WHEN option_type = 1 THEN 1 ELSE OPTION_SEQ END) AS OPTI"& _ 
                "ON_SEQ_NAME FROM T_OPTION_MST WHERE (OPTION_ID = @OPTION_ID) ORDER BY OPTION_TYP"& _ 
                "E, OPTION_SEQ"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_DISPLAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     OPTION_ID, OPTION_NAME, OPTION_SEQ"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&", OPTION_CODE, OPTION_DISPLA"& _ 
                "Y, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"OPTION_TYPE, 'OPTION ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"case  when option"& _ 
                "_type = 1 then 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"else OPTION_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"end) AS OPTION_SEQ_NAME"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_OPTION_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OPTION_TYPE, OPTION_SEQ"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TOP (@block) 0 AS INDEX_NO, *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "            FROM          T_OPTION_MST AS opt_mst "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE"& _ 
                "      (OPTION_TYPE >= @option_type)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (option_type = @optio"& _ 
                "n_type)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (NOT (OPTION_SEQ < @option_seq))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OP"& _ 
                "TION_TYPE, OPTION_SEQ"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT TOP (1) OPTION_CODE, OPTION_DISPLAY, OPTION_ID, OPTION_NAME, OPTION_SEQ, O"& _ 
                "PTION_TYPE FROM T_OPTION_MST WHERE (OPTION_DISPLAY LIKE @option_display) ORDER B"& _ 
                "Y OPTION_TYPE, OPTION_SEQ"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_display", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     T_OPTION_MST.OPTION_ID, T_OPTION_MST.OPTION_NAME, T_OPTION_MST.OPTION_"& _ 
                "SEQ, T_OPTION_MST.OPTION_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_MST.OPTION_DISPL"& _ 
                "AY, T_OPTION_MST.OPTION_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_OPTION_MST INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          T_MODEL_OPTION_CELL ON T_OPTION_MST.OPTION_ID = T_MODEL_OPTION_CELL.OP"& _ 
                "TION_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_MODEL_OPTION_ROW ON T_MODEL_OPTION_C"& _ 
                "ELL.MODEL_OPTION_ROW_ID = T_MODEL_OPTION_ROW.MODEL_OPTION_ROW_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (dbo"& _ 
                ".fnc_compare_model_pattern(@modelYear, @suffixCode, T_MODEL_OPTION_ROW.MODEL_YEA"& _ 
                "R_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_MODEL_OPTION_ROW.SUFFIX_CODE_PATTERN) = 1) "& _ 
                "AND (T_MODEL_OPTION_CELL.IS_USED = 'TRUE') AND (T_OPTION_MST.OPTION_TYPE = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"U"& _ 
                "NION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT     T_OPTION_MST_1.OPTION_ID, T_OPTION_MST_1.OPTION_NAME, T_OPTION_"& _ 
                "MST_1.OPTION_SEQ, T_OPTION_MST_1.OPTION_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_M"& _ 
                "ST_1.OPTION_DISPLAY, T_OPTION_MST_1.OPTION_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_OPTION_MST AS T_"& _ 
                "OPTION_MST_1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_MODEL_OPTION_CELL AS T_MODEL_OP"& _ 
                "TION_CELL_1 ON T_OPTION_MST_1.OPTION_ID = T_MODEL_OPTION_CELL_1.OPTION_ID INNER "& _ 
                "JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_MODEL_OPTION_ROW AS T_MODEL_OPTION_ROW_1 ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  T_MODEL_OPTION_CELL_1.MODEL_OPTION_ROW_ID = T_MODEL_OPTION_ROW"& _ 
                "_1.MODEL_OPTION_ROW_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_PROCESS_OPTION_CELL A"& _ 
                "S T_PROCESS_OPTION_CELL_1 ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_MST_1.OPTION_ID = "& _ 
                "T_PROCESS_OPTION_CELL_1.OPTION_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_PROCESS_MS"& _ 
                "T AS T_PROCESS_MST_1 ON T_PROCESS_OPTION_CELL_1.PROCESS_NO = T_PROCESS_MST_1.PRO"& _ 
                "CESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (T_PROCESS_OPTION_CELL_1.IS_USED = 'TRUE') AND (T_PROCESS_MST"& _ 
                "_1.PROCESS_NO = @processNo) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (dbo.fnc_compare_model_p"& _ 
                "attern(@modelYear, @suffixCode, T_MODEL_OPTION_ROW_1.MODEL_YEAR_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 T_MODEL_OPTION_ROW_1.SUFFIX_CODE_PATTERN) = 1) AND (T_MODEL_OPT"& _ 
                "ION_CELL_1.IS_USED = 'TRUE')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY T_OPTION_MST.OPTION_TYPE, T_OPTION_MST.OP"& _ 
                "TION_SEQ"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@processNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT OPTION_CODE, OPTION_DISPLAY, OPTION_ID, OPTION_NAME, OPTION_SEQ, 'OPTION '"& _ 
                " + CONVERT (varchar, CASE WHEN option_type = 1 THEN 1 ELSE OPTION_SEQ END) AS OP"& _ 
                "TION_SEQ_NAME, OPTION_TYPE FROM T_OPTION_MST WHERE (OPTION_TYPE = @TYPE) ORDER B"& _ 
                "Y OPTION_TYPE, OPTION_SEQ"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "select TOP (@block) 0 AS INDEX_NO, sc.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(SELECT *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM T_OPTION_MST  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE      (OPTION_TYPE <= @option_type) ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (NOT (OPTION_TYPE = @op"& _ 
                "tion_type)) OR (NOT (option_seq > @option_seq))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OPTION_TYPE DESC, opti"& _ 
                "on_seq DESC"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT     COUNT(*) AS OffestBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     OPTION_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   FR"& _ 
                "OM          (SELECT     OPTION_TYPE,OPTION_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   FROM          T_OPTI"& _ 
                "ON_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   WHERE      (OPTION_TYPE <= @option_type)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   WHERE"& _ 
                "      (NOT (OPTION_TYPE = @option_type)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  (NOT (OPTION_SEQ > @opti"& _ 
                "on_seq))) AS derivedtbl_1"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     ISNULL(MAX(OPTION_SEQ), 0) + 1 AS MAX_OPTION_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_OPTIO"& _ 
                "N_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (OPTION_TYPE = @option_type)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtOPTION_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtOPTION_MSTDataTable = New dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsPAINT.dtOPTION_MSTDataTable, ByVal block As Integer, ByVal option_type As Integer, ByVal option_seq As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(option_seq,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal block As Integer, ByVal option_type As Integer, ByVal option_seq As Integer) As dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(option_seq,Integer)
            Dim dataTable As dsPAINT.dtOPTION_MSTDataTable = New dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptDisp(ByVal dataTable As dsPAINT.dtOPTION_MSTDataTable, ByVal option_display As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (option_display Is Nothing) Then
                Throw New Global.System.ArgumentNullException("option_display")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(option_display,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptDisp(ByVal option_display As String) As dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (option_display Is Nothing) Then
                Throw New Global.System.ArgumentNullException("option_display")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(option_display,String)
            End If
            Dim dataTable As dsPAINT.dtOPTION_MSTDataTable = New dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptionOfModelAndProcess(ByVal dataTable As dsPAINT.dtOPTION_MSTDataTable, ByVal modelYear As String, ByVal suffixCode As String, ByVal processNo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(processNo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptionOfModelAndProcess(ByVal modelYear As String, ByVal suffixCode As String, ByVal processNo As Integer) As dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(processNo,Integer)
            Dim dataTable As dsPAINT.dtOPTION_MSTDataTable = New dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptType(ByVal dataTable As dsPAINT.dtOPTION_MSTDataTable, ByVal TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptType(ByVal TYPE As Integer) As dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            Dim dataTable As dsPAINT.dtOPTION_MSTDataTable = New dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsPAINT.dtOPTION_MSTDataTable, ByVal block As Integer, ByVal option_type As Integer, ByVal option_seq As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(option_seq,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal block As Integer, ByVal option_type As Integer, ByVal option_seq As Integer) As dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(option_seq,Integer)
            Dim dataTable As dsPAINT.dtOPTION_MSTDataTable = New dsPAINT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtOPTION_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtOPTION_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_OPTION_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_OPTION_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal OPTION_NAME As String, ByVal OPTION_SEQ As Integer, ByVal OPTION_CODE As String, ByVal OPTION_DISPLAY As String, ByVal OPTION_TYPE As Integer) As Integer
            If (OPTION_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OPTION_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(OPTION_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OPTION_SEQ,Integer)
            If (OPTION_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(OPTION_CODE,String)
            End If
            If (OPTION_DISPLAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OPTION_DISPLAY")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(OPTION_DISPLAY,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(OPTION_TYPE,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal OPTION_NAME As String, ByVal OPTION_SEQ As Integer, ByVal OPTION_CODE As String, ByVal OPTION_DISPLAY As String, ByVal OPTION_TYPE As Integer, ByVal Original_OPTION_ID As Integer, ByVal OPTION_ID As Integer) As Integer
            If (OPTION_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OPTION_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(OPTION_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OPTION_SEQ,Integer)
            If (OPTION_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OPTION_CODE,String)
            End If
            If (OPTION_DISPLAY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OPTION_DISPLAY")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(OPTION_DISPLAY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OPTION_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(OPTION_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal OPTION_NAME As String, ByVal OPTION_SEQ As Integer, ByVal OPTION_CODE As String, ByVal OPTION_DISPLAY As String, ByVal OPTION_TYPE As Integer, ByVal Original_OPTION_ID As Integer) As Integer
            Return Me.Update(OPTION_NAME, OPTION_SEQ, OPTION_CODE, OPTION_DISPLAY, OPTION_TYPE, Original_OPTION_ID, Original_OPTION_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetDataByOffsetBase(ByVal option_type As Integer, ByVal option_seq As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(option_type,Integer)
            command.Parameters(1).Value = CType(option_seq,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNextOptSeq(ByVal option_type As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            command.Parameters(0).Value = CType(option_type,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPAINT_CELL
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPAINT_CELL"
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("RESULT_DATE", "RESULT_DATE")
            tableMapping.ColumnMappings.Add("PROCESS_RESULT_DATE", "PROCESS_RESULT_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PAINT_CELL] WHERE (([MODEL_YEAR] = @Original_MODEL_YEAR) AND ([SUF"& _ 
                "FIX_CODE] = @Original_SUFFIX_CODE) AND ([LOT_NO] = @Original_LOT_NO) AND ([UNIT]"& _ 
                " = @Original_UNIT) AND ([PROCESS_NO] = @Original_PROCESS_NO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PAINT_CELL] ([MODEL_YEAR], [SUFFIX_CODE], [LOT_NO], [UNIT], [PROCE"& _ 
                "SS_NO], [PROCESS_RESULT_DATE]) VALUES (@MODEL_YEAR, @SUFFIX_CODE, @LOT_NO, @UNIT"& _ 
                ", @PROCESS_NO, @PROCESS_RESULT_DATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_YEAR, SUFFIX_CODE, LOT_NO, U"& _ 
                "NIT, PROCESS_NO, CONVERT (varchar, PROCESS_RESULT_DATE, 103) + ' ' + CONVERT (va"& _ 
                "rchar, PROCESS_RESULT_DATE, 108) AS RESULT_DATE, PROCESS_RESULT_DATE FROM T_PAIN"& _ 
                "T_CELL WHERE (LOT_NO = @LOT_NO) AND (MODEL_YEAR = @MODEL_YEAR) AND (PROCESS_NO ="& _ 
                " @PROCESS_NO) AND (SUFFIX_CODE = @SUFFIX_CODE) AND (UNIT = @UNIT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_RESULT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_RESULT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PAINT_CELL] SET [MODEL_YEAR] = @MODEL_YEAR, [SUFFIX_CODE] = @SUFFIX_COD"& _ 
                "E, [LOT_NO] = @LOT_NO, [UNIT] = @UNIT, [PROCESS_NO] = @PROCESS_NO, [PROCESS_RESU"& _ 
                "LT_DATE] = @PROCESS_RESULT_DATE WHERE (([MODEL_YEAR] = @Original_MODEL_YEAR) AND"& _ 
                " ([SUFFIX_CODE] = @Original_SUFFIX_CODE) AND ([LOT_NO] = @Original_LOT_NO) AND ("& _ 
                "[UNIT] = @Original_UNIT) AND ([PROCESS_NO] = @Original_PROCESS_NO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MOD"& _ 
                "EL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO, CONVERT (varchar, PROCESS_RESULT"& _ 
                "_DATE, 103) + ' ' + CONVERT (varchar, PROCESS_RESULT_DATE, 108) AS RESULT_DATE, "& _ 
                "PROCESS_RESULT_DATE FROM T_PAINT_CELL WHERE (LOT_NO = @LOT_NO) AND (MODEL_YEAR ="& _ 
                " @MODEL_YEAR) AND (PROCESS_NO = @PROCESS_NO) AND (SUFFIX_CODE = @SUFFIX_CODE) AN"& _ 
                "D (UNIT = @UNIT)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_RESULT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_RESULT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(10) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO, CONVERT(varchar, PR"& _ 
                "OCESS_RESULT_DATE, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PROCESS"& _ 
                "_RESULT_DATE, 108) AS RESULT_DATE, PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PAINT_CEL"& _ 
                "L"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT maxD.MODEL_YEAR, maxD.SUFFIX_CODE, maxD.LOT_NO, maxD.UNIT, maxD.PROCESS_NO"& _ 
                ", maxD.PROCESS_RESULT_DATE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            CONVERT(varchar, maxD.PROCESS_RESULT_DA"& _ 
                "TE, 103) + ' ' + CONVERT(varchar, maxD.PROCESS_RESULT_DATE, 108) AS RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM (SELECT pc.MODEL_YEAR, pc.SUFFIX_CODE, pc.LOT_NO, pc.UNIT, pc.PROCESS_NO, "& _ 
                "pc.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM T_PAINT_CELL pc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE pc.MODEL_YEAR = @modelYe"& _ 
                "ar"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND pc.SUFFIX_CODE = @suffixCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND pc.LOT_NO = @lotNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND pc.UN"& _ 
                "IT = @unit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND pc.PROCESS_RESULT_DATE = ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT MAX(pc_.PROCESS_RESULT"& _ 
                "_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM T_PAINT_CELL pc_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE pc_.MODEL_YEAR = pc.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND pc_.SUFFIX_CODE = pc.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND pc_.LOT_NO = pc.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AN"& _ 
                "D pc_.UNIT = pc.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&") as maxD JOIN "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT DISTINCT b.FROM_PROCE"& _ 
                "SS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PROCESS_MST AS a INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"T_PROCESS_LINKAGE AS b ON a.PROC"& _ 
                "ESS_NO = b.TO_PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"(a.PROCESS_NO = @currentProcessNo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&") as prev"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"ON maxD.PROCESS_NO = prev.FROM_PROCESS_NO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currentProcessNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "select"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"prod.MODEL_YEAR, prod.SUFFIX_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"prod.LOT_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"prod.UNIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"paint.PROCESS_NO,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            CONVERT(varchar, paint.PROCESS_RESULT_DATE, 103)"& _ 
                " + ' ' + CONVERT(varchar, paint.PROCESS_RESULT_DATE, 108) AS RESULT_DATE,  paint"& _ 
                ".PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"T_PRODUCTION_DAT prod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PAINT_CELL paint"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"paint.MODEL_YEAR = prod.MODEL_YEAR and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"paint.SUFFIX_CODE = prod.SUFFI"& _ 
                "X_CODE and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"paint.LOT_NO = prod.LOT_NO and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"paint.UNIT = prod.UNIT"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT LOT_NO, MODEL_YEAR, PROCESS_NO, PROCESS_RESULT_DATE, SUFFIX_CODE, UNIT FRO"& _ 
                "M T_PAINT_CELL WHERE (MODEL_YEAR = @modelYear) AND (SUFFIX_CODE = @suffixCode) A"& _ 
                "ND (LOT_NO = @lotNo) AND (UNIT = @unit) AND (PROCESS_NO = @processNo)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@processNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO, CONVERT(varchar, PR"& _ 
                "OCESS_RESULT_DATE, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PROCESS"& _ 
                "_RESULT_DATE, 108) AS RESULT_DATE, PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PAINT_CEL"& _ 
                "L"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE MODEL_YEAR = @MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND SUFFIX_CODE = @SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND L"& _ 
                "OT_NO = @LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND UNIT= @UNIT"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"prod.LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&", resultOfWbs.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&", resultOfWbs.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&","& _ 
                " resultOfWbs.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&", resultOfWbs.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&", resultOfWbs.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&", MIN(r"& _ 
                "esultOfWbs.PROCESS_RESULT_DATE) AS PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM "&Global.Microsoft.VisualBasic.ChrW(9)&"(SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"cell.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PAINT_CELL as cell"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_PROCESS_MST AS process"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON cell."& _ 
                "PROCESS_NO = process.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"process.PROCESS_TYPE = 1)AS resultOfWbs"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"cell.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PAINT_CELL AS cell"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"IN"& _ 
                "NER JOIN T_PROCESS_MST AS process"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON cell.PROCESS_NO = process.PROCESS_N"& _ 
                "O"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"process.PROCESS_TYPE > 1)AS resultOfAfterWbs"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON resultOfWbs.MOD"& _ 
                "EL_YEAR = resultOfAfterWbs.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND resultOfWbs.SUFFIX_CODE = resultO"& _ 
                "fAfterWbs.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND resultOfWbs.LOT_NO = resultOfAfterWbs.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"AND resultOfWbs.UNIT = resultOfAfterWbs.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_PRODUCTION_DAT AS "& _ 
                "prod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON prod.MODEL_YEAR = resultOfWbs.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.SUFFIX_CODE = "& _ 
                "resultOfWbs.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.LOT_NO = resultOfWbs.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.UN"& _ 
                "IT = resultOfWbs.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"resultOfAfterWbs.PROCESS_NO is NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY prod."& _ 
                "LANE_NO, resultOfWbs.MODEL_YEAR, resultOfWbs.SUFFIX_CODE, resultOfWbs.LOT_NO, re"& _ 
                "sultOfWbs.UNIT, resultOfWbs.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY prod.LANE_NO"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"COUNT(PROCESS_RESULT_DATE) As processResult"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PAINT_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"MODE"& _ 
                "L_YEAR = @modelYear"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                AND SUFFIX_CODE = @suffixCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "    AND LOT_NO = @lotNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                AND UNIT = @unit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                AND P"& _ 
                "ROCESS_NO = @processNo"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@processNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"COUNT(cell.PROCESS_RESULT_DATE) As resultDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PRODUCTION_DAT AS pr"& _ 
                "od"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_PAINT_CELL AS cell"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON prod.MODEL_YEAR = cell.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.SUFFIX_CODE = cell.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.LOT_NO = cell.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND"& _ 
                " prod.UNIT = cell.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN (SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"Distinct b.FROM_PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"FR"& _ 
                "OM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PROCESS_MST AS a"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_PROCESS_LINKAGE AS b"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON a.PRO"& _ 
                "CESS_NO = b.TO_PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"a.PROCESS_TYPE = @processType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND "& _ 
                "a.ENTRANCE_FLAG = @entranceFlag) As previous"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON cell.PROCESS_NO = previous.FR"& _ 
                "OM_PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"prod.MODEL_YEAR = @modelYear"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.SUFFIX_CODE = @suf"& _ 
                "fixCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.LOT_NO = @lotNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.UNIT = @unit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.BLOCK_M"& _ 
                "ODEL = @blockModel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.BLOCK_SEQ = @blockSeq"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@blockModel", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@blockSeq", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@processType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entranceFlag", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"COUNT(paintCell.PROCESS_RESULT_DATE) As countResultDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PRODUCTION"& _ 
                "_DAT AS prod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_PAINT_CELL AS paintCell"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON prod.MODEL_YEAR = pai"& _ 
                "ntCell.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.SUFFIX_CODE = paintCell.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.LO"& _ 
                "T_NO = paintCell.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.UNIT = paintCell.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_PROCES"& _ 
                "S_MST AS procMst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON paintCell.PROCESS_NO = procMst.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE procMst."& _ 
                "PROCESS_TYPE = @processType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND ENTRANCE_FLAG = @entranceFlag"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.MODEL_Y"& _ 
                "EAR = @modelYear"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.SUFFIX_CODE = @suffixCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.LOT_NO = @lotNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "AND prod.UNIT = @unit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.BLOCK_MODEL = @block"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.BLOCK_SEQ = @bloc"& _ 
                "kSeq"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@processType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entranceFlag", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@blockSeq", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&"COUNT(paintCell.PROCESS_RESULT_DATE) As countResultDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PRODUCTION"& _ 
                "_DAT AS prod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_PAINT_CELL AS paintCell"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON prod.MODEL_YEAR = pai"& _ 
                "ntCell.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.SUFFIX_CODE = paintCell.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.LO"& _ 
                "T_NO = paintCell.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"AND prod.UNIT = paintCell.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN T_PROCES"& _ 
                "S_MST AS procMst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"ON paintCell.PROCESS_NO = procMst.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE paintCel"& _ 
                "l.PROCESS_NO IN (SELECT PROCESS_NO FROM T_PROCESS_MST WHERE PROCESS_TYPE >= @fro"& _ 
                "mProcess AND PROCESS_TYPE <= @toProcess)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.MODEL_YEAR =@modelYear"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND p"& _ 
                "rod.SUFFIX_CODE = @suffixCode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.LOT_NO = @lotNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.UNIT = @unit"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "AND prod.BLOCK_MODEL = @blockModel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND prod.BLOCK_SEQ = @blockSeq"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@blockModel", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@blockSeq", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromProcess", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@toProcess", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT     COUNT(cell.PROCESS_RESULT_DATE) AS resultDate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PRODUCTI"& _ 
                "ON_DAT AS prod INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_PAINT_CELL AS cell ON prod.MO"& _ 
                "DEL_YEAR = cell.MODEL_YEAR AND prod.SUFFIX_CODE = cell.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               prod.LOT_NO = cell.LOT_NO AND prod.UNIT = cell.UNIT INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                         (SELECT DISTINCT b.FROM_PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "         FROM          T_PROCESS_MST AS a INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          "& _ 
                "                         T_PROCESS_LINKAGE AS b ON a.PROCESS_NO = b.TO_PROCESS_N"& _ 
                "O"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            WHERE      (a.PROCESS_NO = @currentProcessNo)) AS"& _ 
                " previous ON cell.PROCESS_NO = previous.FROM_PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (prod.MODEL_Y"& _ 
                "EAR = @modelYear) AND (prod.SUFFIX_CODE = @suffixCode) AND (prod.LOT_NO = @lotNo"& _ 
                ") AND (prod.UNIT = @unit)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelYear", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@suffixCode", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNo", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currentProcessNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPAINT_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPAINT_CELLDataTable = New dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLastResultAndCheckWithPreviousProcess(ByVal dataTable As dsPAINT.dtPAINT_CELLDataTable, ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal currentProcessNo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(currentProcessNo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLastResultAndCheckWithPreviousProcess(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal currentProcessNo As Integer) As dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(currentProcessNo,Integer)
            Dim dataTable As dsPAINT.dtPAINT_CELLDataTable = New dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModelLotUnit(ByVal dataTable As dsPAINT.dtPAINT_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModelLotUnit() As dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As dsPAINT.dtPAINT_CELLDataTable = New dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPK(ByVal dataTable As dsPAINT.dtPAINT_CELLDataTable, ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal processNo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(processNo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPK(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal processNo As Integer) As dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(unit,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(processNo,Integer)
            Dim dataTable As dsPAINT.dtPAINT_CELLDataTable = New dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProdDat(ByVal dataTable As dsPAINT.dtPAINT_CELLDataTable, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProdDat(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Dim dataTable As dsPAINT.dtPAINT_CELLDataTable = New dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillMinWBSResultDateOfEachLane(ByVal dataTable As dsPAINT.dtPAINT_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetMinWBSResultDateOfEachLane() As dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Dim dataTable As dsPAINT.dtPAINT_CELLDataTable = New dsPAINT.dtPAINT_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtPAINT_CELLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPAINT_CELL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String, ByVal Original_PROCESS_NO As Integer) As Integer
            If (Original_MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_UNIT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal PROCESS_NO As Integer, ByVal PROCESS_RESULT_DATE As Date) As Integer
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PROCESS_RESULT_DATE,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal PROCESS_NO As Integer, ByVal PROCESS_RESULT_DATE As Date, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String, ByVal Original_PROCESS_NO As Integer) As Integer
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PROCESS_RESULT_DATE,Date)
            If (Original_MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_RESULT_DATE As Date, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String, ByVal Original_PROCESS_NO As Integer) As Integer
            Return Me.Update(Original_MODEL_YEAR, Original_SUFFIX_CODE, Original_LOT_NO, Original_UNIT, Original_PROCESS_NO, PROCESS_RESULT_DATE, Original_MODEL_YEAR, Original_SUFFIX_CODE, Original_LOT_NO, Original_UNIT, Original_PROCESS_NO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCountByPK(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal processNo As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                command.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                command.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                command.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                command.Parameters(3).Value = CType(unit,String)
            End If
            command.Parameters(4).Value = CType(processNo,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCountPreviousProcessResultDateOfModelAndBlockByProcessType(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal blockModel As String, ByVal blockSeq As String, ByVal processType As Integer, ByVal entranceFlag As Boolean) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                command.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                command.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                command.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                command.Parameters(3).Value = CType(unit,String)
            End If
            If (blockModel Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(blockModel,String)
            End If
            If (blockSeq Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(blockSeq,String)
            End If
            command.Parameters(6).Value = CType(processType,Integer)
            command.Parameters(7).Value = CType(entranceFlag,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCountProcessResultDateByProcessTypeModelAndBlock(ByVal processType As Integer, ByVal entranceFlag As Boolean, ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal block As String, ByVal blockSeq As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            command.Parameters(0).Value = CType(processType,Integer)
            command.Parameters(1).Value = CType(entranceFlag,Boolean)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                command.Parameters(2).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                command.Parameters(3).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                command.Parameters(4).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                command.Parameters(5).Value = CType(unit,String)
            End If
            If (block Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(block,String)
            End If
            If (blockSeq Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(blockSeq,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCountProcessResultDateByRangeOfProcessTypeModelAndBlock(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal blockModel As String, ByVal blockSeq As String, ByVal fromProcess As Integer, ByVal toProcess As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(9)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                command.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                command.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                command.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                command.Parameters(3).Value = CType(unit,String)
            End If
            If (blockModel Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(blockModel,String)
            End If
            If (blockSeq Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(blockSeq,String)
            End If
            command.Parameters(6).Value = CType(fromProcess,Integer)
            command.Parameters(7).Value = CType(toProcess,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetPreviousProcessResultCountByProcessNo(ByVal modelYear As String, ByVal suffixCode As String, ByVal lotNo As String, ByVal unit As String, ByVal currentProcessNo As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(10)
            If (modelYear Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelYear")
            Else
                command.Parameters(0).Value = CType(modelYear,String)
            End If
            If (suffixCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("suffixCode")
            Else
                command.Parameters(1).Value = CType(suffixCode,String)
            End If
            If (lotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lotNo")
            Else
                command.Parameters(2).Value = CType(lotNo,String)
            End If
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                command.Parameters(3).Value = CType(unit,String)
            End If
            command.Parameters(4).Value = CType(currentProcessNo,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPAINT_PROGRESS
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPAINT_PROGRESS"
            tableMapping.ColumnMappings.Add("PRODUCTION_DATE", "PRODUCTION_DATE")
            tableMapping.ColumnMappings.Add("ON_TIME", "ON_TIME")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("LOT_ID", "LOT_ID")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("BLOCK_MODEL", "BLOCK_MODEL")
            tableMapping.ColumnMappings.Add("BLOCK_SEQ", "BLOCK_SEQ")
            tableMapping.ColumnMappings.Add("IMPORT_CODE", "IMPORT_CODE")
            tableMapping.ColumnMappings.Add("GA_SHOP", "GA_SHOP")
            tableMapping.ColumnMappings.Add("PROCESS_RESULT_DATE", "PROCESS_RESULT_DATE")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.psis_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        prod.PRODUCTION_DATE, prod.ON_TIME, prod.LOT_ID, prod.MODEL_YEAR + "& _ 
                "prod.SUFFIX_CODE as MODEL_CODE, prod.LOT_NO, prod.UNIT, prod.BLOCK_MODEL, prod.B"& _ 
                "LOCK_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.PROCESS_RESULT_DATE, prod.IMPORT_CODE, "& _ 
                "prod.GA_SHOP, skit.SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            T_PAINT_CELL AS pc1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                         (SELECT        MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, M"& _ 
                "AX(PROCESS_RESULT_DATE) AS PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               F"& _ 
                "ROM            T_PAINT_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               GROUP BY MODEL_YEAR,"& _ 
                " SUFFIX_CODE, LOT_NO, UNIT) AS pc2 ON pc1.MODEL_YEAR = pc2.MODEL_YEAR AND pc1.SU"& _ 
                "FFIX_CODE = pc2.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.LOT_NO = pc2.LOT_"& _ 
                "NO AND pc1.UNIT = pc2.UNIT AND pc1.PROCESS_RESULT_DATE = pc2.PROCESS_RESULT_DATE"& _ 
                " AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.PROCESS_RESULT_DATE = pc2.PROCESS_RESULT_DAT"& _ 
                "E INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         T_PRODUCTION_DAT AS prod ON pc1.MODEL_YEA"& _ 
                "R = prod.MODEL_YEAR AND pc1.SUFFIX_CODE = prod.SUFFIX_CODE AND pc1.LOT_NO = prod"& _ 
                ".LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.UNIT = prod.UNIT LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                      T_SKIT_MST AS skit ON pc1.MODEL_YEAR = skit.MODEL_YEAR AND"& _ 
                " pc1.SUFFIX_CODE = skit.SUFFIX_CODE AND pc1.LOT_NO = skit.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                pc1.UNIT = skit.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (pc1.PROCESS_NO = @proc_no) A"& _ 
                "ND (skit.SKIT_NO IS NOT NULL)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY prod.PRODUCTION_DATE, prod.ON_TIME, pc1."& _ 
                "MODEL_YEAR, pc1.SUFFIX_CODE, pc1.LOT_NO, pc1.UNIT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@proc_no", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.Common.My.MySettings.Default.ConnectionString)
            Me._commandCollection(1).CommandText = "SELECT        prod.PRODUCTION_DATE, prod.ON_TIME, prod.LOT_ID, prod.MODEL_YEAR+ p"& _ 
                "rod.SUFFIX_CODE as MODEL_CODE, prod.LOT_NO, prod.UNIT, prod.BLOCK_MODEL, prod.BL"& _ 
                "OCK_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.PROCESS_RESULT_DATE, prod.IMPORT_CODE, p"& _ 
                "rod.GA_SHOP, skit.SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            T_PAINT_CELL AS pc1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                        (SELECT        MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, MA"& _ 
                "X(PROCESS_RESULT_DATE) AS PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               FR"& _ 
                "OM            T_PAINT_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               GROUP BY MODEL_YEAR, "& _ 
                "SUFFIX_CODE, LOT_NO, UNIT) AS pc2 ON pc1.MODEL_YEAR = pc2.MODEL_YEAR AND pc1.SUF"& _ 
                "FIX_CODE = pc2.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.LOT_NO = pc2.LOT_N"& _ 
                "O AND pc1.UNIT = pc2.UNIT AND pc1.PROCESS_RESULT_DATE = pc2.PROCESS_RESULT_DATE "& _ 
                "AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.PROCESS_RESULT_DATE = pc2.PROCESS_RESULT_DATE"& _ 
                " INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         T_PROCESS_MST AS prc ON pc1.PROCESS_NO = p"& _ 
                "rc.PROCESS_NO INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         T_PRODUCTION_DAT AS prod ON p"& _ 
                "c1.MODEL_YEAR = prod.MODEL_YEAR AND pc1.SUFFIX_CODE = prod.SUFFIX_CODE AND pc1.L"& _ 
                "OT_NO = prod.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.UNIT = prod.UNIT LEFT OUT"& _ 
                "ER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         T_SKIT_MST AS skit ON pc1.MODEL_YEAR = skit.MO"& _ 
                "DEL_YEAR AND pc1.SUFFIX_CODE = skit.SUFFIX_CODE AND pc1.LOT_NO = skit.LOT_NO AND"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         pc1.UNIT = skit.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (prc.PROCESS_GROU"& _ 
                "P_ID = @proc_grp_id) AND (skit.SKIT_NO IS NOT NULL)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY prod.PRODUCTION_DA"& _ 
                "TE, prod.ON_TIME, pc1.MODEL_YEAR, pc1.SUFFIX_CODE, pc1.LOT_NO, pc1.UNIT"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@proc_grp_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPAINT_PROGRESSDataTable, ByVal proc_no As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_no,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal proc_no As Integer) As dsPAINT.dtPAINT_PROGRESSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_no,Integer)
            Dim dataTable As dsPAINT.dtPAINT_PROGRESSDataTable = New dsPAINT.dtPAINT_PROGRESSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByGroupID(ByVal dataTable As dsPAINT.dtPAINT_PROGRESSDataTable, ByVal proc_grp_id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_grp_id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByGroupID(ByVal proc_grp_id As Integer) As dsPAINT.dtPAINT_PROGRESSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_grp_id,Integer)
            Dim dataTable As dsPAINT.dtPAINT_PROGRESSDataTable = New dsPAINT.dtPAINT_PROGRESSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPAINT_SHOP
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPAINT_SHOP"
            tableMapping.ColumnMappings.Add("PRODUCTION_DATE", "PRODUCTION_DATE")
            tableMapping.ColumnMappings.Add("ON_TIME", "ON_TIME")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("LOT_ID", "LOT_ID")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("BLOCK_MODEL", "BLOCK_MODEL")
            tableMapping.ColumnMappings.Add("BLOCK_SEQ", "BLOCK_SEQ")
            tableMapping.ColumnMappings.Add("PROCESS_RESULT_DATE", "PROCESS_RESULT_DATE")
            tableMapping.ColumnMappings.Add("IMPORT_CODE", "IMPORT_CODE")
            tableMapping.ColumnMappings.Add("GA_SHOP", "GA_SHOP")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     prod.PRODUCTION_DATE, prod.ON_TIME, s.SKIT_NO, prod.LOT_ID, prod.MODEL"& _ 
                "_YEAR + prod.SUFFIX_CODE AS MODEL_CODE, prod.LOT_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      pro"& _ 
                "d.UNIT, prod.BLOCK_MODEL, prod.BLOCK_SEQ, CONVERT(varchar, t1.PROCESS_RESULT_DAT"& _ 
                "E, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      t1.PROCESS_RESULT_DATE,"& _ 
                " 108) AS PROCESS_RESULT_DATE, prod.IMPORT_CODE, prod.GA_SHOP"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PRO"& _ 
                "DUCTION_DAT AS prod INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          (SELECT     sub_t1.MOD"& _ 
                "EL_YEAR, sub_t1.SUFFIX_CODE, sub_t1.LOT_NO, sub_t1.UNIT, sub_t1.PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                                                 sub_t1.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                         FROM          (SELECT     pnt.MODEL_YEAR, pnt.SUFFIX_CO"& _ 
                "DE, pnt.LOT_NO, pnt.UNIT, pnt.PROCESS_NO, pnt.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                       FROM          T_PROCESS_MST AS procs_mst "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                    "& _ 
                "       T_PAINT_CELL AS pnt ON procs_mst.PROCESS_NO = pnt.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "                                         WHERE      (procs_mst.PROCESS_TYPE = 2)"& _ 
                " AND (pnt.PROCESS_RESULT_DATE IS NOT NULL) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               "& _ 
                "                                            (pnt.PROCESS_RESULT_DATE IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                                                                        (SELECT "& _ 
                "    MAX(PROCESS_RESULT_DATE) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                         "& _ 
                "                                        FROM          T_PAINT_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "                                                                     GROUP BY MO"& _ 
                "DEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT))) AS sub_t1 LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "                                         (SELECT     pnt.MODEL_YEAR, pnt.SUFFIX_"& _ 
                "CODE, pnt.LOT_NO, pnt.UNIT, pnt.PROCESS_NO, pnt.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "                                              FROM          T_PROCESS_MST AS pro"& _ 
                "cs_mst INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                             "& _ 
                "                   T_PAINT_CELL AS pnt ON procs_mst.PROCESS_NO = pnt.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                         WHERE      (procs_mst."& _ 
                "PROCESS_TYPE = 3) AND (pnt.PROCESS_RESULT_DATE IS NOT NULL)) AS sub_t2 ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                                               sub_t1.MODEL_YEAR = sub_t2.MODEL_"& _ 
                "YEAR AND sub_t1.SUFFIX_CODE = sub_t2.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "                          sub_t1.LOT_NO = sub_t2.LOT_NO AND sub_t1.UNIT = sub_t2"& _ 
                ".UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            WHERE      (sub_t2.MODEL_YEAR IS NULL) AND (s"& _ 
                "ub_t2.SUFFIX_CODE IS NULL) AND (sub_t2.LOT_NO IS NULL) AND (sub_t2.UNIT IS NULL)"& _ 
                ") "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AS t1 ON prod.MODEL_YEAR = t1.MODEL_YEAR AND prod.SUFF"& _ 
                "IX_CODE = t1.SUFFIX_CODE AND prod.LOT_NO = t1.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " prod.UNIT = t1.UNIT INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_SKIT_MST AS s ON prod.M"& _ 
                "ODEL_YEAR = s.MODEL_YEAR AND prod.SUFFIX_CODE = s.SUFFIX_CODE AND prod.LOT_NO = "& _ 
                "s.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      prod.UNIT = s.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY prod.PRODUCTIO"& _ 
                "N_DATE, prod.ON_TIME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPAINT_SHOPDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtPAINT_SHOPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPAINT_SHOPDataTable = New dsPAINT.dtPAINT_SHOPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPROCESS_OPTION_CELL
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPROCESS_OPTION_CELL"
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("OPTION_ID", "OPTION_ID")
            tableMapping.ColumnMappings.Add("IS_USED", "IS_USED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PROCESS_OPTION_CELL] WHERE (([PROCESS_NO] = @Original_PROCESS_NO) "& _ 
                "AND ([OPTION_ID] = @Original_OPTION_ID) AND ([IS_USED] = @Original_IS_USED))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PROCESS_OPTION_CELL] ([PROCESS_NO], [OPTION_ID], [IS_USED]) VALUES"& _ 
                " (@PROCESS_NO, @OPTION_ID, @IS_USED);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROCESS_NO, OPTION_ID, IS_USED FRO"& _ 
                "M T_PROCESS_OPTION_CELL WHERE (OPTION_ID = @OPTION_ID) AND (PROCESS_NO = @PROCES"& _ 
                "S_NO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PROCESS_OPTION_CELL] SET [PROCESS_NO] = @PROCESS_NO, [OPTION_ID] = @OPT"& _ 
                "ION_ID, [IS_USED] = @IS_USED WHERE (([PROCESS_NO] = @Original_PROCESS_NO) AND (["& _ 
                "OPTION_ID] = @Original_OPTION_ID) AND ([IS_USED] = @Original_IS_USED));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "PROCESS_NO, OPTION_ID, IS_USED FROM T_PROCESS_OPTION_CELL WHERE (OPTION_ID = @OP"& _ 
                "TION_ID) AND (PROCESS_NO = @PROCESS_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     T_PROCESS_OPTION_CELL.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_OPTION_CELL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     cell.IS_USED, cell.PROCESS_NO, cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_"& _ 
                "OPTION_CELL AS cell INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_MST AS mst ON mst"& _ 
                ".OPTION_ID = cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (mst.OPTION_TYPE = @TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY mst.O"& _ 
                "PTION_SEQ"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "Insert into T_PROCESS_OPTION_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(PROCESS_NO,OPTION_ID,IS_USED)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"select sub_q"& _ 
                "2.PROCESS_NO,sub_q1.OPTION_ID,'FALSE' as IS_USED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(select opt_mst.OPTION_"& _ 
                "ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"from T_OPTION_MST opt_mst left join T_PROCESS_OPTION_CELL proc_opt_cel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"on"& _ 
                " opt_mst.OPTION_ID = proc_opt_cel.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"where proc_opt_cel.OPTION_ID is nu"& _ 
                "ll and opt_mst.OPTION_TYPE = 2) as sub_q1,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(select PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"from T_PROCESS"& _ 
                "_MST) as sub_q2"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPROCESS_OPTION_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtPROCESS_OPTION_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPROCESS_OPTION_CELLDataTable = New dsPAINT.dtPROCESS_OPTION_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptSeq(ByVal dataTable As dsPAINT.dtPROCESS_OPTION_CELLDataTable, ByVal TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptSeq(ByVal TYPE As Integer) As dsPAINT.dtPROCESS_OPTION_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            Dim dataTable As dsPAINT.dtPROCESS_OPTION_CELLDataTable = New dsPAINT.dtPROCESS_OPTION_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtPROCESS_OPTION_CELLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPROCESS_OPTION_CELL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROCESS_NO As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROCESS_NO As Integer, ByVal OPTION_ID As Integer, ByVal IS_USED As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OPTION_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_NO As Integer, ByVal OPTION_ID As Integer, ByVal IS_USED As Boolean, ByVal Original_PROCESS_NO As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IS_USED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IS_USED As Boolean, ByVal Original_PROCESS_NO As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Return Me.Update(Original_PROCESS_NO, Original_OPTION_ID, IS_USED, Original_PROCESS_NO, Original_OPTION_ID, Original_IS_USED)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewWhenInsertNewOpt() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPROCESS_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPROCESS_MST"
            tableMapping.ColumnMappings.Add("PROCESS_NAME", "PROCESS_NAME")
            tableMapping.ColumnMappings.Add("PROCESS_TIME", "PROCESS_TIME")
            tableMapping.ColumnMappings.Add("PROCESS_TYPE", "PROCESS_TYPE")
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("ENTRANCE_FLAG", "ENTRANCE_FLAG")
            tableMapping.ColumnMappings.Add("UPPER_PROCESS_NAME", "UPPER_PROCESS_NAME")
            tableMapping.ColumnMappings.Add("PROCESS_CODE", "PROCESS_CODE")
            tableMapping.ColumnMappings.Add("PROCESS_GROUP_ID", "PROCESS_GROUP_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PROCESS_MST] WHERE (([PROCESS_NO] = @Original_PROCESS_NO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PROCESS_MST] ([PROCESS_NAME], [PROCESS_TIME], [PROCESS_TYPE], [ENT"& _ 
                "RANCE_FLAG], [PROCESS_CODE], [PROCESS_GROUP_ID]) VALUES (@PROCESS_NAME, @PROCESS"& _ 
                "_TIME, @PROCESS_TYPE, @ENTRANCE_FLAG, @PROCESS_CODE, @PROCESS_GROUP_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, PROCESS_NO, ENTRANCE_FLAG, UPPER(PROC"& _ 
                "ESS_NAME) AS UPPER_PROCESS_NAME, PROCESS_CODE, PROCESS_GROUP_ID FROM T_PROCESS_M"& _ 
                "ST WHERE (PROCESS_NO = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENTRANCE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_GROUP_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PROCESS_MST] SET [PROCESS_NAME] = @PROCESS_NAME, [PROCESS_TIME] = @PROC"& _ 
                "ESS_TIME, [PROCESS_TYPE] = @PROCESS_TYPE, [ENTRANCE_FLAG] = @ENTRANCE_FLAG, [PRO"& _ 
                "CESS_CODE] = @PROCESS_CODE, [PROCESS_GROUP_ID] = @PROCESS_GROUP_ID WHERE (([PROC"& _ 
                "ESS_NO] = @Original_PROCESS_NO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROCESS_NAME, PROCESS_TIME, PROCESS_TY"& _ 
                "PE, PROCESS_NO, ENTRANCE_FLAG, UPPER(PROCESS_NAME) AS UPPER_PROCESS_NAME, PROCES"& _ 
                "S_CODE, PROCESS_GROUP_ID FROM T_PROCESS_MST WHERE (PROCESS_NO = @PROCESS_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENTRANCE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_GROUP_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, PROCESS_NO, ENTRANCE_FLAG, U"& _ 
                "PPER(PROCESS_NAME) AS UPPER_PROCESS_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PROCESS_CODE, "& _ 
                "PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TOP (@BLOCK) 0 AS INDEX_NO, PROCESS_NO, PROCESS_NAME, PROCESS_TYPE, PR"& _ 
                "OCESS_TIME, ENTRANCE_FLAG, PROCESS_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT"& _ 
                "     PROCESS_NO, PROCESS_NAME, PROCESS_TYPE, PROCESS_TIME, ENTRANCE_FLAG, PROCES"& _ 
                "S_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          T_PROCESS_MST AS"& _ 
                " my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (PROCESS_TYPE >= @PROCESS_TYPE) AND (PROC"& _ 
                "ESS_TYPE <"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  (SELECT     TOP (1"& _ 
                ") MAX(PROCESS_TYPE) AS MAX_PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                       "& _ 
                "             FROM          T_PROCESS_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "              WHERE      (PROCESS_TYPE >= @PROCESS_TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "                              GROUP BY PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                         ORDER BY PROCESS_TYPE DESC)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "                        (PROCESS_TYPE >= @PROCESS_TYPE) AND (PROCESS_TYPE ="&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                                               (SELECT     TOP (1) MAX(PROCESS_T"& _ 
                "YPE) AS MAX_PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                    FR"& _ 
                "OM          T_PROCESS_MST AS T_PROCESS_MST_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                  "& _ 
                "                  WHERE      (PROCESS_TYPE >= @PROCESS_TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "                                  GROUP BY PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "                             ORDER BY PROCESS_TYPE DESC)) AND (1 = @INCLUDE_WBS_"& _ 
                "PROGRESS)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (PROCESS_TYPE = @PROCESS_TYPE)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           (NOT (PROCESS_CODE < @PROCESS_CODE))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY PROCESS_TYPE, PROCESS_"& _ 
                "CODE"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INCLUDE_WBS_PROGRESS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, PROCESS_NAME, PROCESS_NO, P"& _ 
                "ROCESS_TIME, PROCESS_TYPE FROM T_PROCESS_MST WHERE (PROCESS_TYPE = @FIRST_PROCES"& _ 
                "S_TYPE) OR (PROCESS_TYPE = @SECOND_PROCESS_TYPE) AND (ENTRANCE_FLAG = @ENTRANCE_"& _ 
                "FLAG)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by process_type, process_code"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIRST_PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECOND_PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENTRANCE_FLAG", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     TOP (@BLOCK) 0 AS INDEX_NO, PROCESS_NO, PROCESS_NAME, PROCESS_TYPE, PR"& _ 
                "OCESS_TIME, ENTRANCE_FLAG, PROCESS_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT"& _ 
                "     PROCESS_NO, PROCESS_NAME, PROCESS_TYPE, PROCESS_TIME, ENTRANCE_FLAG, PROCES"& _ 
                "S_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          T_PROCESS_MST AS"& _ 
                " my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (PROCESS_TYPE <= @PROCESS_TYPE) AND (PROC"& _ 
                "ESS_TYPE >"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  (SELECT     TOP (1"& _ 
                ") MIN(PROCESS_TYPE) AS MIN_PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                       "& _ 
                "             FROM          T_PROCESS_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "              WHERE      (PROCESS_TYPE <= @PROCESS_TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "                              GROUP BY PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                         ORDER BY PROCESS_TYPE)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                   (PROCESS_TYPE <= @PROCESS_TYPE) AND (PROCESS_TYPE ="&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                                          (SELECT     TOP (1) MIN(PROCESS_TYPE) "& _ 
                "AS MIN_PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                    FROM   "& _ 
                "       T_PROCESS_MST AS T_PROCESS_MST_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                       "& _ 
                "             WHERE      (PROCESS_TYPE <= @PROCESS_TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "                             GROUP BY PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            "& _ 
                "                        ORDER BY PROCESS_TYPE)) AND (1 = @INCLUDE_FINISHING)) AS"& _ 
                " sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (PROCESS_TYPE = @PROCESS_TYPE)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (N"& _ 
                "OT (PROCESS_CODE > @PROCESS_CODE))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY PROCESS_TYPE DESC, PROCESS_CODE DES"& _ 
                "C"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INCLUDE_FINISHING", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, PROCESS_NAME, PROCESS_NO, P"& _ 
                "ROCESS_TIME, PROCESS_TYPE FROM T_PROCESS_MST WHERE (PROCESS_GROUP_ID = @proc_gro"& _ 
                "up_id) ORDER BY PROCESS_CODE"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@proc_group_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT TOP (1) ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, PROCESS_NAME, PROCE"& _ 
                "SS_NO, PROCESS_TIME, PROCESS_TYPE FROM T_PROCESS_MST WHERE (PROCESS_NAME LIKE @P"& _ 
                "ROCESS_NAME) AND (PROCESS_TYPE >= @PROCESS_TYPE) AND (PROCESS_TYPE < (SELECT TOP"& _ 
                " (1) MAX(PROCESS_TYPE) AS MAX_PROCESS_TYPE FROM T_PROCESS_MST AS T_PROCESS_MST_1"& _ 
                " WHERE (PROCESS_TYPE >= @PROCESS_TYPE) GROUP BY PROCESS_TYPE ORDER BY PROCESS_TY"& _ 
                "PE DESC)) ORDER BY PROCESS_TYPE, PROCESS_CODE"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NAME", Global.System.Data.SqlDbType.VarChar, 60, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT     COUNT(*) AS OffsetBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     PROCESS_NO, PROCESS_N"& _ 
                "AME, PROCESS_TYPE, PROCESS_TIME, ENTRANCE_FLAG, PROCESS_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          (SELECT     PROCESS_NO, PROCESS_NAME, PROC"& _ 
                "ESS_TYPE, PROCESS_TIME, ENTRANCE_FLAG, PROCESS_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                                       FROM          T_PROCESS_MST AS my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                         WHERE      (PROCESS_TYPE <= @PROCESS_TY"& _ 
                "PE)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (NOT (PROCESS_TYPE = @PROCESS_TYPE"& _ 
                ")) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              (NOT (PROCESS_CODE > @PROCE"& _ 
                "SS_CODE))) AS derivedtbl_1"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM T_PROCESS_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE PROCESS_NO = @processNo"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@processNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPROCESS_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPROCESS_MSTDataTable = New dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsPAINT.dtPROCESS_MSTDataTable, ByVal BLOCK As Integer, ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer, ByVal INCLUDE_WBS_PROGRESS As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INCLUDE_WBS_PROGRESS,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal BLOCK As Integer, ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer, ByVal INCLUDE_WBS_PROGRESS As Decimal) As dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INCLUDE_WBS_PROGRESS,Decimal)
            Dim dataTable As dsPAINT.dtPROCESS_MSTDataTable = New dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPassResult(ByVal dataTable As dsPAINT.dtPROCESS_MSTDataTable, ByVal FIRST_PROCESS_TYPE As Integer, ByVal SECOND_PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIRST_PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SECOND_PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENTRANCE_FLAG,Boolean)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPassResult(ByVal FIRST_PROCESS_TYPE As Integer, ByVal SECOND_PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean) As dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIRST_PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SECOND_PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENTRANCE_FLAG,Boolean)
            Dim dataTable As dsPAINT.dtPROCESS_MSTDataTable = New dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsPAINT.dtPROCESS_MSTDataTable, ByVal BLOCK As Integer, ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer, ByVal INCLUDE_FINISHING As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INCLUDE_FINISHING,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal BLOCK As Integer, ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer, ByVal INCLUDE_FINISHING As Decimal) As dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INCLUDE_FINISHING,Decimal)
            Dim dataTable As dsPAINT.dtPROCESS_MSTDataTable = New dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProcGroupID(ByVal dataTable As dsPAINT.dtPROCESS_MSTDataTable, ByVal proc_group_id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_group_id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProcGroupID(ByVal proc_group_id As Integer) As dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_group_id,Integer)
            Dim dataTable As dsPAINT.dtPROCESS_MSTDataTable = New dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProcName(ByVal dataTable As dsPAINT.dtPROCESS_MSTDataTable, ByVal PROCESS_NAME As String, ByVal PROCESS_TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROCESS_NAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROCESS_NAME,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProcName(ByVal PROCESS_NAME As String, ByVal PROCESS_TYPE As Integer) As dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROCESS_NAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROCESS_NAME,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Dim dataTable As dsPAINT.dtPROCESS_MSTDataTable = New dsPAINT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtPROCESS_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPROCESS_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROCESS_NO As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean, ByVal PROCESS_CODE As Integer, ByVal PROCESS_GROUP_ID As Integer) As Integer
            If (PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROCESS_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROCESS_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROCESS_TIME,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENTRANCE_FLAG,Boolean)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PROCESS_GROUP_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean, ByVal PROCESS_CODE As Integer, ByVal PROCESS_GROUP_ID As Integer, ByVal Original_PROCESS_NO As Integer, ByVal PROCESS_NO As Integer) As Integer
            If (PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROCESS_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROCESS_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROCESS_TIME,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENTRANCE_FLAG,Boolean)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PROCESS_GROUP_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean, ByVal PROCESS_CODE As Integer, ByVal PROCESS_GROUP_ID As Integer, ByVal Original_PROCESS_NO As Integer) As Integer
            Return Me.Update(PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, Original_PROCESS_NO, Original_PROCESS_NO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetDataByOffsetBase(ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(PROCESS_TYPE,Integer)
            command.Parameters(1).Value = CType(PROCESS_CODE,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetProcessTypeByProcessNo(ByVal processNo As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            command.Parameters(0).Value = CType(processNo,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPLC_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPLC_MST"
            tableMapping.ColumnMappings.Add("PLC_ID", "PLC_ID")
            tableMapping.ColumnMappings.Add("STAGE_CODE", "STAGE_CODE")
            tableMapping.ColumnMappings.Add("PLC_NET", "PLC_NET")
            tableMapping.ColumnMappings.Add("PLC_NODE", "PLC_NODE")
            tableMapping.ColumnMappings.Add("PLC_UNIT", "PLC_UNIT")
            tableMapping.ColumnMappings.Add("READ_DM", "READ_DM")
            tableMapping.ColumnMappings.Add("WRITE_DATA_DM", "WRITE_DATA_DM")
            tableMapping.ColumnMappings.Add("WRITE_STATUS_DM", "WRITE_STATUS_DM")
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("PLC_ONLINE_FLAG", "PLC_ONLINE_FLAG")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PLC_MST] WHERE (([PLC_ID] = @Original_PLC_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PLC_MST] ([STAGE_CODE], [PLC_NET], [PLC_NODE], [PLC_UNIT], [READ_D"& _ 
                "M], [WRITE_DATA_DM], [WRITE_STATUS_DM], [PROCESS_NO], [PLC_ONLINE_FLAG]) VALUES "& _ 
                "(@STAGE_CODE, @PLC_NET, @PLC_NODE, @PLC_UNIT, @READ_DM, @WRITE_DATA_DM, @WRITE_S"& _ 
                "TATUS_DM, @PROCESS_NO, @PLC_ONLINE_FLAG);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PLC_ID, STAGE_CODE, PLC_NET, P"& _ 
                "LC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, PROCESS_NO, PLC_ONLI"& _ 
                "NE_FLAG FROM T_PLC_MST WHERE (PLC_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STAGE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_DATA_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_DATA_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_STATUS_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_ONLINE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ONLINE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PLC_MST] SET [STAGE_CODE] = @STAGE_CODE, [PLC_NET] = @PLC_NET, [PLC_NOD"& _ 
                "E] = @PLC_NODE, [PLC_UNIT] = @PLC_UNIT, [READ_DM] = @READ_DM, [WRITE_DATA_DM] = "& _ 
                "@WRITE_DATA_DM, [WRITE_STATUS_DM] = @WRITE_STATUS_DM, [PROCESS_NO] = @PROCESS_NO"& _ 
                ", [PLC_ONLINE_FLAG] = @PLC_ONLINE_FLAG WHERE (([PLC_ID] = @Original_PLC_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT PLC_ID, STAGE_CODE, PLC_NET, PLC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, W"& _ 
                "RITE_STATUS_DM, PROCESS_NO, PLC_ONLINE_FLAG FROM T_PLC_MST WHERE (PLC_ID = @PLC_"& _ 
                "ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STAGE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_DATA_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_DATA_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_STATUS_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_ONLINE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ONLINE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     T_PLC_MST.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PLC_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TOP (@block) 0 AS INDEX_NO, PLC_ID, STAGE_CODE, PLC_NET, PLC_NODE, PLC"& _ 
                "_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PROCESS_"& _ 
                "NO, PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     plc_MST.PLC_ID, plc_MST.STAGE_CODE"& _ 
                ", plc_MST.PLC_NET, plc_MST.PLC_NODE, plc_MST.PLC_UNIT, plc_MST.READ_DM, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                        plc_MST.WRITE_DATA_DM, plc_MST.WRITE_STA"& _ 
                "TUS_DM, plc_MST.PROCESS_NO, plc_MST.PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM"& _ 
                "          T_PLC_MST AS plc_MST "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (plc_MST.STAG"& _ 
                "E_CODE >= @stage_code)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (STAGE_CODE = @stage_code)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                    (NOT (PLC_ID < @plc_id))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY STAGE_CODE, PLC_ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stage_code", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@plc_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "select TOP (@block) 0 AS INDEX_NO, sc.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(SELECT plc_MST.PLC_ID, plc_MST.S"& _ 
                "TAGE_CODE, plc_MST.PLC_NET, plc_MST.PLC_NODE, plc_MST.PLC_UNIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"plc_MST.R"& _ 
                "EAD_DM, plc_MST.WRITE_DATA_DM, plc_MST.WRITE_STATUS_DM, plc_MST.PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"plc_MST.PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM t_plc_mst plc_mst "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE      (stage_code <="& _ 
                " @stage_code) ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (NOT (stage_code = @stage_code)) OR (NOT (plc_id > "& _ 
                "@plc_id))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY stage_code DESC, plc_id DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stage_code", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@plc_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     COUNT(*) AS OffestBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     PLC_ID, STAGE_CODE, P"& _ 
                "LC_NET, PLC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, PROCESS_NO,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "         FROM          (SELECT     PLC_ID, STAGE_CODE, PLC_NET, PLC_NODE, PLC_UN"& _ 
                "IT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                                                 PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "                                 FROM          T_PLC_MST AS plc_mst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "                                    WHERE      (STAGE_CODE <= @stage_code)) AS s"& _ 
                "c"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (NOT (STAGE_CODE = @stage_code)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                        (NOT (PLC_ID > @plc_id))) AS derivedtbl_"& _ 
                "1"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stage_code", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@plc_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPLC_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtPLC_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPLC_MSTDataTable = New dsPAINT.dtPLC_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsPAINT.dtPLC_MSTDataTable, ByVal block As Integer, ByVal stage_code As Integer, ByVal plc_id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(stage_code,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(plc_id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal block As Integer, ByVal stage_code As Integer, ByVal plc_id As Integer) As dsPAINT.dtPLC_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(stage_code,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(plc_id,Integer)
            Dim dataTable As dsPAINT.dtPLC_MSTDataTable = New dsPAINT.dtPLC_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsPAINT.dtPLC_MSTDataTable, ByVal block As Integer, ByVal stage_code As Integer, ByVal plc_id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(stage_code,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(plc_id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal block As Integer, ByVal stage_code As Integer, ByVal plc_id As Integer) As dsPAINT.dtPLC_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(stage_code,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(plc_id,Integer)
            Dim dataTable As dsPAINT.dtPLC_MSTDataTable = New dsPAINT.dtPLC_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtPLC_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPLC_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PLC_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PLC_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal STAGE_CODE As Integer, ByVal PLC_NET As Integer, ByVal PLC_NODE As Integer, ByVal PLC_UNIT As Integer, ByVal READ_DM As Integer, ByVal WRITE_DATA_DM As Integer, ByVal WRITE_STATUS_DM As Integer, ByVal PROCESS_NO As Integer, ByVal PLC_ONLINE_FLAG As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(STAGE_CODE,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PLC_NET,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PLC_NODE,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PLC_UNIT,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(READ_DM,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(WRITE_DATA_DM,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(WRITE_STATUS_DM,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(PLC_ONLINE_FLAG,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STAGE_CODE As Integer, ByVal PLC_NET As Integer, ByVal PLC_NODE As Integer, ByVal PLC_UNIT As Integer, ByVal READ_DM As Integer, ByVal WRITE_DATA_DM As Integer, ByVal WRITE_STATUS_DM As Integer, ByVal PROCESS_NO As Integer, ByVal PLC_ONLINE_FLAG As Boolean, ByVal Original_PLC_ID As Integer, ByVal PLC_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STAGE_CODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PLC_NET,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PLC_NODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PLC_UNIT,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(READ_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(WRITE_DATA_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(WRITE_STATUS_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PLC_ONLINE_FLAG,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PLC_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PLC_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STAGE_CODE As Integer, ByVal PLC_NET As Integer, ByVal PLC_NODE As Integer, ByVal PLC_UNIT As Integer, ByVal READ_DM As Integer, ByVal WRITE_DATA_DM As Integer, ByVal WRITE_STATUS_DM As Integer, ByVal PROCESS_NO As Integer, ByVal PLC_ONLINE_FLAG As Boolean, ByVal Original_PLC_ID As Integer) As Integer
            Return Me.Update(STAGE_CODE, PLC_NET, PLC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, PROCESS_NO, PLC_ONLINE_FLAG, Original_PLC_ID, Original_PLC_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetDataByOffsetBase(ByVal stage_code As Integer, ByVal plc_id As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(stage_code,Integer)
            command.Parameters(1).Value = CType(plc_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPROCESS_GROUP_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPROCESS_GROUP_MST"
            tableMapping.ColumnMappings.Add("PROCESS_GROUP_ID", "PROCESS_GROUP_ID")
            tableMapping.ColumnMappings.Add("PROCESS_GROUP_SEQ", "PROCESS_GROUP_SEQ")
            tableMapping.ColumnMappings.Add("PROCESS_GROUP_NAME", "PROCESS_GROUP_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     T_PROCESS_GROUP_MST.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_GROUP_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select * from T_PROCESS_GROUP_MST where PROCESS_GROUP_SEQ <> 99 order by PROCESS_"& _ 
                "GROUP_SEQ"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPROCESS_GROUP_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtPROCESS_GROUP_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPROCESS_GROUP_MSTDataTable = New dsPAINT.dtPROCESS_GROUP_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProcGroupSeq(ByVal dataTable As dsPAINT.dtPROCESS_GROUP_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProcGroupSeq() As dsPAINT.dtPROCESS_GROUP_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsPAINT.dtPROCESS_GROUP_MSTDataTable = New dsPAINT.dtPROCESS_GROUP_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPROCESS_LINKAGE
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPROCESS_LINKAGE"
            tableMapping.ColumnMappings.Add("FROM_PROCESS_NO", "FROM_PROCESS_NO")
            tableMapping.ColumnMappings.Add("TO_PROCESS_NO", "TO_PROCESS_NO")
            tableMapping.ColumnMappings.Add("FROM_PROCESS_NAME", "FROM_PROCESS_NAME")
            tableMapping.ColumnMappings.Add("PROCESS_TIME", "PROCESS_TIME")
            tableMapping.ColumnMappings.Add("PROCESS_TYPE", "PROCESS_TYPE")
            tableMapping.ColumnMappings.Add("ENTRANCE_FLAG", "ENTRANCE_FLAG")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PROCESS_LINKAGE] WHERE (([FROM_PROCESS_NO] = @Original_FROM_PROCES"& _ 
                "S_NO) AND ([TO_PROCESS_NO] = @Original_TO_PROCESS_NO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FROM_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TO_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TO_PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PROCESS_LINKAGE] ([FROM_PROCESS_NO], [TO_PROCESS_NO]) VALUES (@FRO"& _ 
                "M_PROCESS_NO, @TO_PROCESS_NO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FROM_PROCESS_NO, TO_PROCESS_NO, '' AS FRO"& _ 
                "M_PROCESS_NAME, 0 AS PROCESS_TIME, 0 AS PROCESS_TYPE, 'False' AS ENTRANCE_FLAG F"& _ 
                "ROM T_PROCESS_LINKAGE WHERE (FROM_PROCESS_NO = @FROM_PROCESS_NO) AND (TO_PROCESS"& _ 
                "_NO = @TO_PROCESS_NO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FROM_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TO_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TO_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PROCESS_LINKAGE] SET [FROM_PROCESS_NO] = @FROM_PROCESS_NO, [TO_PROCESS_"& _ 
                "NO] = @TO_PROCESS_NO WHERE (([FROM_PROCESS_NO] = @Original_FROM_PROCESS_NO) AND "& _ 
                "([TO_PROCESS_NO] = @Original_TO_PROCESS_NO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FROM_PROCESS_NO, TO_PROCES"& _ 
                "S_NO, '' AS FROM_PROCESS_NAME, 0 AS PROCESS_TIME, 0 AS PROCESS_TYPE, 'False' AS "& _ 
                "ENTRANCE_FLAG FROM T_PROCESS_LINKAGE WHERE (FROM_PROCESS_NO = @FROM_PROCESS_NO) "& _ 
                "AND (TO_PROCESS_NO = @TO_PROCESS_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FROM_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TO_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TO_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FROM_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TO_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TO_PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     FROM_PROCESS_NO, TO_PROCESS_NO, '' AS FROM_PROCESS_NAME, 0 AS PROCESS_"& _ 
                "TIME, 0 AS PROCESS_TYPE, 'False' AS ENTRANCE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_LINKAG"& _ 
                "E "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     ISNULL(prc.PROCESS_NAME, 'PROCESS NO ' + CONVERT(varchar, prc.PROCESS_"& _ 
                "NO)) AS FROM_PROCESS_NAME, lnk.FROM_PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      lnk.TO_P"& _ 
                "ROCESS_NO, ISNULL(prc.PROCESS_TIME, 0) AS PROCESS_TIME, ISNULL(prc.PROCESS_TYPE,"& _ 
                " 99) AS PROCESS_TYPE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ISNULL(prc.ENTRANCE_FLAG, 'False')"& _ 
                " AS ENTRANCE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_LINKAGE AS lnk LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                T_PROCESS_MST AS prc ON lnk.FROM_PROCESS_NO = prc.PROCESS_NO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     COUNT(*) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_LINKAGE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (FROM_PRO"& _ 
                "CESS_NO = @fromProcessNo)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fromProcessNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtPROCESS_LINKAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtPROCESS_LINKAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPROCESS_LINKAGEDataTable = New dsPAINT.dtPROCESS_LINKAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFromProcNo(ByVal dataTable As dsPAINT.dtPROCESS_LINKAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFromProcNo() As dsPAINT.dtPROCESS_LINKAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsPAINT.dtPROCESS_LINKAGEDataTable = New dsPAINT.dtPROCESS_LINKAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtPROCESS_LINKAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPROCESS_LINKAGE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FROM_PROCESS_NO As Integer, ByVal Original_TO_PROCESS_NO As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FROM_PROCESS_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TO_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FROM_PROCESS_NO As Integer, ByVal TO_PROCESS_NO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FROM_PROCESS_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(TO_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FROM_PROCESS_NO As Integer, ByVal TO_PROCESS_NO As Integer, ByVal Original_FROM_PROCESS_NO As Integer, ByVal Original_TO_PROCESS_NO As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FROM_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TO_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FROM_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_TO_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FROM_PROCESS_NO As Integer, ByVal Original_TO_PROCESS_NO As Integer) As Integer
            Return Me.Update(Original_FROM_PROCESS_NO, Original_TO_PROCESS_NO, Original_FROM_PROCESS_NO, Original_TO_PROCESS_NO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNextProcessCount(ByVal fromProcessNo As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(fromProcessNo,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taLOG_DAT
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtLOG_DAT"
            tableMapping.ColumnMappings.Add("LOG_ID", "LOG_ID")
            tableMapping.ColumnMappings.Add("LOG_TYPE", "LOG_TYPE")
            tableMapping.ColumnMappings.Add("LOG_LEVEL", "LOG_LEVEL")
            tableMapping.ColumnMappings.Add("PC_NAME", "PC_NAME")
            tableMapping.ColumnMappings.Add("OCC_DATE", "OCC_DATE")
            tableMapping.ColumnMappings.Add("LOG_CODE", "LOG_CODE")
            tableMapping.ColumnMappings.Add("MESSAGE", "MESSAGE")
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("DATE", "DATE")
            tableMapping.ColumnMappings.Add("TIME", "TIME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_LOG_DAT] WHERE (([LOG_ID] = @Original_LOG_ID) AND ([LOG_TYPE] = @O"& _ 
                "riginal_LOG_TYPE) AND ([LOG_LEVEL] = @Original_LOG_LEVEL) AND ((@IsNull_PC_NAME "& _ 
                "= 1 AND [PC_NAME] IS NULL) OR ([PC_NAME] = @Original_PC_NAME)) AND ([OCC_DATE] ="& _ 
                " @Original_OCC_DATE) AND ([LOG_CODE] = @Original_LOG_CODE) AND ([MESSAGE] = @Ori"& _ 
                "ginal_MESSAGE) AND ((@IsNull_PROCESS_NO = 1 AND [PROCESS_NO] IS NULL) OR ([PROCE"& _ 
                "SS_NO] = @Original_PROCESS_NO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_LEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_LEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCC_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MESSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_LOG_DAT] ([LOG_TYPE], [LOG_LEVEL], [PC_NAME], [OCC_DATE], [LOG_COD"& _ 
                "E], [MESSAGE], [PROCESS_NO]) VALUES (@LOG_TYPE, @LOG_LEVEL, @PC_NAME, @OCC_DATE,"& _ 
                " @LOG_CODE, @MESSAGE, @PROCESS_NO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOG_ID, LOG_TYPE, LOG_LEVEL, PC_NAME"& _ 
                ", OCC_DATE, LOG_CODE, MESSAGE, PROCESS_NO, CONVERT (varchar, OCC_DATE, 103) AS D"& _ 
                "ATE, CONVERT (varchar, OCC_DATE, 108) AS TIME FROM T_LOG_DAT WHERE (LOG_ID = SCO"& _ 
                "PE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_LEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCC_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MESSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_LOG_DAT] SET [LOG_TYPE] = @LOG_TYPE, [LOG_LEVEL] = @LOG_LEVEL, [PC_NAME"& _ 
                "] = @PC_NAME, [OCC_DATE] = @OCC_DATE, [LOG_CODE] = @LOG_CODE, [MESSAGE] = @MESSA"& _ 
                "GE, [PROCESS_NO] = @PROCESS_NO WHERE (([LOG_ID] = @Original_LOG_ID) AND ([LOG_TY"& _ 
                "PE] = @Original_LOG_TYPE) AND ([LOG_LEVEL] = @Original_LOG_LEVEL) AND ((@IsNull_"& _ 
                "PC_NAME = 1 AND [PC_NAME] IS NULL) OR ([PC_NAME] = @Original_PC_NAME)) AND ([OCC"& _ 
                "_DATE] = @Original_OCC_DATE) AND ([LOG_CODE] = @Original_LOG_CODE) AND ([MESSAGE"& _ 
                "] = @Original_MESSAGE) AND ((@IsNull_PROCESS_NO = 1 AND [PROCESS_NO] IS NULL) OR"& _ 
                " ([PROCESS_NO] = @Original_PROCESS_NO)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOG_ID, LOG_TYPE, LOG_LEVEL, P"& _ 
                "C_NAME, OCC_DATE, LOG_CODE, MESSAGE, PROCESS_NO, CONVERT (varchar, OCC_DATE, 103"& _ 
                ") AS DATE, CONVERT (varchar, OCC_DATE, 108) AS TIME FROM T_LOG_DAT WHERE (LOG_ID"& _ 
                " = @LOG_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_LEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCC_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MESSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_LEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_LEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCC_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MESSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     LOG_ID, LOG_TYPE, LOG_LEVEL, PC_NAME, OCC_DATE, LOG_CODE, MESSAGE, PRO"& _ 
                "CESS_NO, CONVERT(varchar, OCC_DATE, 103) AS DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CONVER"& _ 
                "T(varchar, OCC_DATE, 108) AS TIME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_LOG_DAT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE    T_LOG_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&"LOG_TYPE = @logType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND OCC_DATE < @expDate"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@logType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@expDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     TOP (1000) CONVERT(varchar, OCC_DATE, 103) AS DATE, CONVERT(varchar, O"& _ 
                "CC_DATE, 108) AS TIME, LOG_TYPE, LOG_LEVEL, PC_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      MES"& _ 
                "SAGE, PROCESS_NO, OCC_DATE, LOG_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_LOG_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (LOG_TYP"& _ 
                "E = @logType)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OCC_DATE DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@logType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "select TOP (@rowCount) * from T_LOG_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where (LOG_TYPE = 1) And (OCC_DATE >= @s"& _ 
                "tartSystemDate) ORDER BY OCC_DATE Desc, LOG_ID Desc"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rowCount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@startSystemDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     TOP (@LOG_COUNT) '[' + CONVERT(varchar(255), OCC_DATE, 120) + '] ' + M"& _ 
                "ESSAGE AS MESSAGE, LOG_ID, LOG_TYPE, LOG_LEVEL, PC_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " OCC_DATE, LOG_CODE, PROCESS_NO, CONVERT(varchar, OCC_DATE, 103) AS DATE, CONVER"& _ 
                "T(varchar, OCC_DATE, 108) AS TIME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_LOG_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (LOG_TYPE I"& _ 
                "N (1, 2)) AND (LOG_LEVEL IN (1, 2)) AND (OCC_DATE > @OCC_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OCC_DAT"& _ 
                "E DESC"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_COUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCC_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtLOG_DATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtLOG_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtLOG_DATDataTable = New dsPAINT.dtLOG_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLogType(ByVal dataTable As dsPAINT.dtLOG_DATDataTable, ByVal logType As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(logType,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLogType(ByVal logType As Integer) As dsPAINT.dtLOG_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(logType,Integer)
            Dim dataTable As dsPAINT.dtLOG_DATDataTable = New dsPAINT.dtLOG_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNumRowAndSystemStart(ByVal dataTable As dsPAINT.dtLOG_DATDataTable, ByVal rowCount As Integer, ByVal startSystemDate As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(rowCount,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(startSystemDate,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNumRowAndSystemStart(ByVal rowCount As Integer, ByVal startSystemDate As Date) As dsPAINT.dtLOG_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(rowCount,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(startSystemDate,Date)
            Dim dataTable As dsPAINT.dtLOG_DATDataTable = New dsPAINT.dtLOG_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOccurDate(ByVal dataTable As dsPAINT.dtLOG_DATDataTable, ByVal LOG_COUNT As Integer, ByVal OCC_DATE As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOG_COUNT,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OCC_DATE,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOccurDate(ByVal LOG_COUNT As Integer, ByVal OCC_DATE As Date) As dsPAINT.dtLOG_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOG_COUNT,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OCC_DATE,Date)
            Dim dataTable As dsPAINT.dtLOG_DATDataTable = New dsPAINT.dtLOG_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtLOG_DATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtLOG_DAT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LOG_ID As Integer, ByVal Original_LOG_TYPE As Integer, ByVal Original_LOG_LEVEL As Integer, ByVal Original_PC_NAME As String, ByVal Original_OCC_DATE As Date, ByVal Original_LOG_CODE As String, ByVal Original_MESSAGE As String, ByVal Original_PROCESS_NO As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LOG_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LOG_TYPE,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LOG_LEVEL,Integer)
            If (Original_PC_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PC_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_OCC_DATE,Date)
            If (Original_LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOG_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LOG_CODE,String)
            End If
            If (Original_MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MESSAGE")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MESSAGE,String)
            End If
            If (Original_PROCESS_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PROCESS_NO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LOG_TYPE As Integer, ByVal LOG_LEVEL As Integer, ByVal PC_NAME As String, ByVal OCC_DATE As Date, ByVal LOG_CODE As String, ByVal MESSAGE As String, ByVal PROCESS_NO As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(LOG_TYPE,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(LOG_LEVEL,Integer)
            If (PC_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PC_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(OCC_DATE,Date)
            If (LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOG_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LOG_CODE,String)
            End If
            If (MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MESSAGE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MESSAGE,String)
            End If
            If (PROCESS_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PROCESS_NO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LOG_TYPE As Integer,  _
                    ByVal LOG_LEVEL As Integer,  _
                    ByVal PC_NAME As String,  _
                    ByVal OCC_DATE As Date,  _
                    ByVal LOG_CODE As String,  _
                    ByVal MESSAGE As String,  _
                    ByVal PROCESS_NO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LOG_ID As Integer,  _
                    ByVal Original_LOG_TYPE As Integer,  _
                    ByVal Original_LOG_LEVEL As Integer,  _
                    ByVal Original_PC_NAME As String,  _
                    ByVal Original_OCC_DATE As Date,  _
                    ByVal Original_LOG_CODE As String,  _
                    ByVal Original_MESSAGE As String,  _
                    ByVal Original_PROCESS_NO As Global.System.Nullable(Of Integer),  _
                    ByVal LOG_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LOG_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LOG_LEVEL,Integer)
            If (PC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PC_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(OCC_DATE,Date)
            If (LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOG_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LOG_CODE,String)
            End If
            If (MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MESSAGE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MESSAGE,String)
            End If
            If (PROCESS_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PROCESS_NO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_LOG_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_LOG_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_LOG_LEVEL,Integer)
            If (Original_PC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PC_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_OCC_DATE,Date)
            If (Original_LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOG_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_LOG_CODE,String)
            End If
            If (Original_MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MESSAGE")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MESSAGE,String)
            End If
            If (Original_PROCESS_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PROCESS_NO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(LOG_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LOG_TYPE As Integer, ByVal LOG_LEVEL As Integer, ByVal PC_NAME As String, ByVal OCC_DATE As Date, ByVal LOG_CODE As String, ByVal MESSAGE As String, ByVal PROCESS_NO As Global.System.Nullable(Of Integer), ByVal Original_LOG_ID As Integer, ByVal Original_LOG_TYPE As Integer, ByVal Original_LOG_LEVEL As Integer, ByVal Original_PC_NAME As String, ByVal Original_OCC_DATE As Date, ByVal Original_LOG_CODE As String, ByVal Original_MESSAGE As String, ByVal Original_PROCESS_NO As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(LOG_TYPE, LOG_LEVEL, PC_NAME, OCC_DATE, LOG_CODE, MESSAGE, PROCESS_NO, Original_LOG_ID, Original_LOG_TYPE, Original_LOG_LEVEL, Original_PC_NAME, Original_OCC_DATE, Original_LOG_CODE, Original_MESSAGE, Original_PROCESS_NO, Original_LOG_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteOldLogByLogTypeAndDate(ByVal logType As Integer, ByVal expDate As Date) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(logType,Integer)
            command.Parameters(1).Value = CType(expDate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taFINISHING_LINE
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtFINISHING_LINE"
            tableMapping.ColumnMappings.Add("PRODUCTION_DATE", "PRODUCTION_DATE")
            tableMapping.ColumnMappings.Add("ON_TIME", "ON_TIME")
            tableMapping.ColumnMappings.Add("LOT_ID", "LOT_ID")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("BLOCK_MODEL", "BLOCK_MODEL")
            tableMapping.ColumnMappings.Add("BLOCK_SEQ", "BLOCK_SEQ")
            tableMapping.ColumnMappings.Add("PROCESS_RESULT_DATE", "PROCESS_RESULT_DATE")
            tableMapping.ColumnMappings.Add("IMPORT_CODE", "IMPORT_CODE")
            tableMapping.ColumnMappings.Add("GA_SHOP", "GA_SHOP")
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     prodDAT.PRODUCTION_DATE, prodDAT.ON_TIME, prodDAT.LOT_ID, sktMST.SKIT_"& _ 
                "NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      prodDAT.MODEL_YEAR + prodDAT.SUFFIX_CODE AS MODEL_CO"& _ 
                "DE, prodDAT.LOT_NO, prodDAT.UNIT, prodDAT.BLOCK_MODEL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      p"& _ 
                "rodDAT.BLOCK_SEQ, CONVERT(varchar, t1.PROCESS_RESULT_DATE, 103) + ' ' + CONVERT("& _ 
                "varchar, t1.PROCESS_RESULT_DATE, 108) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AS PROCESS_RESULT_"& _ 
                "DATE, prodDAT.IMPORT_CODE, prodDAT.GA_SHOP, t1.MODEL_YEAR, t1.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM "& _ 
                "        (SELECT     sub_t1.MODEL_YEAR, sub_t1.SUFFIX_CODE, sub_t1.LOT_NO, sub_t1"& _ 
                ".UNIT, sub_t1.PROCESS_NO, sub_t1.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FRO"& _ 
                "M          (SELECT     pntCELL.MODEL_YEAR, pntCELL.SUFFIX_CODE, pntCELL.LOT_NO, "& _ 
                "pntCELL.UNIT, pntCELL.PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                            "& _ 
                "                          pntCELL.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "                      FROM          T_PROCESS_MST AS procMST INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                                                               T_PAINT_CELL AS p"& _ 
                "ntCELL ON procMST.PROCESS_NO = pntCELL.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             "& _ 
                "                  WHERE      (procMST.PROCESS_TYPE = 0)) AS sub_t1 LEFT OUTER JO"& _ 
                "IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  (SELECT     pntCELL.MODEL_"& _ 
                "YEAR, pntCELL.SUFFIX_CODE, pntCELL.LOT_NO, pntCELL.UNIT, pntCELL.PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                                                                          pntCEL"& _ 
                "L.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                    FROM "& _ 
                "         T_PROCESS_MST AS procMST INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                  "& _ 
                "                                         T_PAINT_CELL AS pntCELL ON procMST.PROC"& _ 
                "ESS_NO = pntCELL.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   "& _ 
                " WHERE      (procMST.PROCESS_TYPE = 1)) AS sub_t2 ON sub_t1.PROCESS_RESULT_DATE "& _ 
                "< sub_t2.PROCESS_RESULT_DATE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                             "& _ 
                " sub_t1.MODEL_YEAR = sub_t2.MODEL_YEAR AND sub_t1.SUFFIX_CODE = sub_t2.SUFFIX_CO"& _ 
                "DE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              sub_t1.LOT_NO = sub_t2.LO"& _ 
                "T_NO AND sub_t1.UNIT = sub_t2.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (sub_t2.MO"& _ 
                "DEL_YEAR IS NULL) AND (sub_t2.SUFFIX_CODE IS NULL) AND (sub_t2.LOT_NO IS NULL) A"& _ 
                "ND (sub_t2.UNIT IS NULL)) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AS t1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          T_PRODUCTION_DAT AS prodDAT ON t1.MODEL_YEAR = prodDAT.MODEL_YEAR AND "& _ 
                "t1.SUFFIX_CODE = prodDAT.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      t1.LOT_NO = pro"& _ 
                "dDAT.LOT_NO AND t1.UNIT = prodDAT.UNIT INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_SKIT_"& _ 
                "MST AS sktMST ON prodDAT.MODEL_YEAR = sktMST.MODEL_YEAR AND prodDAT.SUFFIX_CODE "& _ 
                "= sktMST.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      prodDAT.LOT_NO = sktMST.LOT_NO "& _ 
                "AND prodDAT.UNIT = sktMST.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY prodDAT.PRODUCTION_DATE, prodDAT.ON_TIM"& _ 
                "E"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtFINISHING_LINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtFINISHING_LINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtFINISHING_LINEDataTable = New dsPAINT.dtFINISHING_LINEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taMESSAGE_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtMESSAGE_MST"
            tableMapping.ColumnMappings.Add("LOG_CODE", "LOG_CODE")
            tableMapping.ColumnMappings.Add("LOG_MESSAGE", "LOG_MESSAGE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_MESSAGE_MST] WHERE (([LOG_CODE] = @Original_LOG_CODE) AND ([LOG_ME"& _ 
                "SSAGE] = @Original_LOG_MESSAGE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_MESSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_MESSAGE_MST] ([LOG_CODE], [LOG_MESSAGE]) VALUES (@LOG_CODE, @LOG_M"& _ 
                "ESSAGE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOG_CODE, LOG_MESSAGE FROM T_MESSAGE_MST WHERE (LOG_CODE = @LOG"& _ 
                "_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_MESSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_MESSAGE_MST] SET [LOG_CODE] = @LOG_CODE, [LOG_MESSAGE] = @LOG_MESSAGE W"& _ 
                "HERE (([LOG_CODE] = @Original_LOG_CODE) AND ([LOG_MESSAGE] = @Original_LOG_MESSA"& _ 
                "GE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOG_CODE, LOG_MESSAGE FROM T_MESSAGE_MST WHERE (LOG_CODE = @LOG_CO"& _ 
                "DE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_MESSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_MESSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     T_MESSAGE_MST.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_MESSAGE_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsPAINT.dtMESSAGE_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsPAINT.dtMESSAGE_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtMESSAGE_MSTDataTable = New dsPAINT.dtMESSAGE_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsPAINT.dtMESSAGE_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsPAINT) As Integer
            Return Me.Adapter.Update(dataSet, "dtMESSAGE_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LOG_CODE As String, ByVal Original_LOG_MESSAGE As String) As Integer
            If (Original_LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOG_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LOG_CODE,String)
            End If
            If (Original_LOG_MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOG_MESSAGE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LOG_MESSAGE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LOG_CODE As String, ByVal LOG_MESSAGE As String) As Integer
            If (LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOG_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LOG_CODE,String)
            End If
            If (LOG_MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOG_MESSAGE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LOG_MESSAGE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LOG_CODE As String, ByVal LOG_MESSAGE As String, ByVal Original_LOG_CODE As String, ByVal Original_LOG_MESSAGE As String) As Integer
            If (LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOG_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LOG_CODE,String)
            End If
            If (LOG_MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOG_MESSAGE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LOG_MESSAGE,String)
            End If
            If (Original_LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOG_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_LOG_CODE,String)
            End If
            If (Original_LOG_MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOG_MESSAGE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_LOG_MESSAGE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LOG_MESSAGE As String, ByVal Original_LOG_CODE As String, ByVal Original_LOG_MESSAGE As String) As Integer
            Return Me.Update(Original_LOG_CODE, LOG_MESSAGE, Original_LOG_CODE, Original_LOG_MESSAGE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPlcStatusTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPlcStatus"
            tableMapping.ColumnMappings.Add("PROCESS_NAME", "PROCESS_NAME")
            tableMapping.ColumnMappings.Add("PROCESS_TIME", "PROCESS_TIME")
            tableMapping.ColumnMappings.Add("PROCESS_TYPE", "PROCESS_TYPE")
            tableMapping.ColumnMappings.Add("ENTRANCE_FLAG", "ENTRANCE_FLAG")
            tableMapping.ColumnMappings.Add("PROCESS_CODE", "PROCESS_CODE")
            tableMapping.ColumnMappings.Add("STAGE_CODE", "STAGE_CODE")
            tableMapping.ColumnMappings.Add("CUR_STATUS", "CUR_STATUS")
            tableMapping.ColumnMappings.Add("LASTEST_MSG", "LASTEST_MSG")
            tableMapping.ColumnMappings.Add("STRING_PROCESS_NO", "STRING_PROCESS_NO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.psis_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     T_PROCESS_MST.PROCESS_NAME, T_PROCESS_MST.PROCESS_TIME, T_PROCESS_MST."& _ 
                "PROCESS_TYPE, CONVERT(VARCHAR,T_PROCESS_MST.PROCESS_NO) as STRING_PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      T_PROCESS_MST.ENTRANCE_FLAG, T_PROCESS_MST.PROCESS_CODE, T"& _ 
                "_PLC_MST.STAGE_CODE, '' AS CUR_STATUS, '' AS LASTEST_MSG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS"& _ 
                "_MST INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_PLC_MST ON T_PROCESS_MST.PROCESS_NO = T"& _ 
                "_PLC_MST.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (T_PLC_MST.PLC_ONLINE_FLAG = 'TRUE')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY T_"& _ 
                "PROCESS_MST.PROCESS_TYPE, T_PROCESS_MST.PROCESS_CODE, T_PLC_MST.STAGE_CODE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillAllStageCode(ByVal dataTable As dsPAINT.dtPlcStatusDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataAllStageCode() As dsPAINT.dtPlcStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsPAINT.dtPlcStatusDataTable = New dsPAINT.dtPlcStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPBRPassResult
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPBRPassResult"
            tableMapping.ColumnMappings.Add("PRODUCTION_DATE", "PRODUCTION_DATE")
            tableMapping.ColumnMappings.Add("ON_TIME", "ON_TIME")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("LOT_ID", "LOT_ID")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("BLOCK_MODEL", "BLOCK_MODEL")
            tableMapping.ColumnMappings.Add("BLOCK_SEQ", "BLOCK_SEQ")
            tableMapping.ColumnMappings.Add("IMPORT_CODE", "IMPORT_CODE")
            tableMapping.ColumnMappings.Add("GA_SHOP", "GA_SHOP")
            tableMapping.ColumnMappings.Add("BLANK_COL", "BLANK_COL")
            tableMapping.ColumnMappings.Add("PBR_ON", "PBR_ON")
            tableMapping.ColumnMappings.Add("PBR_OFF", "PBR_OFF")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Common.My.MySettings.Default.psis_developmentConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TOP (@block) PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR + S"& _ 
                "UFFIX_CODE AS MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BLO"& _ 
                "CK_SEQ, IMPORT_CODE, GA_SHOP, PBR_ON, PBR_OFF, BLANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT  "& _ 
                "   PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR, SUFFIX_CODE, LOT_NO, U"& _ 
                "NIT, BLOCK_MODEL, BLOCK_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              IMP"& _ 
                "ORT_CODE, GA_SHOP, PBR_ON, PBR_OFF, BLANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM      "& _ 
                "    (SELECT     PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR, SUFFIX_CO"& _ 
                "DE, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    "& _ 
                "                                  IMPORT_CODE, GA_SHOP, PBR_ON, PBR_OFF, BLANK_C"& _ 
                "OL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               FROM          (SELECT     PRO"& _ 
                "DUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, B"& _ 
                "LOCK_MODEL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                  "& _ 
                "                            BLOCK_SEQ, IMPORT_CODE, GA_SHOP, PBR_ON, PBR_OFF, BL"& _ 
                "ANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                       "& _ 
                "FROM          (SELECT     prodDat.PRODUCTION_DATE, prodDat.ON_TIME, sktMst.SKIT_"& _ 
                "NO, prodDat.LOT_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                          "& _ 
                "                                                            prodDat.MODEL_YEAR, "& _ 
                "prodDat.SUFFIX_CODE, prodDat.LOT_NO, prodDat.UNIT, prodDat.BLOCK_MODEL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                                                                "& _ 
                "                                prodDat.BLOCK_SEQ, prodDat.IMPORT_CODE, prodDat."& _ 
                "GA_SHOP, sub_t1.PBR_ON, sub_t2.PBR_OFF, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "                                                                                "& _ 
                "(CASE WHEN prodDat.BLOCK_MODEL = ' ' THEN '1' ELSE '0' END) AS BLANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                                                                "& _ 
                "         FROM          T_PRODUCTION_DAT AS prodDat LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "                                                                                "& _ 
                "                              (SELECT     pntCll.MODEL_YEAR, pntCll.SUFFIX_CODE,"& _ 
                " pntCll.LOT_NO, pntCll.UNIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   CONVERT(varchar, pntCll.PROC"& _ 
                "ESS_RESULT_DATE, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"pntCll.PROCESS_RESULT_DATE, 108) AS PBR_ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                "& _ 
                "                                                                                "& _ 
                "                                   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                           "& _ 
                "                                                                                "& _ 
                " FROM          T_PAINT_CELL AS pntCll INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              "& _ 
                "                                                                                "& _ 
                "                                     T_PROCESS_MST AS procMst ON pntCll.PROCESS_"& _ 
                "NO = procMst.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                       "& _ 
                "                                                                     WHERE      "& _ 
                "(procMst.PROCESS_TYPE = 3) AND (procMst.ENTRANCE_FLAG = 1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "                                                                                "& _ 
                "                                                    (pntCll.PROCESS_RESULT_DATE "& _ 
                "IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                            "& _ 
                "                                                                           (SELE"& _ 
                "CT     MAX(pntCll.PROCESS_RESULT_DATE) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                               "& _ 
                "                                                                                "& _ 
                "                                          FROM          T_PAINT_CELL AS pntCll C"& _ 
                "ROSS JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                     "& _ 
                "                                                                                "& _ 
                "                           T_PROCESS_MST AS procMst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                                                                                "& _ 
                "                                              WHERE      (pntCll.PROCESS_NO = pr"& _ 
                "ocMst.PROCESS_NO) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                        "& _ 
                "                                                                                "& _ 
                "                                        (procMst.PROCESS_TYPE = 3) AND (procMst."& _ 
                "ENTRANCE_FLAG = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                            "& _ 
                "                                                                                "& _ 
                "             GROUP BY pntCll.MODEL_YEAR, pntCll.SUFFIX_CODE, pntCll.LOT_NO, pntC"& _ 
                "ll.UNIT))) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                   "& _ 
                "                                                   AS sub_t1 ON prodDat.MODEL_YE"& _ 
                "AR = sub_t1.MODEL_YEAR AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   "& _ 
                "                                                                   prodDat.SUFFI"& _ 
                "X_CODE = sub_t1.SUFFIX_CODE AND prodDat.LOT_NO = sub_t1.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "                                                                                "& _ 
                "                           prodDat.UNIT = sub_t1.UNIT LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                                                                                "& _ 
                "                                 (SELECT     pntCll.MODEL_YEAR, pntCll.SUFFIX_CO"& _ 
                "DE, pntCll.LOT_NO, pntCll.UNIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   CONVERT(varchar, pntCll.P"& _ 
                "ROCESS_RESULT_DATE, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"pntCll.PROCESS_RESULT_DATE, 108) AS PBR_OFF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                          "& _ 
                "                                                  FROM          T_PAINT_CELL AS "& _ 
                "pntCll INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                             "& _ 
                "                                                                                "& _ 
                "      T_PROCESS_MST AS procMst ON pntCll.PROCESS_NO = procMst.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                                                                "& _ 
                "                                      WHERE      (procMst.PROCESS_TYPE = 3) AND "& _ 
                "(procMst.ENTRANCE_FLAG = 0) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              "& _ 
                "                                                                                "& _ 
                "                     (pntCll.PROCESS_RESULT_DATE IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                                                                                "& _ 
                "                                            (SELECT     MAX(pntCll.PROCESS_RESUL"& _ 
                "T_DATE) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                              "& _ 
                "                                                                                "& _ 
                "           FROM          T_PAINT_CELL AS pntCll CROSS JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "                                                                                "& _ 
                "                                                                            T_PR"& _ 
                "OCESS_MST AS procMst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                          "& _ 
                "                                                                                "& _ 
                "               WHERE      (pntCll.PROCESS_NO = procMst.PROCESS_NO) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                                                                                "& _ 
                "                                                                                "& _ 
                "         (procMst.PROCESS_TYPE = 3) AND (procMst.ENTRANCE_FLAG = 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "                                                                                "& _ 
                "                                                              GROUP BY pntCll.MO"& _ 
                "DEL_YEAR, pntCll.SUFFIX_CODE, pntCll.LOT_NO, pntCll.UNIT))) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "                                                                                "& _ 
                "                    AS sub_t2 ON prodDat.MODEL_YEAR = sub_t2.MODEL_YEAR AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                                                                                "& _ 
                "                                    prodDat.SUFFIX_CODE = sub_t2.SUFFIX_CODE AND"& _ 
                " prodDat.LOT_NO = sub_t2.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                          "& _ 
                "                                                                            prod"& _ 
                "Dat.UNIT = sub_t2.UNIT LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                        "& _ 
                "                                                                              T_"& _ 
                "SKIT_MST AS sktMst ON prodDat.MODEL_YEAR = sktMst.MODEL_YEAR AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                                                                "& _ 
                "                         prodDat.SUFFIX_CODE = sktMst.SUFFIX_CODE AND prodDat.LO"& _ 
                "T_NO = sktMst.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                     "& _ 
                "                                                                 prodDat.UNIT = "& _ 
                "sktMst.UNIT) AS t2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                            "& _ 
                "           WHERE      (BLANK_COL >= @blank_col) AND (NOT (BLANK_COL = @blank_col"& _ 
                ")) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                         "& _ 
                "                     (BLANK_COL >= @blank_col) AND (NOT (BLOCK_MODEL < @block_mo"& _ 
                "del))) AS t3"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               WHERE      (NOT (BL"& _ 
                "ANK_COL = @blank_col)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                     "& _ 
                "                 (BLOCK_MODEL >= @block_model) AND (NOT (BLOCK_MODEL = @block_mo"& _ 
                "del)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                      "& _ 
                "(BLOCK_MODEL >= @block_model) AND (NOT (BLOCK_SEQ < @block_seq))) AS t4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                WHERE      (NOT (BLANK_COL = @blank_col)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "                            (NOT (BLOCK_MODEL = @block_model)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                 (BLOCK_SEQ >= @block_seq) AND (NOT (BLOCK_SEQ ="& _ 
                " @block_seq)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              (BLOCK_SEQ >= @b"& _ 
                "lock_seq) AND (NOT (PRODUCTION_DATE < @prod_date))) AS t5"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (BLANK"& _ 
                "_COL = @blank_col)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (NOT (BLOCK_MODEL = @block_model))"& _ 
                " OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (NOT (BLOCK_SEQ = @block_seq)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    (PRODUCTION_DATE >= @prod_date) AND (NOT (PRODUCTION_DATE = @prod_date)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (PRODUCTION_DATE >= @prod_date) AND (NOT (ON_TIME < @on_t"& _ 
                "ime))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY BLANK_COL, BLOCK_MODEL, BLOCK_SEQ, PRODUCTION_DATE, ON_TIME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@blank_col", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "BLANK_COL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block_model", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block_seq", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prod_date", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCTION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@on_time", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR, SUFFIX_CODE, LO"& _ 
                "T_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, IMPORT_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      GA_SHOP"& _ 
                ", PBR_ON, PBR_OFF, BLANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     prodDat.PRODUCTION_DATE, "& _ 
                "prodDat.ON_TIME, sktMst.SKIT_NO, prodDat.LOT_ID, prodDat.MODEL_YEAR, prodDat.SUF"& _ 
                "FIX_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              prodDat.LOT_NO, prodDa"& _ 
                "t.UNIT, prodDat.BLOCK_MODEL, prodDat.BLOCK_SEQ, prodDat.IMPORT_CODE, prodDat.GA_"& _ 
                "SHOP, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              sub_t1.PBR_ON, sub_t2.PBR_"& _ 
                "OFF, (CASE WHEN prodDat.BLOCK_MODEL = ' ' THEN '1' ELSE '0' END) AS BLANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                      FROM          T_PRODUCTION_DAT AS prodDat LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  (SELECT     pntCll.MODEL_YEAR"& _ 
                ", pntCll.SUFFIX_CODE, pntCll.LOT_NO, pntCll.UNIT, pntCll.PROCESS_RESULT_DATE AS "& _ 
                "PBR_ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                    FROM          T_PAIN"& _ 
                "T_CELL AS pntCll INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   "& _ 
                "                        T_PROCESS_MST AS procMst ON pntCll.PROCESS_NO = procMst."& _ 
                "PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                    WHERE      (proc"& _ 
                "Mst.PROCESS_TYPE = 3) AND (procMst.ENTRANCE_FLAG = 1) AND (pntCll.PROCESS_RESULT"& _ 
                "_DATE IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                      "& _ 
                "         (SELECT     MAX(pntCll.PROCESS_RESULT_DATE) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "                                                                FROM          T_"& _ 
                "PAINT_CELL AS pntCll CROSS JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               "& _ 
                "                                                         T_PROCESS_MST AS procMs"& _ 
                "t"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                             "& _ 
                "    WHERE      (pntCll.PROCESS_NO = procMst.PROCESS_NO) AND (procMst.PROCESS_TYP"& _ 
                "E = 3) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                   "& _ 
                "                                     (procMst.ENTRANCE_FLAG = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "                                                                   GROUP BY pntC"& _ 
                "ll.MODEL_YEAR, pntCll.SUFFIX_CODE, pntCll.LOT_NO, pntCll.UNIT))) AS sub_t1 ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                                              prodDat.MODEL_YEAR = sub_t1.MODEL_"& _ 
                "YEAR AND prodDat.SUFFIX_CODE = sub_t1.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        "& _ 
                "                      prodDat.LOT_NO = sub_t1.LOT_NO AND prodDat.UNIT = sub_t1.U"& _ 
                "NIT LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  (SELECT  "& _ 
                "   pntCll.MODEL_YEAR, pntCll.SUFFIX_CODE, pntCll.LOT_NO, pntCll.UNIT, pntCll.PRO"& _ 
                "CESS_RESULT_DATE AS PBR_OFF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   "& _ 
                " FROM          T_PAINT_CELL AS pntCll INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              "& _ 
                "                                             T_PROCESS_MST AS procMst ON pntCll."& _ 
                "PROCESS_NO = procMst.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               "& _ 
                "     WHERE      (procMst.PROCESS_TYPE = 3) AND (procMst.ENTRANCE_FLAG = 0) AND ("& _ 
                "pntCll.PROCESS_RESULT_DATE IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                 "& _ 
                "                              (SELECT     MAX(pntCll.PROCESS_RESULT_DATE) AS Exp"& _ 
                "r1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                            "& _ 
                "     FROM          T_PAINT_CELL AS pntCll CROSS JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          "& _ 
                "                                                                              T_"& _ 
                "PROCESS_MST AS procMst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                        "& _ 
                "                         WHERE      (pntCll.PROCESS_NO = procMst.PROCESS_NO) AND"& _ 
                " (procMst.PROCESS_TYPE = 3) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              "& _ 
                "                                                          (procMst.ENTRANCE_FLAG"& _ 
                " = 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                         "& _ 
                "        GROUP BY pntCll.MODEL_YEAR, pntCll.SUFFIX_CODE, pntCll.LOT_NO, pntCll.UN"& _ 
                "IT))) AS sub_t2 ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              prodDat.MODEL"& _ 
                "_YEAR = sub_t2.MODEL_YEAR AND prodDat.SUFFIX_CODE = sub_t2.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                                           prodDat.LOT_NO = sub_t2.LOT_NO AND pr"& _ 
                "odDat.UNIT = sub_t2.UNIT LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "        T_SKIT_MST AS sktMst ON prodDat.MODEL_YEAR = sktMst.MODEL_YEAR AND prodD"& _ 
                "at.SUFFIX_CODE = sktMst.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "        prodDat.LOT_NO = sktMst.LOT_NO AND prodDat.UNIT = sktMst.UNIT) AS tab1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "WHERE     (PBR_ON IS NOT NULL)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY PBR_ON DESC, BLANK_COL, BLOCK_MODEL, BL"& _ 
                "OCK_SEQ, PRODUCTION_DATE, ON_TIME"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     TOP (@block) PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR + S"& _ 
                "UFFIX_CODE AS MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BLO"& _ 
                "CK_SEQ, IMPORT_CODE, GA_SHOP, PBR_ON, PBR_OFF, BLANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT  "& _ 
                "   PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR, SUFFIX_CODE, LOT_NO, U"& _ 
                "NIT, BLOCK_MODEL, BLOCK_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              IMP"& _ 
                "ORT_CODE, GA_SHOP, PBR_ON, PBR_OFF, BLANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM      "& _ 
                "    (SELECT     PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR, SUFFIX_CO"& _ 
                "DE, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    "& _ 
                "                                  IMPORT_CODE, GA_SHOP, PBR_ON, PBR_OFF, BLANK_C"& _ 
                "OL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               FROM          (SELECT     PRO"& _ 
                "DUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, B"& _ 
                "LOCK_MODEL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                  "& _ 
                "                            BLOCK_SEQ, IMPORT_CODE, GA_SHOP, PBR_ON, PBR_OFF, BL"& _ 
                "ANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                       "& _ 
                "FROM          (SELECT     prodDat.PRODUCTION_DATE, prodDat.ON_TIME, sktMst.SKIT_"& _ 
                "NO, prodDat.LOT_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                          "& _ 
                "                                                            prodDat.MODEL_YEAR, "& _ 
                "prodDat.SUFFIX_CODE, prodDat.LOT_NO, prodDat.UNIT, prodDat.BLOCK_MODEL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                                                                "& _ 
                "                                prodDat.BLOCK_SEQ, prodDat.IMPORT_CODE, prodDat."& _ 
                "GA_SHOP, sub_t1.PBR_ON, sub_t2.PBR_OFF, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "                                                                                "& _ 
                "(CASE WHEN prodDat.BLOCK_MODEL = ' ' THEN '1' ELSE '0' END) AS BLANK_COL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                                                                "& _ 
                "         FROM          T_PRODUCTION_DAT AS prodDat LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "                                                                                "& _ 
                "                              (SELECT     pntCll.MODEL_YEAR, pntCll.SUFFIX_CODE,"& _ 
                " pntCll.LOT_NO, pntCll.UNIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                                                                                "& _ 
                "                                        "&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   CONVERT(varchar, pntCll.PROCESS_RE"& _ 
                "SULT_DATE, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"pn"& _ 
                "tCll.PROCESS_RESULT_DATE, 108) AS PBR_ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                           "& _ 
                "                                                 FROM          T_PAINT_CELL AS p"& _ 
                "ntCll INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                              "& _ 
                "                                                                                "& _ 
                "     T_PROCESS_MST AS procMst ON pntCll.PROCESS_NO = procMst.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                                                                                "& _ 
                "                                     WHERE      (procMst.PROCESS_TYPE = 3) AND ("& _ 
                "procMst.ENTRANCE_FLAG = 1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                               "& _ 
                "                                                                                "& _ 
                "                    (pntCll.PROCESS_RESULT_DATE IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            "& _ 
                "                                                                                "& _ 
                "                                           (SELECT     MAX(pntCll.PROCESS_RESULT"& _ 
                "_DATE) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                               "& _ 
                "                                                                                "& _ 
                "          FROM          T_PAINT_CELL AS pntCll CROSS JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                                                                                "& _ 
                "                                                                           T_PRO"& _ 
                "CESS_MST AS procMst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                           "& _ 
                "                                                                                "& _ 
                "              WHERE      (pntCll.PROCESS_NO = procMst.PROCESS_NO) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                                                                                "& _ 
                "                                                                                "& _ 
                "        (procMst.PROCESS_TYPE = 3) AND (procMst.ENTRANCE_FLAG = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "                                                                                "& _ 
                "                                                             GROUP BY pntCll.MOD"& _ 
                "EL_YEAR, pntCll.SUFFIX_CODE, pntCll.LOT_NO, pntCll.UNIT))) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "                                                                                "& _ 
                "                   AS sub_t1 ON prodDat.MODEL_YEAR = sub_t1.MODEL_YEAR AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                                                                                "& _ 
                "                                   prodDat.SUFFIX_CODE = sub_t1.SUFFIX_CODE AND "& _ 
                "prodDat.LOT_NO = sub_t1.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                           "& _ 
                "                                                                           prodD"& _ 
                "at.UNIT = sub_t1.UNIT LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                         "& _ 
                "                                                                                "& _ 
                " (SELECT     pntCll.MODEL_YEAR, pntCll.SUFFIX_CODE, pntCll.LOT_NO, pntCll.UNIT, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "                                                                                "& _ 
                "                                                        CONVERT(varchar, pntCll."& _ 
                "PROCESS_RESULT_DATE, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"pntCll.PROCESS_RESULT_DATE, 108) AS PBR_OFF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "                                                                                "& _ 
                "                   FROM          T_PAINT_CELL AS pntCll INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "                                                                                "& _ 
                "                                                       T_PROCESS_MST AS procMst "& _ 
                "ON pntCll.PROCESS_NO = procMst.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                     "& _ 
                "                                                                                "& _ 
                "       WHERE      (procMst.PROCESS_TYPE = 3) AND (procMst.ENTRANCE_FLAG = 0) AND"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                             "& _ 
                "                                                                      (pntCll.PR"& _ 
                "OCESS_RESULT_DATE IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                          "& _ 
                "                                                                                "& _ 
                "             (SELECT     MAX(pntCll.PROCESS_RESULT_DATE) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                                                                "& _ 
                "                                                            FROM          T_PAIN"& _ 
                "T_CELL AS pntCll CROSS JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   "& _ 
                "                                                                                "& _ 
                "                                             T_PROCESS_MST AS procMst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                                                                                "& _ 
                "                                                                WHERE      (pntC"& _ 
                "ll.PROCESS_NO = procMst.PROCESS_NO) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "                                                                                "& _ 
                "                                                          (procMst.PROCESS_TYPE "& _ 
                "= 3) AND (procMst.ENTRANCE_FLAG = 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                          "& _ 
                "                                                                                "& _ 
                "                               GROUP BY pntCll.MODEL_YEAR, pntCll.SUFFIX_CODE, p"& _ 
                "ntCll.LOT_NO, pntCll.UNIT))) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                 "& _ 
                "                                                                     AS sub_t2 O"& _ 
                "N prodDat.MODEL_YEAR = sub_t2.MODEL_YEAR AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                 "& _ 
                "                                                                                "& _ 
                "     prodDat.SUFFIX_CODE = sub_t2.SUFFIX_CODE AND prodDat.LOT_NO = sub_t2.LOT_NO"& _ 
                " AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                         "& _ 
                "                                             prodDat.UNIT = sub_t2.UNIT LEFT OUT"& _ 
                "ER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                       "& _ 
                "                                               T_SKIT_MST AS sktMst ON prodDat.M"& _ 
                "ODEL_YEAR = sktMst.MODEL_YEAR AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                            "& _ 
                "                                                                          prodDa"& _ 
                "t.SUFFIX_CODE = sktMst.SUFFIX_CODE AND prodDat.LOT_NO = sktMst.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                                                                                "& _ 
                "                                  prodDat.UNIT = sktMst.UNIT) AS t2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "                                                            WHERE      (BLANK_CO"& _ 
                "L <= @blank_col) AND (NOT (BLANK_COL = @blank_col)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        "& _ 
                "                                                                      (BLANK_COL"& _ 
                " <= @blank_col) AND (NOT (BLOCK_MODEL > @block_model))) AS t3"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "                              WHERE      (NOT (BLANK_COL = @blank_col)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                                                                  (BLOCK_MODEL <"& _ 
                "= @block_model) AND (NOT (BLOCK_MODEL = @block_model)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                                                 (BLOCK_MODEL <= @block_model) A"& _ 
                "ND (NOT (BLOCK_SEQ > @block_seq))) AS t4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (NOT"& _ 
                " (BLANK_COL = @blank_col)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              (NO"& _ 
                "T (BLOCK_MODEL = @block_model)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                            "& _ 
                "  (BLOCK_SEQ <= @block_seq) AND (NOT (BLOCK_SEQ = @block_seq)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                 (BLOCK_SEQ <= @block_seq) AND (NOT (PRODUCTION_"& _ 
                "DATE > @prod_date))) AS t5"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (BLANK_COL = @blank_col)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               (NOT (BLOCK_MODEL = @block_model)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (NOT"& _ 
                " (BLOCK_SEQ = @block_seq)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (PRODUCTION_DATE <= @prod_d"& _ 
                "ate) AND (NOT (PRODUCTION_DATE = @prod_date)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (PRODUCT"& _ 
                "ION_DATE <= @prod_date) AND (NOT (ON_TIME > @on_time))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY BLANK_COL DESC,"& _ 
                " BLOCK_MODEL DESC, BLOCK_SEQ DESC, PRODUCTION_DATE DESC, ON_TIME DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@blank_col", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "BLANK_COL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block_model", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_MODEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block_seq", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "BLOCK_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@prod_date", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCTION_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@on_time", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsPAINT.dtPBRPassResultDataTable, ByVal block As Integer, ByVal blank_col As Object, ByVal block_model As String, ByVal block_seq As String, ByVal prod_date As String, ByVal on_time As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            If (blank_col Is Nothing) Then
                Throw New Global.System.ArgumentNullException("blank_col")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(blank_col,Object)
            End If
            If (block_model Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(block_model,String)
            End If
            If (block_seq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("block_seq")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(block_seq,String)
            End If
            If (prod_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prod_date")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(prod_date,String)
            End If
            If (on_time Is Nothing) Then
                Throw New Global.System.ArgumentNullException("on_time")
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(on_time,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal block As Integer, ByVal blank_col As Object, ByVal block_model As String, ByVal block_seq As String, ByVal prod_date As String, ByVal on_time As String) As dsPAINT.dtPBRPassResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            If (blank_col Is Nothing) Then
                Throw New Global.System.ArgumentNullException("blank_col")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(blank_col,Object)
            End If
            If (block_model Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(block_model,String)
            End If
            If (block_seq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("block_seq")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(block_seq,String)
            End If
            If (prod_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prod_date")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(prod_date,String)
            End If
            If (on_time Is Nothing) Then
                Throw New Global.System.ArgumentNullException("on_time")
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(on_time,String)
            End If
            Dim dataTable As dsPAINT.dtPBRPassResultDataTable = New dsPAINT.dtPBRPassResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByInnitialPoint(ByVal dataTable As dsPAINT.dtPBRPassResultDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByInnitialPoint() As dsPAINT.dtPBRPassResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsPAINT.dtPBRPassResultDataTable = New dsPAINT.dtPBRPassResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsPAINT.dtPBRPassResultDataTable, ByVal block As Integer, ByVal blank_col As Object, ByVal block_model As String, ByVal block_seq As String, ByVal prod_date As String, ByVal on_time As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            If (blank_col Is Nothing) Then
                Throw New Global.System.ArgumentNullException("blank_col")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(blank_col,Object)
            End If
            If (block_model Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(block_model,String)
            End If
            If (block_seq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("block_seq")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(block_seq,String)
            End If
            If (prod_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prod_date")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(prod_date,String)
            End If
            If (on_time Is Nothing) Then
                Throw New Global.System.ArgumentNullException("on_time")
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(on_time,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal block As Integer, ByVal blank_col As Object, ByVal block_model As String, ByVal block_seq As String, ByVal prod_date As String, ByVal on_time As String) As dsPAINT.dtPBRPassResultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            If (blank_col Is Nothing) Then
                Throw New Global.System.ArgumentNullException("blank_col")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(blank_col,Object)
            End If
            If (block_model Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(block_model,String)
            End If
            If (block_seq Is Nothing) Then
                Throw New Global.System.ArgumentNullException("block_seq")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(block_seq,String)
            End If
            If (prod_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("prod_date")
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(prod_date,String)
            End If
            If (on_time Is Nothing) Then
                Throw New Global.System.ArgumentNullException("on_time")
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(on_time,String)
            End If
            Dim dataTable As dsPAINT.dtPBRPassResultDataTable = New dsPAINT.dtPBRPassResultDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _taMODEL_OPTION_ROW As taMODEL_OPTION_ROW
        
        Private _taSKIT_MST As taSKIT_MST
        
        Private _taWBS_ON As taWBS_ON
        
        Private _taMODEL_OPTION_CELL As taMODEL_OPTION_CELL
        
        Private _taPRODUCTION_DAT As taPRODUCTION_DAT
        
        Private _taOPTION_MST As taOPTION_MST
        
        Private _taPAINT_CELL As taPAINT_CELL
        
        Private _taPROCESS_OPTION_CELL As taPROCESS_OPTION_CELL
        
        Private _taPROCESS_MST As taPROCESS_MST
        
        Private _taPLC_MST As taPLC_MST
        
        Private _taPROCESS_LINKAGE As taPROCESS_LINKAGE
        
        Private _taLOG_DAT As taLOG_DAT
        
        Private _taMESSAGE_MST As taMESSAGE_MST
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taMODEL_OPTION_ROW() As taMODEL_OPTION_ROW
            Get
                Return Me._taMODEL_OPTION_ROW
            End Get
            Set
                Me._taMODEL_OPTION_ROW = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taSKIT_MST() As taSKIT_MST
            Get
                Return Me._taSKIT_MST
            End Get
            Set
                Me._taSKIT_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taWBS_ON() As taWBS_ON
            Get
                Return Me._taWBS_ON
            End Get
            Set
                Me._taWBS_ON = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taMODEL_OPTION_CELL() As taMODEL_OPTION_CELL
            Get
                Return Me._taMODEL_OPTION_CELL
            End Get
            Set
                Me._taMODEL_OPTION_CELL = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPRODUCTION_DAT() As taPRODUCTION_DAT
            Get
                Return Me._taPRODUCTION_DAT
            End Get
            Set
                Me._taPRODUCTION_DAT = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taOPTION_MST() As taOPTION_MST
            Get
                Return Me._taOPTION_MST
            End Get
            Set
                Me._taOPTION_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPAINT_CELL() As taPAINT_CELL
            Get
                Return Me._taPAINT_CELL
            End Get
            Set
                Me._taPAINT_CELL = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPROCESS_OPTION_CELL() As taPROCESS_OPTION_CELL
            Get
                Return Me._taPROCESS_OPTION_CELL
            End Get
            Set
                Me._taPROCESS_OPTION_CELL = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPROCESS_MST() As taPROCESS_MST
            Get
                Return Me._taPROCESS_MST
            End Get
            Set
                Me._taPROCESS_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPLC_MST() As taPLC_MST
            Get
                Return Me._taPLC_MST
            End Get
            Set
                Me._taPLC_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPROCESS_LINKAGE() As taPROCESS_LINKAGE
            Get
                Return Me._taPROCESS_LINKAGE
            End Get
            Set
                Me._taPROCESS_LINKAGE = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taLOG_DAT() As taLOG_DAT
            Get
                Return Me._taLOG_DAT
            End Get
            Set
                Me._taLOG_DAT = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taMESSAGE_MST() As taMESSAGE_MST
            Get
                Return Me._taMESSAGE_MST
            End Get
            Set
                Me._taMESSAGE_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._taMODEL_OPTION_ROW) Is Nothing)  _
                            AndAlso (Not (Me._taMODEL_OPTION_ROW.Connection) Is Nothing)) Then
                    Return Me._taMODEL_OPTION_ROW.Connection
                End If
                If ((Not (Me._taSKIT_MST) Is Nothing)  _
                            AndAlso (Not (Me._taSKIT_MST.Connection) Is Nothing)) Then
                    Return Me._taSKIT_MST.Connection
                End If
                If ((Not (Me._taWBS_ON) Is Nothing)  _
                            AndAlso (Not (Me._taWBS_ON.Connection) Is Nothing)) Then
                    Return Me._taWBS_ON.Connection
                End If
                If ((Not (Me._taMODEL_OPTION_CELL) Is Nothing)  _
                            AndAlso (Not (Me._taMODEL_OPTION_CELL.Connection) Is Nothing)) Then
                    Return Me._taMODEL_OPTION_CELL.Connection
                End If
                If ((Not (Me._taPRODUCTION_DAT) Is Nothing)  _
                            AndAlso (Not (Me._taPRODUCTION_DAT.Connection) Is Nothing)) Then
                    Return Me._taPRODUCTION_DAT.Connection
                End If
                If ((Not (Me._taOPTION_MST) Is Nothing)  _
                            AndAlso (Not (Me._taOPTION_MST.Connection) Is Nothing)) Then
                    Return Me._taOPTION_MST.Connection
                End If
                If ((Not (Me._taPAINT_CELL) Is Nothing)  _
                            AndAlso (Not (Me._taPAINT_CELL.Connection) Is Nothing)) Then
                    Return Me._taPAINT_CELL.Connection
                End If
                If ((Not (Me._taPROCESS_OPTION_CELL) Is Nothing)  _
                            AndAlso (Not (Me._taPROCESS_OPTION_CELL.Connection) Is Nothing)) Then
                    Return Me._taPROCESS_OPTION_CELL.Connection
                End If
                If ((Not (Me._taPROCESS_MST) Is Nothing)  _
                            AndAlso (Not (Me._taPROCESS_MST.Connection) Is Nothing)) Then
                    Return Me._taPROCESS_MST.Connection
                End If
                If ((Not (Me._taPLC_MST) Is Nothing)  _
                            AndAlso (Not (Me._taPLC_MST.Connection) Is Nothing)) Then
                    Return Me._taPLC_MST.Connection
                End If
                If ((Not (Me._taPROCESS_LINKAGE) Is Nothing)  _
                            AndAlso (Not (Me._taPROCESS_LINKAGE.Connection) Is Nothing)) Then
                    Return Me._taPROCESS_LINKAGE.Connection
                End If
                If ((Not (Me._taLOG_DAT) Is Nothing)  _
                            AndAlso (Not (Me._taLOG_DAT.Connection) Is Nothing)) Then
                    Return Me._taLOG_DAT.Connection
                End If
                If ((Not (Me._taMESSAGE_MST) Is Nothing)  _
                            AndAlso (Not (Me._taMESSAGE_MST.Connection) Is Nothing)) Then
                    Return Me._taMESSAGE_MST.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taSKIT_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taWBS_ON) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPRODUCTION_DAT) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taOPTION_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPAINT_CELL) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPROCESS_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPLC_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taLOG_DAT) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taMESSAGE_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsPAINT, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._taOPTION_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtOPTION_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taOPTION_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPRODUCTION_DAT) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPRODUCTION_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPRODUCTION_DAT.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPROCESS_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPROCESS_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_ROW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_ROW.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taMESSAGE_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtMESSAGE_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taMESSAGE_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_LINKAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPROCESS_LINKAGE.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taLOG_DAT) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtLOG_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taLOG_DAT.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPLC_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPLC_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPLC_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_CELL.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taSKIT_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtSKIT_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taSKIT_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taWBS_ON) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtWBS_ON.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taWBS_ON.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPROCESS_OPTION_CELL.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPAINT_CELL) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPAINT_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPAINT_CELL.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsPAINT, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._taOPTION_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtOPTION_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taOPTION_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPRODUCTION_DAT) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPRODUCTION_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPRODUCTION_DAT.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPROCESS_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPROCESS_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_ROW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_ROW.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taMESSAGE_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtMESSAGE_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taMESSAGE_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_LINKAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPROCESS_LINKAGE.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taLOG_DAT) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtLOG_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taLOG_DAT.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPLC_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPLC_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPLC_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_CELL.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taSKIT_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtSKIT_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taSKIT_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taWBS_ON) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtWBS_ON.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taWBS_ON.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPROCESS_OPTION_CELL.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPAINT_CELL) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPAINT_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPAINT_CELL.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsPAINT, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._taPAINT_CELL) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPAINT_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPAINT_CELL.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPROCESS_OPTION_CELL.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taWBS_ON) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtWBS_ON.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taWBS_ON.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taSKIT_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtSKIT_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taSKIT_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_CELL.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPLC_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPLC_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPLC_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taLOG_DAT) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtLOG_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taLOG_DAT.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_LINKAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPROCESS_LINKAGE.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taMESSAGE_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtMESSAGE_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taMESSAGE_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_ROW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_ROW.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPROCESS_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPROCESS_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPRODUCTION_DAT) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPRODUCTION_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPRODUCTION_DAT.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taOPTION_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtOPTION_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taOPTION_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsPAINT) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._taMODEL_OPTION_ROW) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taMODEL_OPTION_ROW.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taSKIT_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taSKIT_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taWBS_ON) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taWBS_ON.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taMODEL_OPTION_CELL) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taMODEL_OPTION_CELL.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPRODUCTION_DAT) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPRODUCTION_DAT.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taOPTION_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taOPTION_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPAINT_CELL) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPAINT_CELL.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPROCESS_OPTION_CELL) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPROCESS_OPTION_CELL.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPROCESS_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPROCESS_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPLC_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPLC_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPROCESS_LINKAGE) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPROCESS_LINKAGE.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taLOG_DAT) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taLOG_DAT.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taMESSAGE_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taMESSAGE_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                    revertConnections.Add(Me._taMODEL_OPTION_ROW, Me._taMODEL_OPTION_ROW.Connection)
                    Me._taMODEL_OPTION_ROW.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taMODEL_OPTION_ROW.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taMODEL_OPTION_ROW.Adapter.AcceptChangesDuringUpdate Then
                        Me._taMODEL_OPTION_ROW.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taMODEL_OPTION_ROW.Adapter)
                    End If
                End If
                If (Not (Me._taSKIT_MST) Is Nothing) Then
                    revertConnections.Add(Me._taSKIT_MST, Me._taSKIT_MST.Connection)
                    Me._taSKIT_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taSKIT_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taSKIT_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taSKIT_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taSKIT_MST.Adapter)
                    End If
                End If
                If (Not (Me._taWBS_ON) Is Nothing) Then
                    revertConnections.Add(Me._taWBS_ON, Me._taWBS_ON.Connection)
                    Me._taWBS_ON.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taWBS_ON.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taWBS_ON.Adapter.AcceptChangesDuringUpdate Then
                        Me._taWBS_ON.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taWBS_ON.Adapter)
                    End If
                End If
                If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                    revertConnections.Add(Me._taMODEL_OPTION_CELL, Me._taMODEL_OPTION_CELL.Connection)
                    Me._taMODEL_OPTION_CELL.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taMODEL_OPTION_CELL.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taMODEL_OPTION_CELL.Adapter.AcceptChangesDuringUpdate Then
                        Me._taMODEL_OPTION_CELL.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taMODEL_OPTION_CELL.Adapter)
                    End If
                End If
                If (Not (Me._taPRODUCTION_DAT) Is Nothing) Then
                    revertConnections.Add(Me._taPRODUCTION_DAT, Me._taPRODUCTION_DAT.Connection)
                    Me._taPRODUCTION_DAT.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPRODUCTION_DAT.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPRODUCTION_DAT.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPRODUCTION_DAT.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPRODUCTION_DAT.Adapter)
                    End If
                End If
                If (Not (Me._taOPTION_MST) Is Nothing) Then
                    revertConnections.Add(Me._taOPTION_MST, Me._taOPTION_MST.Connection)
                    Me._taOPTION_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taOPTION_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taOPTION_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taOPTION_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taOPTION_MST.Adapter)
                    End If
                End If
                If (Not (Me._taPAINT_CELL) Is Nothing) Then
                    revertConnections.Add(Me._taPAINT_CELL, Me._taPAINT_CELL.Connection)
                    Me._taPAINT_CELL.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPAINT_CELL.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPAINT_CELL.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPAINT_CELL.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPAINT_CELL.Adapter)
                    End If
                End If
                If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                    revertConnections.Add(Me._taPROCESS_OPTION_CELL, Me._taPROCESS_OPTION_CELL.Connection)
                    Me._taPROCESS_OPTION_CELL.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_OPTION_CELL.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPROCESS_OPTION_CELL.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPROCESS_OPTION_CELL.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPROCESS_OPTION_CELL.Adapter)
                    End If
                End If
                If (Not (Me._taPROCESS_MST) Is Nothing) Then
                    revertConnections.Add(Me._taPROCESS_MST, Me._taPROCESS_MST.Connection)
                    Me._taPROCESS_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPROCESS_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPROCESS_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPROCESS_MST.Adapter)
                    End If
                End If
                If (Not (Me._taPLC_MST) Is Nothing) Then
                    revertConnections.Add(Me._taPLC_MST, Me._taPLC_MST.Connection)
                    Me._taPLC_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPLC_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPLC_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPLC_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPLC_MST.Adapter)
                    End If
                End If
                If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                    revertConnections.Add(Me._taPROCESS_LINKAGE, Me._taPROCESS_LINKAGE.Connection)
                    Me._taPROCESS_LINKAGE.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_LINKAGE.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPROCESS_LINKAGE.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPROCESS_LINKAGE.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPROCESS_LINKAGE.Adapter)
                    End If
                End If
                If (Not (Me._taLOG_DAT) Is Nothing) Then
                    revertConnections.Add(Me._taLOG_DAT, Me._taLOG_DAT.Connection)
                    Me._taLOG_DAT.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taLOG_DAT.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taLOG_DAT.Adapter.AcceptChangesDuringUpdate Then
                        Me._taLOG_DAT.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taLOG_DAT.Adapter)
                    End If
                End If
                If (Not (Me._taMESSAGE_MST) Is Nothing) Then
                    revertConnections.Add(Me._taMESSAGE_MST, Me._taMESSAGE_MST.Connection)
                    Me._taMESSAGE_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taMESSAGE_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taMESSAGE_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taMESSAGE_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taMESSAGE_MST.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                    Me._taMODEL_OPTION_ROW.Connection = CType(revertConnections(Me._taMODEL_OPTION_ROW),Global.System.Data.SqlClient.SqlConnection)
                    Me._taMODEL_OPTION_ROW.Transaction = Nothing
                End If
                If (Not (Me._taSKIT_MST) Is Nothing) Then
                    Me._taSKIT_MST.Connection = CType(revertConnections(Me._taSKIT_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taSKIT_MST.Transaction = Nothing
                End If
                If (Not (Me._taWBS_ON) Is Nothing) Then
                    Me._taWBS_ON.Connection = CType(revertConnections(Me._taWBS_ON),Global.System.Data.SqlClient.SqlConnection)
                    Me._taWBS_ON.Transaction = Nothing
                End If
                If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                    Me._taMODEL_OPTION_CELL.Connection = CType(revertConnections(Me._taMODEL_OPTION_CELL),Global.System.Data.SqlClient.SqlConnection)
                    Me._taMODEL_OPTION_CELL.Transaction = Nothing
                End If
                If (Not (Me._taPRODUCTION_DAT) Is Nothing) Then
                    Me._taPRODUCTION_DAT.Connection = CType(revertConnections(Me._taPRODUCTION_DAT),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPRODUCTION_DAT.Transaction = Nothing
                End If
                If (Not (Me._taOPTION_MST) Is Nothing) Then
                    Me._taOPTION_MST.Connection = CType(revertConnections(Me._taOPTION_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taOPTION_MST.Transaction = Nothing
                End If
                If (Not (Me._taPAINT_CELL) Is Nothing) Then
                    Me._taPAINT_CELL.Connection = CType(revertConnections(Me._taPAINT_CELL),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPAINT_CELL.Transaction = Nothing
                End If
                If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                    Me._taPROCESS_OPTION_CELL.Connection = CType(revertConnections(Me._taPROCESS_OPTION_CELL),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_OPTION_CELL.Transaction = Nothing
                End If
                If (Not (Me._taPROCESS_MST) Is Nothing) Then
                    Me._taPROCESS_MST.Connection = CType(revertConnections(Me._taPROCESS_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_MST.Transaction = Nothing
                End If
                If (Not (Me._taPLC_MST) Is Nothing) Then
                    Me._taPLC_MST.Connection = CType(revertConnections(Me._taPLC_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPLC_MST.Transaction = Nothing
                End If
                If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                    Me._taPROCESS_LINKAGE.Connection = CType(revertConnections(Me._taPROCESS_LINKAGE),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_LINKAGE.Transaction = Nothing
                End If
                If (Not (Me._taLOG_DAT) Is Nothing) Then
                    Me._taLOG_DAT.Connection = CType(revertConnections(Me._taLOG_DAT),Global.System.Data.SqlClient.SqlConnection)
                    Me._taLOG_DAT.Transaction = Nothing
                End If
                If (Not (Me._taMESSAGE_MST) Is Nothing) Then
                    Me._taMESSAGE_MST.Connection = CType(revertConnections(Me._taMESSAGE_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taMESSAGE_MST.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
