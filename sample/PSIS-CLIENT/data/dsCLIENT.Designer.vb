'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsCLIENT"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsCLIENT
    Inherits Global.System.Data.DataSet
    
    Private tabledtPROCESS_MST As dtPROCESS_MSTDataTable
    
    Private tabledtPRODUCTION_DAT As dtPRODUCTION_DATDataTable
    
    Private tabledtLANE_MST As dtLANE_MSTDataTable
    
    Private tabledtLOG_DAT As dtLOG_DATDataTable
    
    Private tabledtPAINT_CELL As dtPAINT_CELLDataTable
    
    Private tabledtPaintProgress As dtPaintProgressDataTable
    
    Private tabledtPaintShop As dtPaintShopDataTable
    
    Private tabledtWBS_ON As dtWBS_ONDataTable
    
    Private tabledtSKIT_MST As dtSKIT_MSTDataTable
    
    Private tabledtOPTION_MST As dtOPTION_MSTDataTable
    
    Private tabledtMODEL_OPTION_ROW As dtMODEL_OPTION_ROWDataTable
    
    Private tabledtMODEL_OPTION_CELL As dtMODEL_OPTION_CELLDataTable
    
    Private tabledtOPT_MST_COL_LENGTH As dtOPT_MST_COL_LENGTHDataTable
    
    Private tabledtPROCESS_OPTION_CELL As dtPROCESS_OPTION_CELLDataTable
    
    Private tabledtInstructionData As dtInstructionDataDataTable
    
    Private tabledtPROCESS_LINKAGE As dtPROCESS_LINKAGEDataTable
    
    Private tabledtPLC_MST As dtPLC_MSTDataTable
    
    Private tabledtPROCESS_GROUP_MST As dtPROCESS_GROUP_MSTDataTable
    
    Private relationFK_T_PAINT_CELL_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT As Global.System.Data.DataRelation
    
    Private relationFK_T_WBS_ON_LANE_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_WBS_ON_SKIT_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT As Global.System.Data.DataRelation
    
    Private relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID As Global.System.Data.DataRelation
    
    Private relationFK_T_MODEL_OPTION_CELL_OPTION_ID As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_OPTION_CELL_OPTION_ID As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_OPTION_CELL_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1 As Global.System.Data.DataRelation
    
    Private relationFK_T_MODEL_OPTION_CELL_OPTION_ID1 As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_LINKAGE_TO_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_PLC_MST_PROCESS_NO As Global.System.Data.DataRelation
    
    Private relationFK_T_PROCESS_MST_PROCESS_GROUP_ID As Global.System.Data.DataRelation
    
    Private relationdtPROCESS_MST_dtLOG_DAT As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtPROCESS_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_MSTDataTable(ds.Tables("dtPROCESS_MST")))
            End If
            If (Not (ds.Tables("dtPRODUCTION_DAT")) Is Nothing) Then
                MyBase.Tables.Add(New dtPRODUCTION_DATDataTable(ds.Tables("dtPRODUCTION_DAT")))
            End If
            If (Not (ds.Tables("dtLANE_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtLANE_MSTDataTable(ds.Tables("dtLANE_MST")))
            End If
            If (Not (ds.Tables("dtLOG_DAT")) Is Nothing) Then
                MyBase.Tables.Add(New dtLOG_DATDataTable(ds.Tables("dtLOG_DAT")))
            End If
            If (Not (ds.Tables("dtPAINT_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtPAINT_CELLDataTable(ds.Tables("dtPAINT_CELL")))
            End If
            If (Not (ds.Tables("dtPaintProgress")) Is Nothing) Then
                MyBase.Tables.Add(New dtPaintProgressDataTable(ds.Tables("dtPaintProgress")))
            End If
            If (Not (ds.Tables("dtPaintShop")) Is Nothing) Then
                MyBase.Tables.Add(New dtPaintShopDataTable(ds.Tables("dtPaintShop")))
            End If
            If (Not (ds.Tables("dtWBS_ON")) Is Nothing) Then
                MyBase.Tables.Add(New dtWBS_ONDataTable(ds.Tables("dtWBS_ON")))
            End If
            If (Not (ds.Tables("dtSKIT_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtSKIT_MSTDataTable(ds.Tables("dtSKIT_MST")))
            End If
            If (Not (ds.Tables("dtOPTION_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtOPTION_MSTDataTable(ds.Tables("dtOPTION_MST")))
            End If
            If (Not (ds.Tables("dtMODEL_OPTION_ROW")) Is Nothing) Then
                MyBase.Tables.Add(New dtMODEL_OPTION_ROWDataTable(ds.Tables("dtMODEL_OPTION_ROW")))
            End If
            If (Not (ds.Tables("dtMODEL_OPTION_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtMODEL_OPTION_CELLDataTable(ds.Tables("dtMODEL_OPTION_CELL")))
            End If
            If (Not (ds.Tables("dtOPT_MST_COL_LENGTH")) Is Nothing) Then
                MyBase.Tables.Add(New dtOPT_MST_COL_LENGTHDataTable(ds.Tables("dtOPT_MST_COL_LENGTH")))
            End If
            If (Not (ds.Tables("dtPROCESS_OPTION_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_OPTION_CELLDataTable(ds.Tables("dtPROCESS_OPTION_CELL")))
            End If
            If (Not (ds.Tables("dtInstructionData")) Is Nothing) Then
                MyBase.Tables.Add(New dtInstructionDataDataTable(ds.Tables("dtInstructionData")))
            End If
            If (Not (ds.Tables("dtPROCESS_LINKAGE")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_LINKAGEDataTable(ds.Tables("dtPROCESS_LINKAGE")))
            End If
            If (Not (ds.Tables("dtPLC_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPLC_MSTDataTable(ds.Tables("dtPLC_MST")))
            End If
            If (Not (ds.Tables("dtPROCESS_GROUP_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_GROUP_MSTDataTable(ds.Tables("dtPROCESS_GROUP_MST")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPROCESS_MST() As dtPROCESS_MSTDataTable
        Get
            Return Me.tabledtPROCESS_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPRODUCTION_DAT() As dtPRODUCTION_DATDataTable
        Get
            Return Me.tabledtPRODUCTION_DAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtLANE_MST() As dtLANE_MSTDataTable
        Get
            Return Me.tabledtLANE_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtLOG_DAT() As dtLOG_DATDataTable
        Get
            Return Me.tabledtLOG_DAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPAINT_CELL() As dtPAINT_CELLDataTable
        Get
            Return Me.tabledtPAINT_CELL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPaintProgress() As dtPaintProgressDataTable
        Get
            Return Me.tabledtPaintProgress
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPaintShop() As dtPaintShopDataTable
        Get
            Return Me.tabledtPaintShop
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtWBS_ON() As dtWBS_ONDataTable
        Get
            Return Me.tabledtWBS_ON
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtSKIT_MST() As dtSKIT_MSTDataTable
        Get
            Return Me.tabledtSKIT_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtOPTION_MST() As dtOPTION_MSTDataTable
        Get
            Return Me.tabledtOPTION_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtMODEL_OPTION_ROW() As dtMODEL_OPTION_ROWDataTable
        Get
            Return Me.tabledtMODEL_OPTION_ROW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtMODEL_OPTION_CELL() As dtMODEL_OPTION_CELLDataTable
        Get
            Return Me.tabledtMODEL_OPTION_CELL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtOPT_MST_COL_LENGTH() As dtOPT_MST_COL_LENGTHDataTable
        Get
            Return Me.tabledtOPT_MST_COL_LENGTH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPROCESS_OPTION_CELL() As dtPROCESS_OPTION_CELLDataTable
        Get
            Return Me.tabledtPROCESS_OPTION_CELL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtInstructionData() As dtInstructionDataDataTable
        Get
            Return Me.tabledtInstructionData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPROCESS_LINKAGE() As dtPROCESS_LINKAGEDataTable
        Get
            Return Me.tabledtPROCESS_LINKAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPLC_MST() As dtPLC_MSTDataTable
        Get
            Return Me.tabledtPLC_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPROCESS_GROUP_MST() As dtPROCESS_GROUP_MSTDataTable
        Get
            Return Me.tabledtPROCESS_GROUP_MST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsCLIENT = CType(MyBase.Clone,dsCLIENT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtPROCESS_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_MSTDataTable(ds.Tables("dtPROCESS_MST")))
            End If
            If (Not (ds.Tables("dtPRODUCTION_DAT")) Is Nothing) Then
                MyBase.Tables.Add(New dtPRODUCTION_DATDataTable(ds.Tables("dtPRODUCTION_DAT")))
            End If
            If (Not (ds.Tables("dtLANE_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtLANE_MSTDataTable(ds.Tables("dtLANE_MST")))
            End If
            If (Not (ds.Tables("dtLOG_DAT")) Is Nothing) Then
                MyBase.Tables.Add(New dtLOG_DATDataTable(ds.Tables("dtLOG_DAT")))
            End If
            If (Not (ds.Tables("dtPAINT_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtPAINT_CELLDataTable(ds.Tables("dtPAINT_CELL")))
            End If
            If (Not (ds.Tables("dtPaintProgress")) Is Nothing) Then
                MyBase.Tables.Add(New dtPaintProgressDataTable(ds.Tables("dtPaintProgress")))
            End If
            If (Not (ds.Tables("dtPaintShop")) Is Nothing) Then
                MyBase.Tables.Add(New dtPaintShopDataTable(ds.Tables("dtPaintShop")))
            End If
            If (Not (ds.Tables("dtWBS_ON")) Is Nothing) Then
                MyBase.Tables.Add(New dtWBS_ONDataTable(ds.Tables("dtWBS_ON")))
            End If
            If (Not (ds.Tables("dtSKIT_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtSKIT_MSTDataTable(ds.Tables("dtSKIT_MST")))
            End If
            If (Not (ds.Tables("dtOPTION_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtOPTION_MSTDataTable(ds.Tables("dtOPTION_MST")))
            End If
            If (Not (ds.Tables("dtMODEL_OPTION_ROW")) Is Nothing) Then
                MyBase.Tables.Add(New dtMODEL_OPTION_ROWDataTable(ds.Tables("dtMODEL_OPTION_ROW")))
            End If
            If (Not (ds.Tables("dtMODEL_OPTION_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtMODEL_OPTION_CELLDataTable(ds.Tables("dtMODEL_OPTION_CELL")))
            End If
            If (Not (ds.Tables("dtOPT_MST_COL_LENGTH")) Is Nothing) Then
                MyBase.Tables.Add(New dtOPT_MST_COL_LENGTHDataTable(ds.Tables("dtOPT_MST_COL_LENGTH")))
            End If
            If (Not (ds.Tables("dtPROCESS_OPTION_CELL")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_OPTION_CELLDataTable(ds.Tables("dtPROCESS_OPTION_CELL")))
            End If
            If (Not (ds.Tables("dtInstructionData")) Is Nothing) Then
                MyBase.Tables.Add(New dtInstructionDataDataTable(ds.Tables("dtInstructionData")))
            End If
            If (Not (ds.Tables("dtPROCESS_LINKAGE")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_LINKAGEDataTable(ds.Tables("dtPROCESS_LINKAGE")))
            End If
            If (Not (ds.Tables("dtPLC_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPLC_MSTDataTable(ds.Tables("dtPLC_MST")))
            End If
            If (Not (ds.Tables("dtPROCESS_GROUP_MST")) Is Nothing) Then
                MyBase.Tables.Add(New dtPROCESS_GROUP_MSTDataTable(ds.Tables("dtPROCESS_GROUP_MST")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtPROCESS_MST = CType(MyBase.Tables("dtPROCESS_MST"),dtPROCESS_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPROCESS_MST) Is Nothing) Then
                Me.tabledtPROCESS_MST.InitVars
            End If
        End If
        Me.tabledtPRODUCTION_DAT = CType(MyBase.Tables("dtPRODUCTION_DAT"),dtPRODUCTION_DATDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPRODUCTION_DAT) Is Nothing) Then
                Me.tabledtPRODUCTION_DAT.InitVars
            End If
        End If
        Me.tabledtLANE_MST = CType(MyBase.Tables("dtLANE_MST"),dtLANE_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtLANE_MST) Is Nothing) Then
                Me.tabledtLANE_MST.InitVars
            End If
        End If
        Me.tabledtLOG_DAT = CType(MyBase.Tables("dtLOG_DAT"),dtLOG_DATDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtLOG_DAT) Is Nothing) Then
                Me.tabledtLOG_DAT.InitVars
            End If
        End If
        Me.tabledtPAINT_CELL = CType(MyBase.Tables("dtPAINT_CELL"),dtPAINT_CELLDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPAINT_CELL) Is Nothing) Then
                Me.tabledtPAINT_CELL.InitVars
            End If
        End If
        Me.tabledtPaintProgress = CType(MyBase.Tables("dtPaintProgress"),dtPaintProgressDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPaintProgress) Is Nothing) Then
                Me.tabledtPaintProgress.InitVars
            End If
        End If
        Me.tabledtPaintShop = CType(MyBase.Tables("dtPaintShop"),dtPaintShopDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPaintShop) Is Nothing) Then
                Me.tabledtPaintShop.InitVars
            End If
        End If
        Me.tabledtWBS_ON = CType(MyBase.Tables("dtWBS_ON"),dtWBS_ONDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtWBS_ON) Is Nothing) Then
                Me.tabledtWBS_ON.InitVars
            End If
        End If
        Me.tabledtSKIT_MST = CType(MyBase.Tables("dtSKIT_MST"),dtSKIT_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtSKIT_MST) Is Nothing) Then
                Me.tabledtSKIT_MST.InitVars
            End If
        End If
        Me.tabledtOPTION_MST = CType(MyBase.Tables("dtOPTION_MST"),dtOPTION_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtOPTION_MST) Is Nothing) Then
                Me.tabledtOPTION_MST.InitVars
            End If
        End If
        Me.tabledtMODEL_OPTION_ROW = CType(MyBase.Tables("dtMODEL_OPTION_ROW"),dtMODEL_OPTION_ROWDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtMODEL_OPTION_ROW) Is Nothing) Then
                Me.tabledtMODEL_OPTION_ROW.InitVars
            End If
        End If
        Me.tabledtMODEL_OPTION_CELL = CType(MyBase.Tables("dtMODEL_OPTION_CELL"),dtMODEL_OPTION_CELLDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtMODEL_OPTION_CELL) Is Nothing) Then
                Me.tabledtMODEL_OPTION_CELL.InitVars
            End If
        End If
        Me.tabledtOPT_MST_COL_LENGTH = CType(MyBase.Tables("dtOPT_MST_COL_LENGTH"),dtOPT_MST_COL_LENGTHDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtOPT_MST_COL_LENGTH) Is Nothing) Then
                Me.tabledtOPT_MST_COL_LENGTH.InitVars
            End If
        End If
        Me.tabledtPROCESS_OPTION_CELL = CType(MyBase.Tables("dtPROCESS_OPTION_CELL"),dtPROCESS_OPTION_CELLDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPROCESS_OPTION_CELL) Is Nothing) Then
                Me.tabledtPROCESS_OPTION_CELL.InitVars
            End If
        End If
        Me.tabledtInstructionData = CType(MyBase.Tables("dtInstructionData"),dtInstructionDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtInstructionData) Is Nothing) Then
                Me.tabledtInstructionData.InitVars
            End If
        End If
        Me.tabledtPROCESS_LINKAGE = CType(MyBase.Tables("dtPROCESS_LINKAGE"),dtPROCESS_LINKAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPROCESS_LINKAGE) Is Nothing) Then
                Me.tabledtPROCESS_LINKAGE.InitVars
            End If
        End If
        Me.tabledtPLC_MST = CType(MyBase.Tables("dtPLC_MST"),dtPLC_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPLC_MST) Is Nothing) Then
                Me.tabledtPLC_MST.InitVars
            End If
        End If
        Me.tabledtPROCESS_GROUP_MST = CType(MyBase.Tables("dtPROCESS_GROUP_MST"),dtPROCESS_GROUP_MSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPROCESS_GROUP_MST) Is Nothing) Then
                Me.tabledtPROCESS_GROUP_MST.InitVars
            End If
        End If
        Me.relationFK_T_PAINT_CELL_PROCESS_NO = Me.Relations("FK_T_PAINT_CELL_PROCESS_NO")
        Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT = Me.Relations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT")
        Me.relationFK_T_WBS_ON_LANE_NO = Me.Relations("FK_T_WBS_ON_LANE_NO")
        Me.relationFK_T_WBS_ON_SKIT_NO = Me.Relations("FK_T_WBS_ON_SKIT_NO")
        Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT = Me.Relations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")
        Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID = Me.Relations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID")
        Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID = Me.Relations("FK_T_MODEL_OPTION_CELL_OPTION_ID")
        Me.relationFK_T_PROCESS_OPTION_CELL_OPTION_ID = Me.Relations("FK_T_PROCESS_OPTION_CELL_OPTION_ID")
        Me.relationFK_T_PROCESS_OPTION_CELL_PROCESS_NO = Me.Relations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO")
        Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1 = Me.Relations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1")
        Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID1 = Me.Relations("FK_T_MODEL_OPTION_CELL_OPTION_ID1")
        Me.relationFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO = Me.Relations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO")
        Me.relationFK_T_PROCESS_LINKAGE_TO_PROCESS_NO = Me.Relations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO")
        Me.relationFK_T_PLC_MST_PROCESS_NO = Me.Relations("FK_T_PLC_MST_PROCESS_NO")
        Me.relationFK_T_PROCESS_MST_PROCESS_GROUP_ID = Me.Relations("FK_T_PROCESS_MST_PROCESS_GROUP_ID")
        Me.relationdtPROCESS_MST_dtLOG_DAT = Me.Relations("dtPROCESS_MST_dtLOG_DAT")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsCLIENT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsCLIENT.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtPROCESS_MST = New dtPROCESS_MSTDataTable
        MyBase.Tables.Add(Me.tabledtPROCESS_MST)
        Me.tabledtPRODUCTION_DAT = New dtPRODUCTION_DATDataTable
        MyBase.Tables.Add(Me.tabledtPRODUCTION_DAT)
        Me.tabledtLANE_MST = New dtLANE_MSTDataTable
        MyBase.Tables.Add(Me.tabledtLANE_MST)
        Me.tabledtLOG_DAT = New dtLOG_DATDataTable
        MyBase.Tables.Add(Me.tabledtLOG_DAT)
        Me.tabledtPAINT_CELL = New dtPAINT_CELLDataTable
        MyBase.Tables.Add(Me.tabledtPAINT_CELL)
        Me.tabledtPaintProgress = New dtPaintProgressDataTable
        MyBase.Tables.Add(Me.tabledtPaintProgress)
        Me.tabledtPaintShop = New dtPaintShopDataTable
        MyBase.Tables.Add(Me.tabledtPaintShop)
        Me.tabledtWBS_ON = New dtWBS_ONDataTable
        MyBase.Tables.Add(Me.tabledtWBS_ON)
        Me.tabledtSKIT_MST = New dtSKIT_MSTDataTable
        MyBase.Tables.Add(Me.tabledtSKIT_MST)
        Me.tabledtOPTION_MST = New dtOPTION_MSTDataTable
        MyBase.Tables.Add(Me.tabledtOPTION_MST)
        Me.tabledtMODEL_OPTION_ROW = New dtMODEL_OPTION_ROWDataTable
        MyBase.Tables.Add(Me.tabledtMODEL_OPTION_ROW)
        Me.tabledtMODEL_OPTION_CELL = New dtMODEL_OPTION_CELLDataTable
        MyBase.Tables.Add(Me.tabledtMODEL_OPTION_CELL)
        Me.tabledtOPT_MST_COL_LENGTH = New dtOPT_MST_COL_LENGTHDataTable
        MyBase.Tables.Add(Me.tabledtOPT_MST_COL_LENGTH)
        Me.tabledtPROCESS_OPTION_CELL = New dtPROCESS_OPTION_CELLDataTable
        MyBase.Tables.Add(Me.tabledtPROCESS_OPTION_CELL)
        Me.tabledtInstructionData = New dtInstructionDataDataTable
        MyBase.Tables.Add(Me.tabledtInstructionData)
        Me.tabledtPROCESS_LINKAGE = New dtPROCESS_LINKAGEDataTable
        MyBase.Tables.Add(Me.tabledtPROCESS_LINKAGE)
        Me.tabledtPLC_MST = New dtPLC_MSTDataTable
        MyBase.Tables.Add(Me.tabledtPLC_MST)
        Me.tabledtPROCESS_GROUP_MST = New dtPROCESS_GROUP_MSTDataTable
        MyBase.Tables.Add(Me.tabledtPROCESS_GROUP_MST)
        Me.relationFK_T_PAINT_CELL_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PAINT_CELL_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPAINT_CELL.PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PAINT_CELL_PROCESS_NO)
        Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT = New Global.System.Data.DataRelation("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT", New Global.System.Data.DataColumn() {Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn, Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn, Me.tabledtPRODUCTION_DAT.LOT_NOColumn, Me.tabledtPRODUCTION_DAT.UNITColumn}, New Global.System.Data.DataColumn() {Me.tabledtPAINT_CELL.MODEL_YEARColumn, Me.tabledtPAINT_CELL.SUFFIX_CODEColumn, Me.tabledtPAINT_CELL.LOT_NOColumn, Me.tabledtPAINT_CELL.UNITColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT)
        Me.relationFK_T_WBS_ON_LANE_NO = New Global.System.Data.DataRelation("FK_T_WBS_ON_LANE_NO", New Global.System.Data.DataColumn() {Me.tabledtLANE_MST.LANE_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtWBS_ON.LANE_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_WBS_ON_LANE_NO)
        Me.relationFK_T_WBS_ON_SKIT_NO = New Global.System.Data.DataRelation("FK_T_WBS_ON_SKIT_NO", New Global.System.Data.DataColumn() {Me.tabledtSKIT_MST.SKIT_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtWBS_ON.SKIT_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_WBS_ON_SKIT_NO)
        Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT = New Global.System.Data.DataRelation("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT", New Global.System.Data.DataColumn() {Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn, Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn, Me.tabledtPRODUCTION_DAT.LOT_NOColumn, Me.tabledtPRODUCTION_DAT.UNITColumn}, New Global.System.Data.DataColumn() {Me.tabledtSKIT_MST.MODEL_YEARColumn, Me.tabledtSKIT_MST.SUFFIX_CODEColumn, Me.tabledtSKIT_MST.LOT_NOColumn, Me.tabledtSKIT_MST.UNITColumn}, false)
        Me.Relations.Add(Me.relationFK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT)
        Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID = New Global.System.Data.DataRelation("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID", New Global.System.Data.DataColumn() {Me.tabledtMODEL_OPTION_ROW.MODEL_OPTION_ROW_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtMODEL_OPTION_CELL.MODEL_OPTION_ROW_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID)
        Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID = New Global.System.Data.DataRelation("FK_T_MODEL_OPTION_CELL_OPTION_ID", New Global.System.Data.DataColumn() {Me.tabledtOPTION_MST.OPTION_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtMODEL_OPTION_CELL.OPTION_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID)
        Me.relationFK_T_PROCESS_OPTION_CELL_OPTION_ID = New Global.System.Data.DataRelation("FK_T_PROCESS_OPTION_CELL_OPTION_ID", New Global.System.Data.DataColumn() {Me.tabledtOPTION_MST.OPTION_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_OPTION_CELL.OPTION_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_OPTION_CELL_OPTION_ID)
        Me.relationFK_T_PROCESS_OPTION_CELL_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PROCESS_OPTION_CELL_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_OPTION_CELL.PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_OPTION_CELL_PROCESS_NO)
        Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1 = New Global.System.Data.DataRelation("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1", New Global.System.Data.DataColumn() {Me.tabledtMODEL_OPTION_ROW.MODEL_OPTION_ROW_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtInstructionData.MODEL_OPTION_ROW_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1)
        Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID1 = New Global.System.Data.DataRelation("FK_T_MODEL_OPTION_CELL_OPTION_ID1", New Global.System.Data.DataColumn() {Me.tabledtOPTION_MST.OPTION_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtInstructionData.OPTION_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_MODEL_OPTION_CELL_OPTION_ID1)
        Me.relationFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO)
        Me.relationFK_T_PROCESS_LINKAGE_TO_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_LINKAGE.TO_PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_LINKAGE_TO_PROCESS_NO)
        Me.relationFK_T_PLC_MST_PROCESS_NO = New Global.System.Data.DataRelation("FK_T_PLC_MST_PROCESS_NO", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtPLC_MST.PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PLC_MST_PROCESS_NO)
        Me.relationFK_T_PROCESS_MST_PROCESS_GROUP_ID = New Global.System.Data.DataRelation("FK_T_PROCESS_MST_PROCESS_GROUP_ID", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_GROUP_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_T_PROCESS_MST_PROCESS_GROUP_ID)
        Me.relationdtPROCESS_MST_dtLOG_DAT = New Global.System.Data.DataRelation("dtPROCESS_MST_dtLOG_DAT", New Global.System.Data.DataColumn() {Me.tabledtPROCESS_MST.PROCESS_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledtLOG_DAT.PROCESS_NOColumn}, false)
        Me.Relations.Add(Me.relationdtPROCESS_MST_dtLOG_DAT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPROCESS_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPRODUCTION_DAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtLANE_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtLOG_DAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPAINT_CELL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPaintProgress() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPaintShop() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtWBS_ON() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtSKIT_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtOPTION_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtMODEL_OPTION_ROW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtMODEL_OPTION_CELL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtOPT_MST_COL_LENGTH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPROCESS_OPTION_CELL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtInstructionData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPROCESS_LINKAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPLC_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPROCESS_GROUP_MST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsCLIENT = New dsCLIENT
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtPROCESS_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPROCESS_MSTRowChangeEvent)
    
    Public Delegate Sub dtPRODUCTION_DATRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPRODUCTION_DATRowChangeEvent)
    
    Public Delegate Sub dtLANE_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtLANE_MSTRowChangeEvent)
    
    Public Delegate Sub dtLOG_DATRowChangeEventHandler(ByVal sender As Object, ByVal e As dtLOG_DATRowChangeEvent)
    
    Public Delegate Sub dtPAINT_CELLRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPAINT_CELLRowChangeEvent)
    
    Public Delegate Sub dtPaintProgressRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPaintProgressRowChangeEvent)
    
    Public Delegate Sub dtPaintShopRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPaintShopRowChangeEvent)
    
    Public Delegate Sub dtWBS_ONRowChangeEventHandler(ByVal sender As Object, ByVal e As dtWBS_ONRowChangeEvent)
    
    Public Delegate Sub dtSKIT_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtSKIT_MSTRowChangeEvent)
    
    Public Delegate Sub dtOPTION_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtOPTION_MSTRowChangeEvent)
    
    Public Delegate Sub dtMODEL_OPTION_ROWRowChangeEventHandler(ByVal sender As Object, ByVal e As dtMODEL_OPTION_ROWRowChangeEvent)
    
    Public Delegate Sub dtMODEL_OPTION_CELLRowChangeEventHandler(ByVal sender As Object, ByVal e As dtMODEL_OPTION_CELLRowChangeEvent)
    
    Public Delegate Sub dtOPT_MST_COL_LENGTHRowChangeEventHandler(ByVal sender As Object, ByVal e As dtOPT_MST_COL_LENGTHRowChangeEvent)
    
    Public Delegate Sub dtPROCESS_OPTION_CELLRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPROCESS_OPTION_CELLRowChangeEvent)
    
    Public Delegate Sub dtInstructionDataRowChangeEventHandler(ByVal sender As Object, ByVal e As dtInstructionDataRowChangeEvent)
    
    Public Delegate Sub dtPROCESS_LINKAGERowChangeEventHandler(ByVal sender As Object, ByVal e As dtPROCESS_LINKAGERowChangeEvent)
    
    Public Delegate Sub dtPLC_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPLC_MSTRowChangeEvent)
    
    Public Delegate Sub dtPROCESS_GROUP_MSTRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPROCESS_GROUP_MSTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPROCESS_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPROCESS_MSTRow)
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnPROCESS_NAME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TIME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TYPE As Global.System.Data.DataColumn
        
        Private columnENTRANCE_FLAG As Global.System.Data.DataColumn
        
        Private columnUPPER_PROCESS_NAME As Global.System.Data.DataColumn
        
        Private columnPROCESS_CODE As Global.System.Data.DataColumn
        
        Private columnPROCESS_GROUP_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPROCESS_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENTRANCE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTRANCE_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPPER_PROCESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPPER_PROCESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_GROUP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_GROUP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPROCESS_MSTRow
            Get
                Return CType(Me.Rows(index),dtPROCESS_MSTRow)
            End Get
        End Property
        
        Public Event dtPROCESS_MSTRowChanging As dtPROCESS_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_MSTRowChanged As dtPROCESS_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_MSTRowDeleting As dtPROCESS_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_MSTRowDeleted As dtPROCESS_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPROCESS_MSTRow(ByVal row As dtPROCESS_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPROCESS_MSTRow(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean, ByVal UPPER_PROCESS_NAME As String, ByVal PROCESS_CODE As Integer, ByVal parentdtPROCESS_GROUP_MSTRowByFK_T_PROCESS_MST_PROCESS_GROUP_ID As dtPROCESS_GROUP_MSTRow) As dtPROCESS_MSTRow
            Dim rowdtPROCESS_MSTRow As dtPROCESS_MSTRow = CType(Me.NewRow,dtPROCESS_MSTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, ENTRANCE_FLAG, UPPER_PROCESS_NAME, PROCESS_CODE, Nothing}
            If (Not (parentdtPROCESS_GROUP_MSTRowByFK_T_PROCESS_MST_PROCESS_GROUP_ID) Is Nothing) Then
                columnValuesArray(7) = parentdtPROCESS_GROUP_MSTRowByFK_T_PROCESS_MST_PROCESS_GROUP_ID(0)
            End If
            rowdtPROCESS_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPROCESS_MSTRow)
            Return rowdtPROCESS_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPROCESS_NO(ByVal PROCESS_NO As Integer) As dtPROCESS_MSTRow
            Return CType(Me.Rows.Find(New Object() {PROCESS_NO}),dtPROCESS_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPROCESS_MSTDataTable = CType(MyBase.Clone,dtPROCESS_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPROCESS_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnPROCESS_NAME = MyBase.Columns("PROCESS_NAME")
            Me.columnPROCESS_TIME = MyBase.Columns("PROCESS_TIME")
            Me.columnPROCESS_TYPE = MyBase.Columns("PROCESS_TYPE")
            Me.columnENTRANCE_FLAG = MyBase.Columns("ENTRANCE_FLAG")
            Me.columnUPPER_PROCESS_NAME = MyBase.Columns("UPPER_PROCESS_NAME")
            Me.columnPROCESS_CODE = MyBase.Columns("PROCESS_CODE")
            Me.columnPROCESS_GROUP_ID = MyBase.Columns("PROCESS_GROUP_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnPROCESS_NAME = New Global.System.Data.DataColumn("PROCESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NAME)
            Me.columnPROCESS_TIME = New Global.System.Data.DataColumn("PROCESS_TIME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TIME)
            Me.columnPROCESS_TYPE = New Global.System.Data.DataColumn("PROCESS_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TYPE)
            Me.columnENTRANCE_FLAG = New Global.System.Data.DataColumn("ENTRANCE_FLAG", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTRANCE_FLAG)
            Me.columnUPPER_PROCESS_NAME = New Global.System.Data.DataColumn("UPPER_PROCESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPPER_PROCESS_NAME)
            Me.columnPROCESS_CODE = New Global.System.Data.DataColumn("PROCESS_CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_CODE)
            Me.columnPROCESS_GROUP_ID = New Global.System.Data.DataColumn("PROCESS_GROUP_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_GROUP_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROCESS_NO}, true))
            Me.columnPROCESS_NO.AutoIncrement = true
            Me.columnPROCESS_NO.AutoIncrementSeed = -1
            Me.columnPROCESS_NO.AutoIncrementStep = -1
            Me.columnPROCESS_NO.AllowDBNull = false
            Me.columnPROCESS_NO.ReadOnly = true
            Me.columnPROCESS_NO.Unique = true
            Me.columnPROCESS_NAME.AllowDBNull = false
            Me.columnPROCESS_NAME.MaxLength = 60
            Me.columnPROCESS_TIME.AllowDBNull = false
            Me.columnPROCESS_TYPE.AllowDBNull = false
            Me.columnENTRANCE_FLAG.AllowDBNull = false
            Me.columnUPPER_PROCESS_NAME.ReadOnly = true
            Me.columnUPPER_PROCESS_NAME.MaxLength = 60
            Me.columnPROCESS_CODE.AllowDBNull = false
            Me.columnPROCESS_GROUP_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Return CType(Me.NewRow,dtPROCESS_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPROCESS_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPROCESS_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPROCESS_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_MSTRowChanged(Me, New dtPROCESS_MSTRowChangeEvent(CType(e.Row,dtPROCESS_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPROCESS_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_MSTRowChanging(Me, New dtPROCESS_MSTRowChangeEvent(CType(e.Row,dtPROCESS_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPROCESS_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_MSTRowDeleted(Me, New dtPROCESS_MSTRowChangeEvent(CType(e.Row,dtPROCESS_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPROCESS_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_MSTRowDeleting(Me, New dtPROCESS_MSTRowChangeEvent(CType(e.Row,dtPROCESS_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPROCESS_MSTRow(ByVal row As dtPROCESS_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPROCESS_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPRODUCTION_DATDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPRODUCTION_DATRow)
        
        Private columnPRODUCTION_DATE As Global.System.Data.DataColumn
        
        Private columnON_TIME As Global.System.Data.DataColumn
        
        Private columnLOT_ID As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnBLOCK_MODEL As Global.System.Data.DataColumn
        
        Private columnBLOCK_SEQ As Global.System.Data.DataColumn
        
        Private columnIMPORT_CODE As Global.System.Data.DataColumn
        
        Private columnGA_SHOP As Global.System.Data.DataColumn
        
        Private columnINDEX_NO As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnLANE_NO As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnCURRENT_PROCESS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPRODUCTION_DAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_MODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GA_SHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGA_SHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INDEX_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINDEX_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LANE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURRENT_PROCESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURRENT_PROCESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPRODUCTION_DATRow
            Get
                Return CType(Me.Rows(index),dtPRODUCTION_DATRow)
            End Get
        End Property
        
        Public Event dtPRODUCTION_DATRowChanging As dtPRODUCTION_DATRowChangeEventHandler
        
        Public Event dtPRODUCTION_DATRowChanged As dtPRODUCTION_DATRowChangeEventHandler
        
        Public Event dtPRODUCTION_DATRowDeleting As dtPRODUCTION_DATRowChangeEventHandler
        
        Public Event dtPRODUCTION_DATRowDeleted As dtPRODUCTION_DATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPRODUCTION_DATRow(ByVal row As dtPRODUCTION_DATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPRODUCTION_DATRow( _
                    ByVal PRODUCTION_DATE As String,  _
                    ByVal ON_TIME As String,  _
                    ByVal LOT_ID As String,  _
                    ByVal MODEL_CODE As String,  _
                    ByVal LOT_NO As String,  _
                    ByVal UNIT As String,  _
                    ByVal BLOCK_MODEL As String,  _
                    ByVal BLOCK_SEQ As String,  _
                    ByVal IMPORT_CODE As String,  _
                    ByVal GA_SHOP As String,  _
                    ByVal INDEX_NO As Integer,  _
                    ByVal MODEL_YEAR As String,  _
                    ByVal SUFFIX_CODE As String,  _
                    ByVal LANE_NO As Integer,  _
                    ByVal SKIT_NO As Integer,  _
                    ByVal CURRENT_PROCESS As String) As dtPRODUCTION_DATRow
            Dim rowdtPRODUCTION_DATRow As dtPRODUCTION_DATRow = CType(Me.NewRow,dtPRODUCTION_DATRow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTION_DATE, ON_TIME, LOT_ID, MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, IMPORT_CODE, GA_SHOP, INDEX_NO, MODEL_YEAR, SUFFIX_CODE, LANE_NO, SKIT_NO, CURRENT_PROCESS}
            rowdtPRODUCTION_DATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPRODUCTION_DATRow)
            Return rowdtPRODUCTION_DATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMODEL_YEARSUFFIX_CODELOT_NOUNIT(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As dtPRODUCTION_DATRow
            Return CType(Me.Rows.Find(New Object() {MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT}),dtPRODUCTION_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPRODUCTION_DATDataTable = CType(MyBase.Clone,dtPRODUCTION_DATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPRODUCTION_DATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTION_DATE = MyBase.Columns("PRODUCTION_DATE")
            Me.columnON_TIME = MyBase.Columns("ON_TIME")
            Me.columnLOT_ID = MyBase.Columns("LOT_ID")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnBLOCK_MODEL = MyBase.Columns("BLOCK_MODEL")
            Me.columnBLOCK_SEQ = MyBase.Columns("BLOCK_SEQ")
            Me.columnIMPORT_CODE = MyBase.Columns("IMPORT_CODE")
            Me.columnGA_SHOP = MyBase.Columns("GA_SHOP")
            Me.columnINDEX_NO = MyBase.Columns("INDEX_NO")
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnLANE_NO = MyBase.Columns("LANE_NO")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnCURRENT_PROCESS = MyBase.Columns("CURRENT_PROCESS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTION_DATE = New Global.System.Data.DataColumn("PRODUCTION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION_DATE)
            Me.columnON_TIME = New Global.System.Data.DataColumn("ON_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_TIME)
            Me.columnLOT_ID = New Global.System.Data.DataColumn("LOT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ID)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnBLOCK_MODEL = New Global.System.Data.DataColumn("BLOCK_MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_MODEL)
            Me.columnBLOCK_SEQ = New Global.System.Data.DataColumn("BLOCK_SEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_SEQ)
            Me.columnIMPORT_CODE = New Global.System.Data.DataColumn("IMPORT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_CODE)
            Me.columnGA_SHOP = New Global.System.Data.DataColumn("GA_SHOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGA_SHOP)
            Me.columnINDEX_NO = New Global.System.Data.DataColumn("INDEX_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINDEX_NO)
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnLANE_NO = New Global.System.Data.DataColumn("LANE_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANE_NO)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnCURRENT_PROCESS = New Global.System.Data.DataColumn("CURRENT_PROCESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURRENT_PROCESS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMODEL_YEAR, Me.columnSUFFIX_CODE, Me.columnLOT_NO, Me.columnUNIT}, true))
            Me.columnPRODUCTION_DATE.MaxLength = 8
            Me.columnON_TIME.MaxLength = 4
            Me.columnLOT_ID.MaxLength = 3
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnBLOCK_MODEL.MaxLength = 8
            Me.columnBLOCK_SEQ.MaxLength = 3
            Me.columnIMPORT_CODE.MaxLength = 10
            Me.columnGA_SHOP.MaxLength = 2
            Me.columnMODEL_YEAR.AllowDBNull = false
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.AllowDBNull = false
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnLANE_NO.ReadOnly = true
            Me.columnSKIT_NO.ReadOnly = true
            Me.columnCURRENT_PROCESS.ReadOnly = true
            Me.columnCURRENT_PROCESS.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPRODUCTION_DATRow() As dtPRODUCTION_DATRow
            Return CType(Me.NewRow,dtPRODUCTION_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPRODUCTION_DATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPRODUCTION_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPRODUCTION_DATRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPRODUCTION_DATRowChanged(Me, New dtPRODUCTION_DATRowChangeEvent(CType(e.Row,dtPRODUCTION_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPRODUCTION_DATRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPRODUCTION_DATRowChanging(Me, New dtPRODUCTION_DATRowChangeEvent(CType(e.Row,dtPRODUCTION_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPRODUCTION_DATRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPRODUCTION_DATRowDeleted(Me, New dtPRODUCTION_DATRowChangeEvent(CType(e.Row,dtPRODUCTION_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPRODUCTION_DATRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPRODUCTION_DATRowDeleting(Me, New dtPRODUCTION_DATRowChangeEvent(CType(e.Row,dtPRODUCTION_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPRODUCTION_DATRow(ByVal row As dtPRODUCTION_DATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPRODUCTION_DATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtLANE_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtLANE_MSTRow)
        
        Private columnLANE_NO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtLANE_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LANE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtLANE_MSTRow
            Get
                Return CType(Me.Rows(index),dtLANE_MSTRow)
            End Get
        End Property
        
        Public Event dtLANE_MSTRowChanging As dtLANE_MSTRowChangeEventHandler
        
        Public Event dtLANE_MSTRowChanged As dtLANE_MSTRowChangeEventHandler
        
        Public Event dtLANE_MSTRowDeleting As dtLANE_MSTRowChangeEventHandler
        
        Public Event dtLANE_MSTRowDeleted As dtLANE_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtLANE_MSTRow(ByVal row As dtLANE_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtLANE_MSTRow(ByVal LANE_NO As Integer) As dtLANE_MSTRow
            Dim rowdtLANE_MSTRow As dtLANE_MSTRow = CType(Me.NewRow,dtLANE_MSTRow)
            Dim columnValuesArray() As Object = New Object() {LANE_NO}
            rowdtLANE_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtLANE_MSTRow)
            Return rowdtLANE_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLANE_NO(ByVal LANE_NO As Integer) As dtLANE_MSTRow
            Return CType(Me.Rows.Find(New Object() {LANE_NO}),dtLANE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtLANE_MSTDataTable = CType(MyBase.Clone,dtLANE_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtLANE_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLANE_NO = MyBase.Columns("LANE_NO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLANE_NO = New Global.System.Data.DataColumn("LANE_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANE_NO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLANE_NO}, true))
            Me.columnLANE_NO.AllowDBNull = false
            Me.columnLANE_NO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtLANE_MSTRow() As dtLANE_MSTRow
            Return CType(Me.NewRow,dtLANE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtLANE_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtLANE_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtLANE_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtLANE_MSTRowChanged(Me, New dtLANE_MSTRowChangeEvent(CType(e.Row,dtLANE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtLANE_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtLANE_MSTRowChanging(Me, New dtLANE_MSTRowChangeEvent(CType(e.Row,dtLANE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtLANE_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtLANE_MSTRowDeleted(Me, New dtLANE_MSTRowChangeEvent(CType(e.Row,dtLANE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtLANE_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtLANE_MSTRowDeleting(Me, New dtLANE_MSTRowChangeEvent(CType(e.Row,dtLANE_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtLANE_MSTRow(ByVal row As dtLANE_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtLANE_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtLOG_DATDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtLOG_DATRow)
        
        Private columnLOG_ID As Global.System.Data.DataColumn
        
        Private columnLOG_TYPE As Global.System.Data.DataColumn
        
        Private columnLOG_LEVEL As Global.System.Data.DataColumn
        
        Private columnPC_NAME As Global.System.Data.DataColumn
        
        Private columnOCC_DATE As Global.System.Data.DataColumn
        
        Private columnLOG_CODE As Global.System.Data.DataColumn
        
        Private columnMESSAGE As Global.System.Data.DataColumn
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnDATE As Global.System.Data.DataColumn
        
        Private columnTIME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtLOG_DAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PC_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPC_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OCC_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOCC_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOG_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MESSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMESSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtLOG_DATRow
            Get
                Return CType(Me.Rows(index),dtLOG_DATRow)
            End Get
        End Property
        
        Public Event dtLOG_DATRowChanging As dtLOG_DATRowChangeEventHandler
        
        Public Event dtLOG_DATRowChanged As dtLOG_DATRowChangeEventHandler
        
        Public Event dtLOG_DATRowDeleting As dtLOG_DATRowChangeEventHandler
        
        Public Event dtLOG_DATRowDeleted As dtLOG_DATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtLOG_DATRow(ByVal row As dtLOG_DATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtLOG_DATRow(ByVal LOG_TYPE As Integer, ByVal LOG_LEVEL As Integer, ByVal PC_NAME As String, ByVal OCC_DATE As Date, ByVal LOG_CODE As String, ByVal MESSAGE As String, ByVal parentdtPROCESS_MSTRowBydtPROCESS_MST_dtLOG_DAT As dtPROCESS_MSTRow, ByVal _DATE As String, ByVal TIME As String) As dtLOG_DATRow
            Dim rowdtLOG_DATRow As dtLOG_DATRow = CType(Me.NewRow,dtLOG_DATRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LOG_TYPE, LOG_LEVEL, PC_NAME, OCC_DATE, LOG_CODE, MESSAGE, Nothing, _DATE, TIME}
            If (Not (parentdtPROCESS_MSTRowBydtPROCESS_MST_dtLOG_DAT) Is Nothing) Then
                columnValuesArray(7) = parentdtPROCESS_MSTRowBydtPROCESS_MST_dtLOG_DAT(0)
            End If
            rowdtLOG_DATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtLOG_DATRow)
            Return rowdtLOG_DATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOG_ID(ByVal LOG_ID As Integer) As dtLOG_DATRow
            Return CType(Me.Rows.Find(New Object() {LOG_ID}),dtLOG_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtLOG_DATDataTable = CType(MyBase.Clone,dtLOG_DATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtLOG_DATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOG_ID = MyBase.Columns("LOG_ID")
            Me.columnLOG_TYPE = MyBase.Columns("LOG_TYPE")
            Me.columnLOG_LEVEL = MyBase.Columns("LOG_LEVEL")
            Me.columnPC_NAME = MyBase.Columns("PC_NAME")
            Me.columnOCC_DATE = MyBase.Columns("OCC_DATE")
            Me.columnLOG_CODE = MyBase.Columns("LOG_CODE")
            Me.columnMESSAGE = MyBase.Columns("MESSAGE")
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnDATE = MyBase.Columns("DATE")
            Me.columnTIME = MyBase.Columns("TIME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOG_ID = New Global.System.Data.DataColumn("LOG_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_ID)
            Me.columnLOG_TYPE = New Global.System.Data.DataColumn("LOG_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_TYPE)
            Me.columnLOG_LEVEL = New Global.System.Data.DataColumn("LOG_LEVEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_LEVEL)
            Me.columnPC_NAME = New Global.System.Data.DataColumn("PC_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPC_NAME)
            Me.columnOCC_DATE = New Global.System.Data.DataColumn("OCC_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOCC_DATE)
            Me.columnLOG_CODE = New Global.System.Data.DataColumn("LOG_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_CODE)
            Me.columnMESSAGE = New Global.System.Data.DataColumn("MESSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMESSAGE)
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnDATE = New Global.System.Data.DataColumn("DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DATEColumn")
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDATE")
            Me.columnDATE.ExtendedProperties.Add("Generator_UserColumnName", "DATE")
            MyBase.Columns.Add(Me.columnDATE)
            Me.columnTIME = New Global.System.Data.DataColumn("TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLOG_ID}, true))
            Me.columnLOG_ID.AutoIncrement = true
            Me.columnLOG_ID.AutoIncrementSeed = -1
            Me.columnLOG_ID.AutoIncrementStep = -1
            Me.columnLOG_ID.AllowDBNull = false
            Me.columnLOG_ID.ReadOnly = true
            Me.columnLOG_ID.Unique = true
            Me.columnLOG_TYPE.AllowDBNull = false
            Me.columnLOG_LEVEL.AllowDBNull = false
            Me.columnPC_NAME.MaxLength = 255
            Me.columnOCC_DATE.AllowDBNull = false
            Me.columnLOG_CODE.AllowDBNull = false
            Me.columnLOG_CODE.MaxLength = 15
            Me.columnMESSAGE.AllowDBNull = false
            Me.columnMESSAGE.MaxLength = 255
            Me.columnDATE.ReadOnly = true
            Me.columnDATE.MaxLength = 30
            Me.columnTIME.ReadOnly = true
            Me.columnTIME.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtLOG_DATRow() As dtLOG_DATRow
            Return CType(Me.NewRow,dtLOG_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtLOG_DATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtLOG_DATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtLOG_DATRowChangedEvent) Is Nothing) Then
                RaiseEvent dtLOG_DATRowChanged(Me, New dtLOG_DATRowChangeEvent(CType(e.Row,dtLOG_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtLOG_DATRowChangingEvent) Is Nothing) Then
                RaiseEvent dtLOG_DATRowChanging(Me, New dtLOG_DATRowChangeEvent(CType(e.Row,dtLOG_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtLOG_DATRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtLOG_DATRowDeleted(Me, New dtLOG_DATRowChangeEvent(CType(e.Row,dtLOG_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtLOG_DATRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtLOG_DATRowDeleting(Me, New dtLOG_DATRowChangeEvent(CType(e.Row,dtLOG_DATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtLOG_DATRow(ByVal row As dtLOG_DATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtLOG_DATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPAINT_CELLDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPAINT_CELLRow)
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnRESULT_DATE As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnPROCESS_RESULT_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPAINT_CELL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_RESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPAINT_CELLRow
            Get
                Return CType(Me.Rows(index),dtPAINT_CELLRow)
            End Get
        End Property
        
        Public Event dtPAINT_CELLRowChanging As dtPAINT_CELLRowChangeEventHandler
        
        Public Event dtPAINT_CELLRowChanged As dtPAINT_CELLRowChangeEventHandler
        
        Public Event dtPAINT_CELLRowDeleting As dtPAINT_CELLRowChangeEventHandler
        
        Public Event dtPAINT_CELLRowDeleted As dtPAINT_CELLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPAINT_CELLRow(ByVal row As dtPAINT_CELLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPAINT_CELLRow(ByVal LOT_NO As String, ByVal UNIT As String, ByVal parentdtPROCESS_MSTRowByFK_T_PAINT_CELL_PROCESS_NO As dtPROCESS_MSTRow, ByVal RESULT_DATE As String, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal PROCESS_RESULT_DATE As Date) As dtPAINT_CELLRow
            Dim rowdtPAINT_CELLRow As dtPAINT_CELLRow = CType(Me.NewRow,dtPAINT_CELLRow)
            Dim columnValuesArray() As Object = New Object() {LOT_NO, UNIT, Nothing, RESULT_DATE, MODEL_YEAR, SUFFIX_CODE, PROCESS_RESULT_DATE}
            If (Not (parentdtPROCESS_MSTRowByFK_T_PAINT_CELL_PROCESS_NO) Is Nothing) Then
                columnValuesArray(2) = parentdtPROCESS_MSTRowByFK_T_PAINT_CELL_PROCESS_NO(0)
            End If
            rowdtPAINT_CELLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPAINT_CELLRow)
            Return rowdtPAINT_CELLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMODEL_YEARSUFFIX_CODELOT_NOUNITPROCESS_NO(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal PROCESS_NO As Integer) As dtPAINT_CELLRow
            Return CType(Me.Rows.Find(New Object() {MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO}),dtPAINT_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPAINT_CELLDataTable = CType(MyBase.Clone,dtPAINT_CELLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPAINT_CELLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnRESULT_DATE = MyBase.Columns("RESULT_DATE")
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnPROCESS_RESULT_DATE = MyBase.Columns("PROCESS_RESULT_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnRESULT_DATE = New Global.System.Data.DataColumn("RESULT_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULT_DATE)
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnPROCESS_RESULT_DATE = New Global.System.Data.DataColumn("PROCESS_RESULT_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_RESULT_DATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMODEL_YEAR, Me.columnSUFFIX_CODE, Me.columnLOT_NO, Me.columnUNIT, Me.columnPROCESS_NO}, true))
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnPROCESS_NO.AllowDBNull = false
            Me.columnRESULT_DATE.ReadOnly = true
            Me.columnRESULT_DATE.MaxLength = 61
            Me.columnMODEL_YEAR.AllowDBNull = false
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.AllowDBNull = false
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnPROCESS_RESULT_DATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPAINT_CELLRow() As dtPAINT_CELLRow
            Return CType(Me.NewRow,dtPAINT_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPAINT_CELLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPAINT_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPAINT_CELLRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPAINT_CELLRowChanged(Me, New dtPAINT_CELLRowChangeEvent(CType(e.Row,dtPAINT_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPAINT_CELLRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPAINT_CELLRowChanging(Me, New dtPAINT_CELLRowChangeEvent(CType(e.Row,dtPAINT_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPAINT_CELLRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPAINT_CELLRowDeleted(Me, New dtPAINT_CELLRowChangeEvent(CType(e.Row,dtPAINT_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPAINT_CELLRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPAINT_CELLRowDeleting(Me, New dtPAINT_CELLRowChangeEvent(CType(e.Row,dtPAINT_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPAINT_CELLRow(ByVal row As dtPAINT_CELLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPAINT_CELLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPaintProgressDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPaintProgressRow)
        
        Private columnPRODUCTION_DATE As Global.System.Data.DataColumn
        
        Private columnON_TIME As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnLOT_ID As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnBLOCK_MODEL As Global.System.Data.DataColumn
        
        Private columnPROCESS_RESULT_DATE As Global.System.Data.DataColumn
        
        Private columnIMPORT_CODE As Global.System.Data.DataColumn
        
        Private columnGA_SHOP As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPaintProgress"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_MODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_RESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GA_SHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGA_SHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPaintProgressRow
            Get
                Return CType(Me.Rows(index),dtPaintProgressRow)
            End Get
        End Property
        
        Public Event dtPaintProgressRowChanging As dtPaintProgressRowChangeEventHandler
        
        Public Event dtPaintProgressRowChanged As dtPaintProgressRowChangeEventHandler
        
        Public Event dtPaintProgressRowDeleting As dtPaintProgressRowChangeEventHandler
        
        Public Event dtPaintProgressRowDeleted As dtPaintProgressRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPaintProgressRow(ByVal row As dtPaintProgressRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPaintProgressRow(ByVal PRODUCTION_DATE As String, ByVal ON_TIME As String, ByVal SKIT_NO As Integer, ByVal LOT_ID As String, ByVal MODEL_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal BLOCK_MODEL As String, ByVal PROCESS_RESULT_DATE As String, ByVal IMPORT_CODE As String, ByVal GA_SHOP As String, ByVal Expr1 As String) As dtPaintProgressRow
            Dim rowdtPaintProgressRow As dtPaintProgressRow = CType(Me.NewRow,dtPaintProgressRow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, PROCESS_RESULT_DATE, IMPORT_CODE, GA_SHOP, Expr1}
            rowdtPaintProgressRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPaintProgressRow)
            Return rowdtPaintProgressRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPaintProgressDataTable = CType(MyBase.Clone,dtPaintProgressDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPaintProgressDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTION_DATE = MyBase.Columns("PRODUCTION_DATE")
            Me.columnON_TIME = MyBase.Columns("ON_TIME")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnLOT_ID = MyBase.Columns("LOT_ID")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnBLOCK_MODEL = MyBase.Columns("BLOCK_MODEL")
            Me.columnPROCESS_RESULT_DATE = MyBase.Columns("PROCESS_RESULT_DATE")
            Me.columnIMPORT_CODE = MyBase.Columns("IMPORT_CODE")
            Me.columnGA_SHOP = MyBase.Columns("GA_SHOP")
            Me.columnExpr1 = MyBase.Columns("Expr1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTION_DATE = New Global.System.Data.DataColumn("PRODUCTION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION_DATE)
            Me.columnON_TIME = New Global.System.Data.DataColumn("ON_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_TIME)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnLOT_ID = New Global.System.Data.DataColumn("LOT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ID)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnBLOCK_MODEL = New Global.System.Data.DataColumn("BLOCK_MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_MODEL)
            Me.columnPROCESS_RESULT_DATE = New Global.System.Data.DataColumn("PROCESS_RESULT_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_RESULT_DATE)
            Me.columnIMPORT_CODE = New Global.System.Data.DataColumn("IMPORT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_CODE)
            Me.columnGA_SHOP = New Global.System.Data.DataColumn("GA_SHOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGA_SHOP)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnPRODUCTION_DATE.MaxLength = 8
            Me.columnON_TIME.MaxLength = 4
            Me.columnSKIT_NO.AllowDBNull = false
            Me.columnLOT_ID.MaxLength = 3
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnBLOCK_MODEL.MaxLength = 8
            Me.columnPROCESS_RESULT_DATE.ReadOnly = true
            Me.columnPROCESS_RESULT_DATE.MaxLength = 61
            Me.columnIMPORT_CODE.MaxLength = 10
            Me.columnGA_SHOP.MaxLength = 2
            Me.columnExpr1.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPaintProgressRow() As dtPaintProgressRow
            Return CType(Me.NewRow,dtPaintProgressRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPaintProgressRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPaintProgressRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPaintProgressRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPaintProgressRowChanged(Me, New dtPaintProgressRowChangeEvent(CType(e.Row,dtPaintProgressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPaintProgressRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPaintProgressRowChanging(Me, New dtPaintProgressRowChangeEvent(CType(e.Row,dtPaintProgressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPaintProgressRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPaintProgressRowDeleted(Me, New dtPaintProgressRowChangeEvent(CType(e.Row,dtPaintProgressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPaintProgressRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPaintProgressRowDeleting(Me, New dtPaintProgressRowChangeEvent(CType(e.Row,dtPaintProgressRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPaintProgressRow(ByVal row As dtPaintProgressRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPaintProgressDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPaintShopDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPaintShopRow)
        
        Private columnPRODUCTION_DATE As Global.System.Data.DataColumn
        
        Private columnON_TIME As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnLOT_ID As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnBLOCK_MODEL As Global.System.Data.DataColumn
        
        Private columnBLOCK_SEQ As Global.System.Data.DataColumn
        
        Private columnPROCESS_RESULT_DATE As Global.System.Data.DataColumn
        
        Private columnIMPORT_CODE As Global.System.Data.DataColumn
        
        Private columnGA_SHOP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPaintShop"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ON_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnON_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_MODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLOCK_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOCK_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_RESULT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_RESULT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GA_SHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGA_SHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPaintShopRow
            Get
                Return CType(Me.Rows(index),dtPaintShopRow)
            End Get
        End Property
        
        Public Event dtPaintShopRowChanging As dtPaintShopRowChangeEventHandler
        
        Public Event dtPaintShopRowChanged As dtPaintShopRowChangeEventHandler
        
        Public Event dtPaintShopRowDeleting As dtPaintShopRowChangeEventHandler
        
        Public Event dtPaintShopRowDeleted As dtPaintShopRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPaintShopRow(ByVal row As dtPaintShopRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPaintShopRow(ByVal PRODUCTION_DATE As String, ByVal ON_TIME As String, ByVal SKIT_NO As Integer, ByVal LOT_ID As String, ByVal MODEL_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal BLOCK_MODEL As String, ByVal BLOCK_SEQ As String, ByVal PROCESS_RESULT_DATE As String, ByVal IMPORT_CODE As String, ByVal GA_SHOP As String) As dtPaintShopRow
            Dim rowdtPaintShopRow As dtPaintShopRow = CType(Me.NewRow,dtPaintShopRow)
            Dim columnValuesArray() As Object = New Object() {PRODUCTION_DATE, ON_TIME, SKIT_NO, LOT_ID, MODEL_CODE, LOT_NO, UNIT, BLOCK_MODEL, BLOCK_SEQ, PROCESS_RESULT_DATE, IMPORT_CODE, GA_SHOP}
            rowdtPaintShopRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPaintShopRow)
            Return rowdtPaintShopRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPaintShopDataTable = CType(MyBase.Clone,dtPaintShopDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPaintShopDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRODUCTION_DATE = MyBase.Columns("PRODUCTION_DATE")
            Me.columnON_TIME = MyBase.Columns("ON_TIME")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnLOT_ID = MyBase.Columns("LOT_ID")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnBLOCK_MODEL = MyBase.Columns("BLOCK_MODEL")
            Me.columnBLOCK_SEQ = MyBase.Columns("BLOCK_SEQ")
            Me.columnPROCESS_RESULT_DATE = MyBase.Columns("PROCESS_RESULT_DATE")
            Me.columnIMPORT_CODE = MyBase.Columns("IMPORT_CODE")
            Me.columnGA_SHOP = MyBase.Columns("GA_SHOP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRODUCTION_DATE = New Global.System.Data.DataColumn("PRODUCTION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION_DATE)
            Me.columnON_TIME = New Global.System.Data.DataColumn("ON_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnON_TIME)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnLOT_ID = New Global.System.Data.DataColumn("LOT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_ID)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnBLOCK_MODEL = New Global.System.Data.DataColumn("BLOCK_MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_MODEL)
            Me.columnBLOCK_SEQ = New Global.System.Data.DataColumn("BLOCK_SEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOCK_SEQ)
            Me.columnPROCESS_RESULT_DATE = New Global.System.Data.DataColumn("PROCESS_RESULT_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_RESULT_DATE)
            Me.columnIMPORT_CODE = New Global.System.Data.DataColumn("IMPORT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORT_CODE)
            Me.columnGA_SHOP = New Global.System.Data.DataColumn("GA_SHOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGA_SHOP)
            Me.columnPRODUCTION_DATE.MaxLength = 8
            Me.columnON_TIME.MaxLength = 4
            Me.columnLOT_ID.MaxLength = 3
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnBLOCK_MODEL.MaxLength = 8
            Me.columnBLOCK_SEQ.MaxLength = 3
            Me.columnPROCESS_RESULT_DATE.ReadOnly = true
            Me.columnPROCESS_RESULT_DATE.MaxLength = 61
            Me.columnIMPORT_CODE.MaxLength = 10
            Me.columnGA_SHOP.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPaintShopRow() As dtPaintShopRow
            Return CType(Me.NewRow,dtPaintShopRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPaintShopRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPaintShopRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPaintShopRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPaintShopRowChanged(Me, New dtPaintShopRowChangeEvent(CType(e.Row,dtPaintShopRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPaintShopRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPaintShopRowChanging(Me, New dtPaintShopRowChangeEvent(CType(e.Row,dtPaintShopRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPaintShopRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPaintShopRowDeleted(Me, New dtPaintShopRowChangeEvent(CType(e.Row,dtPaintShopRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPaintShopRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPaintShopRowDeleting(Me, New dtPaintShopRowChangeEvent(CType(e.Row,dtPaintShopRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPaintShopRow(ByVal row As dtPaintShopRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPaintShopDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtWBS_ONDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtWBS_ONRow)
        
        Private columnLANE_NO As Global.System.Data.DataColumn
        
        Private columnSEQUENCE As Global.System.Data.DataColumn
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnPOSITION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtWBS_ON"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LANE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLANE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEQUENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQUENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSITIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSITION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtWBS_ONRow
            Get
                Return CType(Me.Rows(index),dtWBS_ONRow)
            End Get
        End Property
        
        Public Event dtWBS_ONRowChanging As dtWBS_ONRowChangeEventHandler
        
        Public Event dtWBS_ONRowChanged As dtWBS_ONRowChangeEventHandler
        
        Public Event dtWBS_ONRowDeleting As dtWBS_ONRowChangeEventHandler
        
        Public Event dtWBS_ONRowDeleted As dtWBS_ONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtWBS_ONRow(ByVal row As dtWBS_ONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtWBS_ONRow(ByVal parentdtLANE_MSTRowByFK_T_WBS_ON_LANE_NO As dtLANE_MSTRow, ByVal SEQUENCE As Integer, ByVal parentdtSKIT_MSTRowByFK_T_WBS_ON_SKIT_NO As dtSKIT_MSTRow, ByVal POSITION As String) As dtWBS_ONRow
            Dim rowdtWBS_ONRow As dtWBS_ONRow = CType(Me.NewRow,dtWBS_ONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SEQUENCE, Nothing, POSITION}
            If (Not (parentdtLANE_MSTRowByFK_T_WBS_ON_LANE_NO) Is Nothing) Then
                columnValuesArray(0) = parentdtLANE_MSTRowByFK_T_WBS_ON_LANE_NO(0)
            End If
            If (Not (parentdtSKIT_MSTRowByFK_T_WBS_ON_SKIT_NO) Is Nothing) Then
                columnValuesArray(2) = parentdtSKIT_MSTRowByFK_T_WBS_ON_SKIT_NO(0)
            End If
            rowdtWBS_ONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtWBS_ONRow)
            Return rowdtWBS_ONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLANE_NOSEQUENCE(ByVal LANE_NO As Integer, ByVal SEQUENCE As Integer) As dtWBS_ONRow
            Return CType(Me.Rows.Find(New Object() {LANE_NO, SEQUENCE}),dtWBS_ONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtWBS_ONDataTable = CType(MyBase.Clone,dtWBS_ONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtWBS_ONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLANE_NO = MyBase.Columns("LANE_NO")
            Me.columnSEQUENCE = MyBase.Columns("SEQUENCE")
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnPOSITION = MyBase.Columns("POSITION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLANE_NO = New Global.System.Data.DataColumn("LANE_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLANE_NO)
            Me.columnSEQUENCE = New Global.System.Data.DataColumn("SEQUENCE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQUENCE)
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnPOSITION = New Global.System.Data.DataColumn("POSITION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSITION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLANE_NO, Me.columnSEQUENCE}, true))
            Me.columnLANE_NO.AllowDBNull = false
            Me.columnSEQUENCE.AllowDBNull = false
            Me.columnSKIT_NO.AllowDBNull = false
            Me.columnPOSITION.ReadOnly = true
            Me.columnPOSITION.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtWBS_ONRow() As dtWBS_ONRow
            Return CType(Me.NewRow,dtWBS_ONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtWBS_ONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtWBS_ONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtWBS_ONRowChangedEvent) Is Nothing) Then
                RaiseEvent dtWBS_ONRowChanged(Me, New dtWBS_ONRowChangeEvent(CType(e.Row,dtWBS_ONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtWBS_ONRowChangingEvent) Is Nothing) Then
                RaiseEvent dtWBS_ONRowChanging(Me, New dtWBS_ONRowChangeEvent(CType(e.Row,dtWBS_ONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtWBS_ONRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtWBS_ONRowDeleted(Me, New dtWBS_ONRowChangeEvent(CType(e.Row,dtWBS_ONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtWBS_ONRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtWBS_ONRowDeleting(Me, New dtWBS_ONRowChangeEvent(CType(e.Row,dtWBS_ONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtWBS_ONRow(ByVal row As dtWBS_ONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtWBS_ONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtSKIT_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtSKIT_MSTRow)
        
        Private columnSKIT_NO As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtSKIT_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKIT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKIT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtSKIT_MSTRow
            Get
                Return CType(Me.Rows(index),dtSKIT_MSTRow)
            End Get
        End Property
        
        Public Event dtSKIT_MSTRowChanging As dtSKIT_MSTRowChangeEventHandler
        
        Public Event dtSKIT_MSTRowChanged As dtSKIT_MSTRowChangeEventHandler
        
        Public Event dtSKIT_MSTRowDeleting As dtSKIT_MSTRowChangeEventHandler
        
        Public Event dtSKIT_MSTRowDeleted As dtSKIT_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtSKIT_MSTRow(ByVal row As dtSKIT_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtSKIT_MSTRow(ByVal SKIT_NO As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As dtSKIT_MSTRow
            Dim rowdtSKIT_MSTRow As dtSKIT_MSTRow = CType(Me.NewRow,dtSKIT_MSTRow)
            Dim columnValuesArray() As Object = New Object() {SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT}
            rowdtSKIT_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtSKIT_MSTRow)
            Return rowdtSKIT_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySKIT_NO(ByVal SKIT_NO As Integer) As dtSKIT_MSTRow
            Return CType(Me.Rows.Find(New Object() {SKIT_NO}),dtSKIT_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtSKIT_MSTDataTable = CType(MyBase.Clone,dtSKIT_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtSKIT_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSKIT_NO = MyBase.Columns("SKIT_NO")
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSKIT_NO = New Global.System.Data.DataColumn("SKIT_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKIT_NO)
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSKIT_NO}, true))
            Me.columnSKIT_NO.AllowDBNull = false
            Me.columnSKIT_NO.Unique = true
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtSKIT_MSTRow() As dtSKIT_MSTRow
            Return CType(Me.NewRow,dtSKIT_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtSKIT_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtSKIT_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtSKIT_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtSKIT_MSTRowChanged(Me, New dtSKIT_MSTRowChangeEvent(CType(e.Row,dtSKIT_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtSKIT_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtSKIT_MSTRowChanging(Me, New dtSKIT_MSTRowChangeEvent(CType(e.Row,dtSKIT_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtSKIT_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtSKIT_MSTRowDeleted(Me, New dtSKIT_MSTRowChangeEvent(CType(e.Row,dtSKIT_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtSKIT_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtSKIT_MSTRowDeleting(Me, New dtSKIT_MSTRowChangeEvent(CType(e.Row,dtSKIT_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtSKIT_MSTRow(ByVal row As dtSKIT_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtSKIT_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtOPTION_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtOPTION_MSTRow)
        
        Private columnOPTION_ID As Global.System.Data.DataColumn
        
        Private columnOPTION_NAME As Global.System.Data.DataColumn
        
        Private columnOPTION_SEQ As Global.System.Data.DataColumn
        
        Private columnOPTION_CODE As Global.System.Data.DataColumn
        
        Private columnOPTION_DISPLAY As Global.System.Data.DataColumn
        
        Private columnOPTION_TYPE As Global.System.Data.DataColumn
        
        Private columnOPTION_SEQ_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtOPTION_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_DISPLAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_DISPLAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_SEQ_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_SEQ_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtOPTION_MSTRow
            Get
                Return CType(Me.Rows(index),dtOPTION_MSTRow)
            End Get
        End Property
        
        Public Event dtOPTION_MSTRowChanging As dtOPTION_MSTRowChangeEventHandler
        
        Public Event dtOPTION_MSTRowChanged As dtOPTION_MSTRowChangeEventHandler
        
        Public Event dtOPTION_MSTRowDeleting As dtOPTION_MSTRowChangeEventHandler
        
        Public Event dtOPTION_MSTRowDeleted As dtOPTION_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtOPTION_MSTRow(ByVal row As dtOPTION_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtOPTION_MSTRow(ByVal OPTION_NAME As String, ByVal OPTION_SEQ As Integer, ByVal OPTION_CODE As String, ByVal OPTION_DISPLAY As String, ByVal OPTION_TYPE As Integer, ByVal OPTION_SEQ_NAME As String) As dtOPTION_MSTRow
            Dim rowdtOPTION_MSTRow As dtOPTION_MSTRow = CType(Me.NewRow,dtOPTION_MSTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, OPTION_NAME, OPTION_SEQ, OPTION_CODE, OPTION_DISPLAY, OPTION_TYPE, OPTION_SEQ_NAME}
            rowdtOPTION_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtOPTION_MSTRow)
            Return rowdtOPTION_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOPTION_ID(ByVal OPTION_ID As Integer) As dtOPTION_MSTRow
            Return CType(Me.Rows.Find(New Object() {OPTION_ID}),dtOPTION_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtOPTION_MSTDataTable = CType(MyBase.Clone,dtOPTION_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtOPTION_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOPTION_ID = MyBase.Columns("OPTION_ID")
            Me.columnOPTION_NAME = MyBase.Columns("OPTION_NAME")
            Me.columnOPTION_SEQ = MyBase.Columns("OPTION_SEQ")
            Me.columnOPTION_CODE = MyBase.Columns("OPTION_CODE")
            Me.columnOPTION_DISPLAY = MyBase.Columns("OPTION_DISPLAY")
            Me.columnOPTION_TYPE = MyBase.Columns("OPTION_TYPE")
            Me.columnOPTION_SEQ_NAME = MyBase.Columns("OPTION_SEQ_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOPTION_ID = New Global.System.Data.DataColumn("OPTION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_ID)
            Me.columnOPTION_NAME = New Global.System.Data.DataColumn("OPTION_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_NAME)
            Me.columnOPTION_SEQ = New Global.System.Data.DataColumn("OPTION_SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_SEQ)
            Me.columnOPTION_CODE = New Global.System.Data.DataColumn("OPTION_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_CODE)
            Me.columnOPTION_DISPLAY = New Global.System.Data.DataColumn("OPTION_DISPLAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_DISPLAY)
            Me.columnOPTION_TYPE = New Global.System.Data.DataColumn("OPTION_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_TYPE)
            Me.columnOPTION_SEQ_NAME = New Global.System.Data.DataColumn("OPTION_SEQ_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_SEQ_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOPTION_ID}, true))
            Me.columnOPTION_ID.AutoIncrement = true
            Me.columnOPTION_ID.AutoIncrementSeed = -1
            Me.columnOPTION_ID.AutoIncrementStep = -1
            Me.columnOPTION_ID.AllowDBNull = false
            Me.columnOPTION_ID.ReadOnly = true
            Me.columnOPTION_ID.Unique = true
            Me.columnOPTION_NAME.AllowDBNull = false
            Me.columnOPTION_NAME.MaxLength = 15
            Me.columnOPTION_SEQ.AllowDBNull = false
            Me.columnOPTION_CODE.MaxLength = 32
            Me.columnOPTION_DISPLAY.MaxLength = 15
            Me.columnOPTION_TYPE.AllowDBNull = false
            Me.columnOPTION_SEQ_NAME.ReadOnly = true
            Me.columnOPTION_SEQ_NAME.MaxLength = 37
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtOPTION_MSTRow() As dtOPTION_MSTRow
            Return CType(Me.NewRow,dtOPTION_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtOPTION_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtOPTION_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtOPTION_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtOPTION_MSTRowChanged(Me, New dtOPTION_MSTRowChangeEvent(CType(e.Row,dtOPTION_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtOPTION_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtOPTION_MSTRowChanging(Me, New dtOPTION_MSTRowChangeEvent(CType(e.Row,dtOPTION_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtOPTION_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtOPTION_MSTRowDeleted(Me, New dtOPTION_MSTRowChangeEvent(CType(e.Row,dtOPTION_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtOPTION_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtOPTION_MSTRowDeleting(Me, New dtOPTION_MSTRowChangeEvent(CType(e.Row,dtOPTION_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtOPTION_MSTRow(ByVal row As dtOPTION_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtOPTION_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtMODEL_OPTION_ROWDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtMODEL_OPTION_ROWRow)
        
        Private columnMODEL_OPTION_ROW_ID As Global.System.Data.DataColumn
        
        Private columnMODEL_YEAR_PATTERN As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE_PATTERN As Global.System.Data.DataColumn
        
        Private columnMODEL_CODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtMODEL_OPTION_ROW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_OPTION_ROW_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_OPTION_ROW_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEAR_PATTERNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR_PATTERN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODE_PATTERNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE_PATTERN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtMODEL_OPTION_ROWRow
            Get
                Return CType(Me.Rows(index),dtMODEL_OPTION_ROWRow)
            End Get
        End Property
        
        Public Event dtMODEL_OPTION_ROWRowChanging As dtMODEL_OPTION_ROWRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_ROWRowChanged As dtMODEL_OPTION_ROWRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_ROWRowDeleting As dtMODEL_OPTION_ROWRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_ROWRowDeleted As dtMODEL_OPTION_ROWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtMODEL_OPTION_ROWRow(ByVal row As dtMODEL_OPTION_ROWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtMODEL_OPTION_ROWRow(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal MODEL_CODE As String) As dtMODEL_OPTION_ROWRow
            Dim rowdtMODEL_OPTION_ROWRow As dtMODEL_OPTION_ROWRow = CType(Me.NewRow,dtMODEL_OPTION_ROWRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, MODEL_CODE}
            rowdtMODEL_OPTION_ROWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtMODEL_OPTION_ROWRow)
            Return rowdtMODEL_OPTION_ROWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMODEL_OPTION_ROW_ID(ByVal MODEL_OPTION_ROW_ID As Integer) As dtMODEL_OPTION_ROWRow
            Return CType(Me.Rows.Find(New Object() {MODEL_OPTION_ROW_ID}),dtMODEL_OPTION_ROWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtMODEL_OPTION_ROWDataTable = CType(MyBase.Clone,dtMODEL_OPTION_ROWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtMODEL_OPTION_ROWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMODEL_OPTION_ROW_ID = MyBase.Columns("MODEL_OPTION_ROW_ID")
            Me.columnMODEL_YEAR_PATTERN = MyBase.Columns("MODEL_YEAR_PATTERN")
            Me.columnSUFFIX_CODE_PATTERN = MyBase.Columns("SUFFIX_CODE_PATTERN")
            Me.columnMODEL_CODE = MyBase.Columns("MODEL_CODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMODEL_OPTION_ROW_ID = New Global.System.Data.DataColumn("MODEL_OPTION_ROW_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_OPTION_ROW_ID)
            Me.columnMODEL_YEAR_PATTERN = New Global.System.Data.DataColumn("MODEL_YEAR_PATTERN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR_PATTERN)
            Me.columnSUFFIX_CODE_PATTERN = New Global.System.Data.DataColumn("SUFFIX_CODE_PATTERN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE_PATTERN)
            Me.columnMODEL_CODE = New Global.System.Data.DataColumn("MODEL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_CODE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMODEL_OPTION_ROW_ID}, true))
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrement = true
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrementSeed = -1
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrementStep = -1
            Me.columnMODEL_OPTION_ROW_ID.AllowDBNull = false
            Me.columnMODEL_OPTION_ROW_ID.ReadOnly = true
            Me.columnMODEL_OPTION_ROW_ID.Unique = true
            Me.columnMODEL_YEAR_PATTERN.AllowDBNull = false
            Me.columnMODEL_YEAR_PATTERN.MaxLength = 3
            Me.columnSUFFIX_CODE_PATTERN.AllowDBNull = false
            Me.columnSUFFIX_CODE_PATTERN.MaxLength = 5
            Me.columnMODEL_CODE.ReadOnly = true
            Me.columnMODEL_CODE.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtMODEL_OPTION_ROWRow() As dtMODEL_OPTION_ROWRow
            Return CType(Me.NewRow,dtMODEL_OPTION_ROWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtMODEL_OPTION_ROWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtMODEL_OPTION_ROWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtMODEL_OPTION_ROWRowChangedEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_ROWRowChanged(Me, New dtMODEL_OPTION_ROWRowChangeEvent(CType(e.Row,dtMODEL_OPTION_ROWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtMODEL_OPTION_ROWRowChangingEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_ROWRowChanging(Me, New dtMODEL_OPTION_ROWRowChangeEvent(CType(e.Row,dtMODEL_OPTION_ROWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtMODEL_OPTION_ROWRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_ROWRowDeleted(Me, New dtMODEL_OPTION_ROWRowChangeEvent(CType(e.Row,dtMODEL_OPTION_ROWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtMODEL_OPTION_ROWRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_ROWRowDeleting(Me, New dtMODEL_OPTION_ROWRowChangeEvent(CType(e.Row,dtMODEL_OPTION_ROWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtMODEL_OPTION_ROWRow(ByVal row As dtMODEL_OPTION_ROWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtMODEL_OPTION_ROWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtMODEL_OPTION_CELLDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtMODEL_OPTION_CELLRow)
        
        Private columnMODEL_OPTION_ROW_ID As Global.System.Data.DataColumn
        
        Private columnOPTION_ID As Global.System.Data.DataColumn
        
        Private columnIS_USED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtMODEL_OPTION_CELL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_OPTION_ROW_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_OPTION_ROW_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_USEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_USED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtMODEL_OPTION_CELLRow
            Get
                Return CType(Me.Rows(index),dtMODEL_OPTION_CELLRow)
            End Get
        End Property
        
        Public Event dtMODEL_OPTION_CELLRowChanging As dtMODEL_OPTION_CELLRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_CELLRowChanged As dtMODEL_OPTION_CELLRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_CELLRowDeleting As dtMODEL_OPTION_CELLRowChangeEventHandler
        
        Public Event dtMODEL_OPTION_CELLRowDeleted As dtMODEL_OPTION_CELLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtMODEL_OPTION_CELLRow(ByVal row As dtMODEL_OPTION_CELLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtMODEL_OPTION_CELLRow(ByVal parentdtMODEL_OPTION_ROWRowByFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID As dtMODEL_OPTION_ROWRow, ByVal parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID As dtOPTION_MSTRow, ByVal IS_USED As Boolean) As dtMODEL_OPTION_CELLRow
            Dim rowdtMODEL_OPTION_CELLRow As dtMODEL_OPTION_CELLRow = CType(Me.NewRow,dtMODEL_OPTION_CELLRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, IS_USED}
            If (Not (parentdtMODEL_OPTION_ROWRowByFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID) Is Nothing) Then
                columnValuesArray(0) = parentdtMODEL_OPTION_ROWRowByFK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID(0)
            End If
            If (Not (parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID) Is Nothing) Then
                columnValuesArray(1) = parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID(0)
            End If
            rowdtMODEL_OPTION_CELLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtMODEL_OPTION_CELLRow)
            Return rowdtMODEL_OPTION_CELLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMODEL_OPTION_ROW_IDOPTION_ID(ByVal MODEL_OPTION_ROW_ID As Integer, ByVal OPTION_ID As Integer) As dtMODEL_OPTION_CELLRow
            Return CType(Me.Rows.Find(New Object() {MODEL_OPTION_ROW_ID, OPTION_ID}),dtMODEL_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtMODEL_OPTION_CELLDataTable = CType(MyBase.Clone,dtMODEL_OPTION_CELLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtMODEL_OPTION_CELLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMODEL_OPTION_ROW_ID = MyBase.Columns("MODEL_OPTION_ROW_ID")
            Me.columnOPTION_ID = MyBase.Columns("OPTION_ID")
            Me.columnIS_USED = MyBase.Columns("IS_USED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMODEL_OPTION_ROW_ID = New Global.System.Data.DataColumn("MODEL_OPTION_ROW_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_OPTION_ROW_ID)
            Me.columnOPTION_ID = New Global.System.Data.DataColumn("OPTION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_ID)
            Me.columnIS_USED = New Global.System.Data.DataColumn("IS_USED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_USED)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMODEL_OPTION_ROW_ID, Me.columnOPTION_ID}, true))
            Me.columnMODEL_OPTION_ROW_ID.AllowDBNull = false
            Me.columnOPTION_ID.AllowDBNull = false
            Me.columnIS_USED.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtMODEL_OPTION_CELLRow() As dtMODEL_OPTION_CELLRow
            Return CType(Me.NewRow,dtMODEL_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtMODEL_OPTION_CELLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtMODEL_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtMODEL_OPTION_CELLRowChangedEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_CELLRowChanged(Me, New dtMODEL_OPTION_CELLRowChangeEvent(CType(e.Row,dtMODEL_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtMODEL_OPTION_CELLRowChangingEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_CELLRowChanging(Me, New dtMODEL_OPTION_CELLRowChangeEvent(CType(e.Row,dtMODEL_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtMODEL_OPTION_CELLRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_CELLRowDeleted(Me, New dtMODEL_OPTION_CELLRowChangeEvent(CType(e.Row,dtMODEL_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtMODEL_OPTION_CELLRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtMODEL_OPTION_CELLRowDeleting(Me, New dtMODEL_OPTION_CELLRowChangeEvent(CType(e.Row,dtMODEL_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtMODEL_OPTION_CELLRow(ByVal row As dtMODEL_OPTION_CELLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtMODEL_OPTION_CELLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtOPT_MST_COL_LENGTHDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtOPT_MST_COL_LENGTHRow)
        
        Private columnCOL_OPTION_NAME_LEN As Global.System.Data.DataColumn
        
        Private columnCOL_OPTION_CODE_LEN As Global.System.Data.DataColumn
        
        Private columnCOL_OPTION_DISPLAY_LEN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtOPT_MST_COL_LENGTH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COL_OPTION_NAME_LENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL_OPTION_NAME_LEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COL_OPTION_CODE_LENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL_OPTION_CODE_LEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COL_OPTION_DISPLAY_LENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL_OPTION_DISPLAY_LEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtOPT_MST_COL_LENGTHRow
            Get
                Return CType(Me.Rows(index),dtOPT_MST_COL_LENGTHRow)
            End Get
        End Property
        
        Public Event dtOPT_MST_COL_LENGTHRowChanging As dtOPT_MST_COL_LENGTHRowChangeEventHandler
        
        Public Event dtOPT_MST_COL_LENGTHRowChanged As dtOPT_MST_COL_LENGTHRowChangeEventHandler
        
        Public Event dtOPT_MST_COL_LENGTHRowDeleting As dtOPT_MST_COL_LENGTHRowChangeEventHandler
        
        Public Event dtOPT_MST_COL_LENGTHRowDeleted As dtOPT_MST_COL_LENGTHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtOPT_MST_COL_LENGTHRow(ByVal row As dtOPT_MST_COL_LENGTHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtOPT_MST_COL_LENGTHRow(ByVal COL_OPTION_NAME_LEN As Short, ByVal COL_OPTION_CODE_LEN As Short, ByVal COL_OPTION_DISPLAY_LEN As Short) As dtOPT_MST_COL_LENGTHRow
            Dim rowdtOPT_MST_COL_LENGTHRow As dtOPT_MST_COL_LENGTHRow = CType(Me.NewRow,dtOPT_MST_COL_LENGTHRow)
            Dim columnValuesArray() As Object = New Object() {COL_OPTION_NAME_LEN, COL_OPTION_CODE_LEN, COL_OPTION_DISPLAY_LEN}
            rowdtOPT_MST_COL_LENGTHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtOPT_MST_COL_LENGTHRow)
            Return rowdtOPT_MST_COL_LENGTHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtOPT_MST_COL_LENGTHDataTable = CType(MyBase.Clone,dtOPT_MST_COL_LENGTHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtOPT_MST_COL_LENGTHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOL_OPTION_NAME_LEN = MyBase.Columns("COL_OPTION_NAME_LEN")
            Me.columnCOL_OPTION_CODE_LEN = MyBase.Columns("COL_OPTION_CODE_LEN")
            Me.columnCOL_OPTION_DISPLAY_LEN = MyBase.Columns("COL_OPTION_DISPLAY_LEN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOL_OPTION_NAME_LEN = New Global.System.Data.DataColumn("COL_OPTION_NAME_LEN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL_OPTION_NAME_LEN)
            Me.columnCOL_OPTION_CODE_LEN = New Global.System.Data.DataColumn("COL_OPTION_CODE_LEN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL_OPTION_CODE_LEN)
            Me.columnCOL_OPTION_DISPLAY_LEN = New Global.System.Data.DataColumn("COL_OPTION_DISPLAY_LEN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL_OPTION_DISPLAY_LEN)
            Me.columnCOL_OPTION_NAME_LEN.ReadOnly = true
            Me.columnCOL_OPTION_CODE_LEN.ReadOnly = true
            Me.columnCOL_OPTION_DISPLAY_LEN.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtOPT_MST_COL_LENGTHRow() As dtOPT_MST_COL_LENGTHRow
            Return CType(Me.NewRow,dtOPT_MST_COL_LENGTHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtOPT_MST_COL_LENGTHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtOPT_MST_COL_LENGTHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtOPT_MST_COL_LENGTHRowChangedEvent) Is Nothing) Then
                RaiseEvent dtOPT_MST_COL_LENGTHRowChanged(Me, New dtOPT_MST_COL_LENGTHRowChangeEvent(CType(e.Row,dtOPT_MST_COL_LENGTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtOPT_MST_COL_LENGTHRowChangingEvent) Is Nothing) Then
                RaiseEvent dtOPT_MST_COL_LENGTHRowChanging(Me, New dtOPT_MST_COL_LENGTHRowChangeEvent(CType(e.Row,dtOPT_MST_COL_LENGTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtOPT_MST_COL_LENGTHRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtOPT_MST_COL_LENGTHRowDeleted(Me, New dtOPT_MST_COL_LENGTHRowChangeEvent(CType(e.Row,dtOPT_MST_COL_LENGTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtOPT_MST_COL_LENGTHRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtOPT_MST_COL_LENGTHRowDeleting(Me, New dtOPT_MST_COL_LENGTHRowChangeEvent(CType(e.Row,dtOPT_MST_COL_LENGTHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtOPT_MST_COL_LENGTHRow(ByVal row As dtOPT_MST_COL_LENGTHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtOPT_MST_COL_LENGTHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPROCESS_OPTION_CELLDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPROCESS_OPTION_CELLRow)
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnOPTION_ID As Global.System.Data.DataColumn
        
        Private columnIS_USED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPROCESS_OPTION_CELL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_USEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_USED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPROCESS_OPTION_CELLRow
            Get
                Return CType(Me.Rows(index),dtPROCESS_OPTION_CELLRow)
            End Get
        End Property
        
        Public Event dtPROCESS_OPTION_CELLRowChanging As dtPROCESS_OPTION_CELLRowChangeEventHandler
        
        Public Event dtPROCESS_OPTION_CELLRowChanged As dtPROCESS_OPTION_CELLRowChangeEventHandler
        
        Public Event dtPROCESS_OPTION_CELLRowDeleting As dtPROCESS_OPTION_CELLRowChangeEventHandler
        
        Public Event dtPROCESS_OPTION_CELLRowDeleted As dtPROCESS_OPTION_CELLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPROCESS_OPTION_CELLRow(ByVal row As dtPROCESS_OPTION_CELLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPROCESS_OPTION_CELLRow(ByVal parentdtPROCESS_MSTRowByFK_T_PROCESS_OPTION_CELL_PROCESS_NO As dtPROCESS_MSTRow, ByVal parentdtOPTION_MSTRowByFK_T_PROCESS_OPTION_CELL_OPTION_ID As dtOPTION_MSTRow, ByVal IS_USED As Boolean) As dtPROCESS_OPTION_CELLRow
            Dim rowdtPROCESS_OPTION_CELLRow As dtPROCESS_OPTION_CELLRow = CType(Me.NewRow,dtPROCESS_OPTION_CELLRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, IS_USED}
            If (Not (parentdtPROCESS_MSTRowByFK_T_PROCESS_OPTION_CELL_PROCESS_NO) Is Nothing) Then
                columnValuesArray(0) = parentdtPROCESS_MSTRowByFK_T_PROCESS_OPTION_CELL_PROCESS_NO(0)
            End If
            If (Not (parentdtOPTION_MSTRowByFK_T_PROCESS_OPTION_CELL_OPTION_ID) Is Nothing) Then
                columnValuesArray(1) = parentdtOPTION_MSTRowByFK_T_PROCESS_OPTION_CELL_OPTION_ID(0)
            End If
            rowdtPROCESS_OPTION_CELLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPROCESS_OPTION_CELLRow)
            Return rowdtPROCESS_OPTION_CELLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPROCESS_NOOPTION_ID(ByVal PROCESS_NO As Integer, ByVal OPTION_ID As Integer) As dtPROCESS_OPTION_CELLRow
            Return CType(Me.Rows.Find(New Object() {PROCESS_NO, OPTION_ID}),dtPROCESS_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPROCESS_OPTION_CELLDataTable = CType(MyBase.Clone,dtPROCESS_OPTION_CELLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPROCESS_OPTION_CELLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnOPTION_ID = MyBase.Columns("OPTION_ID")
            Me.columnIS_USED = MyBase.Columns("IS_USED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnOPTION_ID = New Global.System.Data.DataColumn("OPTION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_ID)
            Me.columnIS_USED = New Global.System.Data.DataColumn("IS_USED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_USED)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROCESS_NO, Me.columnOPTION_ID}, true))
            Me.columnPROCESS_NO.AllowDBNull = false
            Me.columnOPTION_ID.AllowDBNull = false
            Me.columnIS_USED.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPROCESS_OPTION_CELLRow() As dtPROCESS_OPTION_CELLRow
            Return CType(Me.NewRow,dtPROCESS_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPROCESS_OPTION_CELLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPROCESS_OPTION_CELLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPROCESS_OPTION_CELLRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_OPTION_CELLRowChanged(Me, New dtPROCESS_OPTION_CELLRowChangeEvent(CType(e.Row,dtPROCESS_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPROCESS_OPTION_CELLRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_OPTION_CELLRowChanging(Me, New dtPROCESS_OPTION_CELLRowChangeEvent(CType(e.Row,dtPROCESS_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPROCESS_OPTION_CELLRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_OPTION_CELLRowDeleted(Me, New dtPROCESS_OPTION_CELLRowChangeEvent(CType(e.Row,dtPROCESS_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPROCESS_OPTION_CELLRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_OPTION_CELLRowDeleting(Me, New dtPROCESS_OPTION_CELLRowChangeEvent(CType(e.Row,dtPROCESS_OPTION_CELLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPROCESS_OPTION_CELLRow(ByVal row As dtPROCESS_OPTION_CELLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPROCESS_OPTION_CELLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtInstructionDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtInstructionDataRow)
        
        Private columnMODEL_YEAR As Global.System.Data.DataColumn
        
        Private columnSUFFIX_CODE As Global.System.Data.DataColumn
        
        Private columnLOT_NO As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnMODEL_OPTION_ROW_ID As Global.System.Data.DataColumn
        
        Private columnOPTION_ID As Global.System.Data.DataColumn
        
        Private columnOPTION_DISPLAY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtInstructionData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUFFIX_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUFFIX_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODEL_OPTION_ROW_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_OPTION_ROW_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPTION_DISPLAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPTION_DISPLAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtInstructionDataRow
            Get
                Return CType(Me.Rows(index),dtInstructionDataRow)
            End Get
        End Property
        
        Public Event dtInstructionDataRowChanging As dtInstructionDataRowChangeEventHandler
        
        Public Event dtInstructionDataRowChanged As dtInstructionDataRowChangeEventHandler
        
        Public Event dtInstructionDataRowDeleting As dtInstructionDataRowChangeEventHandler
        
        Public Event dtInstructionDataRowDeleted As dtInstructionDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtInstructionDataRow(ByVal row As dtInstructionDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtInstructionDataRow(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID1 As dtOPTION_MSTRow, ByVal OPTION_DISPLAY As String) As dtInstructionDataRow
            Dim rowdtInstructionDataRow As dtInstructionDataRow = CType(Me.NewRow,dtInstructionDataRow)
            Dim columnValuesArray() As Object = New Object() {MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, Nothing, Nothing, OPTION_DISPLAY}
            If (Not (parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID1) Is Nothing) Then
                columnValuesArray(5) = parentdtOPTION_MSTRowByFK_T_MODEL_OPTION_CELL_OPTION_ID1(0)
            End If
            rowdtInstructionDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtInstructionDataRow)
            Return rowdtInstructionDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtInstructionDataDataTable = CType(MyBase.Clone,dtInstructionDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtInstructionDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMODEL_YEAR = MyBase.Columns("MODEL_YEAR")
            Me.columnSUFFIX_CODE = MyBase.Columns("SUFFIX_CODE")
            Me.columnLOT_NO = MyBase.Columns("LOT_NO")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnMODEL_OPTION_ROW_ID = MyBase.Columns("MODEL_OPTION_ROW_ID")
            Me.columnOPTION_ID = MyBase.Columns("OPTION_ID")
            Me.columnOPTION_DISPLAY = MyBase.Columns("OPTION_DISPLAY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMODEL_YEAR = New Global.System.Data.DataColumn("MODEL_YEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_YEAR)
            Me.columnSUFFIX_CODE = New Global.System.Data.DataColumn("SUFFIX_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUFFIX_CODE)
            Me.columnLOT_NO = New Global.System.Data.DataColumn("LOT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOT_NO)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnMODEL_OPTION_ROW_ID = New Global.System.Data.DataColumn("MODEL_OPTION_ROW_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_OPTION_ROW_ID)
            Me.columnOPTION_ID = New Global.System.Data.DataColumn("OPTION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_ID)
            Me.columnOPTION_DISPLAY = New Global.System.Data.DataColumn("OPTION_DISPLAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPTION_DISPLAY)
            Me.columnMODEL_YEAR.AllowDBNull = false
            Me.columnMODEL_YEAR.MaxLength = 3
            Me.columnSUFFIX_CODE.AllowDBNull = false
            Me.columnSUFFIX_CODE.MaxLength = 5
            Me.columnLOT_NO.AllowDBNull = false
            Me.columnLOT_NO.MaxLength = 3
            Me.columnUNIT.AllowDBNull = false
            Me.columnUNIT.MaxLength = 3
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrement = true
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrementSeed = -1
            Me.columnMODEL_OPTION_ROW_ID.AutoIncrementStep = -1
            Me.columnMODEL_OPTION_ROW_ID.AllowDBNull = false
            Me.columnMODEL_OPTION_ROW_ID.ReadOnly = true
            Me.columnOPTION_ID.AllowDBNull = false
            Me.columnOPTION_DISPLAY.ReadOnly = true
            Me.columnOPTION_DISPLAY.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtInstructionDataRow() As dtInstructionDataRow
            Return CType(Me.NewRow,dtInstructionDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtInstructionDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtInstructionDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtInstructionDataRowChangedEvent) Is Nothing) Then
                RaiseEvent dtInstructionDataRowChanged(Me, New dtInstructionDataRowChangeEvent(CType(e.Row,dtInstructionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtInstructionDataRowChangingEvent) Is Nothing) Then
                RaiseEvent dtInstructionDataRowChanging(Me, New dtInstructionDataRowChangeEvent(CType(e.Row,dtInstructionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtInstructionDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtInstructionDataRowDeleted(Me, New dtInstructionDataRowChangeEvent(CType(e.Row,dtInstructionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtInstructionDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtInstructionDataRowDeleting(Me, New dtInstructionDataRowChangeEvent(CType(e.Row,dtInstructionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtInstructionDataRow(ByVal row As dtInstructionDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtInstructionDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPROCESS_LINKAGEDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPROCESS_LINKAGERow)
        
        Private columnFROM_PROCESS_NO As Global.System.Data.DataColumn
        
        Private columnTO_PROCESS_NO As Global.System.Data.DataColumn
        
        Private columnFROM_PROCESS_NAME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TIME As Global.System.Data.DataColumn
        
        Private columnPROCESS_TYPE As Global.System.Data.DataColumn
        
        Private columnENTRANCE_FLAG As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPROCESS_LINKAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FROM_PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFROM_PROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TO_PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTO_PROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FROM_PROCESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFROM_PROCESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENTRANCE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTRANCE_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPROCESS_LINKAGERow
            Get
                Return CType(Me.Rows(index),dtPROCESS_LINKAGERow)
            End Get
        End Property
        
        Public Event dtPROCESS_LINKAGERowChanging As dtPROCESS_LINKAGERowChangeEventHandler
        
        Public Event dtPROCESS_LINKAGERowChanged As dtPROCESS_LINKAGERowChangeEventHandler
        
        Public Event dtPROCESS_LINKAGERowDeleting As dtPROCESS_LINKAGERowChangeEventHandler
        
        Public Event dtPROCESS_LINKAGERowDeleted As dtPROCESS_LINKAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPROCESS_LINKAGERow(ByVal row As dtPROCESS_LINKAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPROCESS_LINKAGERow(ByVal parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO As dtPROCESS_MSTRow, ByVal parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO As dtPROCESS_MSTRow, ByVal FROM_PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As String) As dtPROCESS_LINKAGERow
            Dim rowdtPROCESS_LINKAGERow As dtPROCESS_LINKAGERow = CType(Me.NewRow,dtPROCESS_LINKAGERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, FROM_PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, ENTRANCE_FLAG}
            If (Not (parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO) Is Nothing) Then
                columnValuesArray(0) = parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO(0)
            End If
            If (Not (parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO) Is Nothing) Then
                columnValuesArray(1) = parentdtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO(0)
            End If
            rowdtPROCESS_LINKAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPROCESS_LINKAGERow)
            Return rowdtPROCESS_LINKAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFROM_PROCESS_NOTO_PROCESS_NO(ByVal FROM_PROCESS_NO As Integer, ByVal TO_PROCESS_NO As Integer) As dtPROCESS_LINKAGERow
            Return CType(Me.Rows.Find(New Object() {FROM_PROCESS_NO, TO_PROCESS_NO}),dtPROCESS_LINKAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPROCESS_LINKAGEDataTable = CType(MyBase.Clone,dtPROCESS_LINKAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPROCESS_LINKAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFROM_PROCESS_NO = MyBase.Columns("FROM_PROCESS_NO")
            Me.columnTO_PROCESS_NO = MyBase.Columns("TO_PROCESS_NO")
            Me.columnFROM_PROCESS_NAME = MyBase.Columns("FROM_PROCESS_NAME")
            Me.columnPROCESS_TIME = MyBase.Columns("PROCESS_TIME")
            Me.columnPROCESS_TYPE = MyBase.Columns("PROCESS_TYPE")
            Me.columnENTRANCE_FLAG = MyBase.Columns("ENTRANCE_FLAG")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFROM_PROCESS_NO = New Global.System.Data.DataColumn("FROM_PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFROM_PROCESS_NO)
            Me.columnTO_PROCESS_NO = New Global.System.Data.DataColumn("TO_PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTO_PROCESS_NO)
            Me.columnFROM_PROCESS_NAME = New Global.System.Data.DataColumn("FROM_PROCESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFROM_PROCESS_NAME)
            Me.columnPROCESS_TIME = New Global.System.Data.DataColumn("PROCESS_TIME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TIME)
            Me.columnPROCESS_TYPE = New Global.System.Data.DataColumn("PROCESS_TYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_TYPE)
            Me.columnENTRANCE_FLAG = New Global.System.Data.DataColumn("ENTRANCE_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTRANCE_FLAG)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFROM_PROCESS_NO, Me.columnTO_PROCESS_NO}, true))
            Me.columnFROM_PROCESS_NO.AllowDBNull = false
            Me.columnTO_PROCESS_NO.AllowDBNull = false
            Me.columnFROM_PROCESS_NAME.ReadOnly = true
            Me.columnFROM_PROCESS_NAME.MaxLength = 60
            Me.columnPROCESS_TIME.ReadOnly = true
            Me.columnPROCESS_TYPE.ReadOnly = true
            Me.columnENTRANCE_FLAG.ReadOnly = true
            Me.columnENTRANCE_FLAG.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPROCESS_LINKAGERow() As dtPROCESS_LINKAGERow
            Return CType(Me.NewRow,dtPROCESS_LINKAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPROCESS_LINKAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPROCESS_LINKAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPROCESS_LINKAGERowChangedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_LINKAGERowChanged(Me, New dtPROCESS_LINKAGERowChangeEvent(CType(e.Row,dtPROCESS_LINKAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPROCESS_LINKAGERowChangingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_LINKAGERowChanging(Me, New dtPROCESS_LINKAGERowChangeEvent(CType(e.Row,dtPROCESS_LINKAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPROCESS_LINKAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_LINKAGERowDeleted(Me, New dtPROCESS_LINKAGERowChangeEvent(CType(e.Row,dtPROCESS_LINKAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPROCESS_LINKAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_LINKAGERowDeleting(Me, New dtPROCESS_LINKAGERowChangeEvent(CType(e.Row,dtPROCESS_LINKAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPROCESS_LINKAGERow(ByVal row As dtPROCESS_LINKAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPROCESS_LINKAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPLC_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPLC_MSTRow)
        
        Private columnPLC_ID As Global.System.Data.DataColumn
        
        Private columnSTAGE_CODE As Global.System.Data.DataColumn
        
        Private columnPLC_NET As Global.System.Data.DataColumn
        
        Private columnPLC_NODE As Global.System.Data.DataColumn
        
        Private columnPLC_UNIT As Global.System.Data.DataColumn
        
        Private columnREAD_DM As Global.System.Data.DataColumn
        
        Private columnWRITE_DATA_DM As Global.System.Data.DataColumn
        
        Private columnWRITE_STATUS_DM As Global.System.Data.DataColumn
        
        Private columnPROCESS_NO As Global.System.Data.DataColumn
        
        Private columnPLC_ONLINE_FLAG As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPLC_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STAGE_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTAGE_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_NETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_NET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_NODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_NODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property READ_DMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREAD_DM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WRITE_DATA_DMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWRITE_DATA_DM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WRITE_STATUS_DMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWRITE_STATUS_DM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLC_ONLINE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLC_ONLINE_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPLC_MSTRow
            Get
                Return CType(Me.Rows(index),dtPLC_MSTRow)
            End Get
        End Property
        
        Public Event dtPLC_MSTRowChanging As dtPLC_MSTRowChangeEventHandler
        
        Public Event dtPLC_MSTRowChanged As dtPLC_MSTRowChangeEventHandler
        
        Public Event dtPLC_MSTRowDeleting As dtPLC_MSTRowChangeEventHandler
        
        Public Event dtPLC_MSTRowDeleted As dtPLC_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPLC_MSTRow(ByVal row As dtPLC_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPLC_MSTRow(ByVal STAGE_CODE As Integer, ByVal PLC_NET As Integer, ByVal PLC_NODE As Integer, ByVal PLC_UNIT As Integer, ByVal READ_DM As Integer, ByVal WRITE_DATA_DM As Integer, ByVal WRITE_STATUS_DM As Integer, ByVal parentdtPROCESS_MSTRowByFK_T_PLC_MST_PROCESS_NO As dtPROCESS_MSTRow, ByVal PLC_ONLINE_FLAG As Boolean) As dtPLC_MSTRow
            Dim rowdtPLC_MSTRow As dtPLC_MSTRow = CType(Me.NewRow,dtPLC_MSTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, STAGE_CODE, PLC_NET, PLC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, Nothing, PLC_ONLINE_FLAG}
            If (Not (parentdtPROCESS_MSTRowByFK_T_PLC_MST_PROCESS_NO) Is Nothing) Then
                columnValuesArray(8) = parentdtPROCESS_MSTRowByFK_T_PLC_MST_PROCESS_NO(0)
            End If
            rowdtPLC_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPLC_MSTRow)
            Return rowdtPLC_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPLC_ID(ByVal PLC_ID As Integer) As dtPLC_MSTRow
            Return CType(Me.Rows.Find(New Object() {PLC_ID}),dtPLC_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPLC_MSTDataTable = CType(MyBase.Clone,dtPLC_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPLC_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPLC_ID = MyBase.Columns("PLC_ID")
            Me.columnSTAGE_CODE = MyBase.Columns("STAGE_CODE")
            Me.columnPLC_NET = MyBase.Columns("PLC_NET")
            Me.columnPLC_NODE = MyBase.Columns("PLC_NODE")
            Me.columnPLC_UNIT = MyBase.Columns("PLC_UNIT")
            Me.columnREAD_DM = MyBase.Columns("READ_DM")
            Me.columnWRITE_DATA_DM = MyBase.Columns("WRITE_DATA_DM")
            Me.columnWRITE_STATUS_DM = MyBase.Columns("WRITE_STATUS_DM")
            Me.columnPROCESS_NO = MyBase.Columns("PROCESS_NO")
            Me.columnPLC_ONLINE_FLAG = MyBase.Columns("PLC_ONLINE_FLAG")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPLC_ID = New Global.System.Data.DataColumn("PLC_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_ID)
            Me.columnSTAGE_CODE = New Global.System.Data.DataColumn("STAGE_CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTAGE_CODE)
            Me.columnPLC_NET = New Global.System.Data.DataColumn("PLC_NET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_NET)
            Me.columnPLC_NODE = New Global.System.Data.DataColumn("PLC_NODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_NODE)
            Me.columnPLC_UNIT = New Global.System.Data.DataColumn("PLC_UNIT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_UNIT)
            Me.columnREAD_DM = New Global.System.Data.DataColumn("READ_DM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREAD_DM)
            Me.columnWRITE_DATA_DM = New Global.System.Data.DataColumn("WRITE_DATA_DM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWRITE_DATA_DM)
            Me.columnWRITE_STATUS_DM = New Global.System.Data.DataColumn("WRITE_STATUS_DM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWRITE_STATUS_DM)
            Me.columnPROCESS_NO = New Global.System.Data.DataColumn("PROCESS_NO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_NO)
            Me.columnPLC_ONLINE_FLAG = New Global.System.Data.DataColumn("PLC_ONLINE_FLAG", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLC_ONLINE_FLAG)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLC_ID}, true))
            Me.columnPLC_ID.AutoIncrement = true
            Me.columnPLC_ID.AutoIncrementSeed = -1
            Me.columnPLC_ID.AutoIncrementStep = -1
            Me.columnPLC_ID.AllowDBNull = false
            Me.columnPLC_ID.ReadOnly = true
            Me.columnPLC_ID.Unique = true
            Me.columnSTAGE_CODE.AllowDBNull = false
            Me.columnPLC_NET.AllowDBNull = false
            Me.columnPLC_NODE.AllowDBNull = false
            Me.columnPLC_UNIT.AllowDBNull = false
            Me.columnREAD_DM.AllowDBNull = false
            Me.columnWRITE_DATA_DM.AllowDBNull = false
            Me.columnWRITE_STATUS_DM.AllowDBNull = false
            Me.columnPROCESS_NO.AllowDBNull = false
            Me.columnPLC_ONLINE_FLAG.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPLC_MSTRow() As dtPLC_MSTRow
            Return CType(Me.NewRow,dtPLC_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPLC_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPLC_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPLC_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPLC_MSTRowChanged(Me, New dtPLC_MSTRowChangeEvent(CType(e.Row,dtPLC_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPLC_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPLC_MSTRowChanging(Me, New dtPLC_MSTRowChangeEvent(CType(e.Row,dtPLC_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPLC_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPLC_MSTRowDeleted(Me, New dtPLC_MSTRowChangeEvent(CType(e.Row,dtPLC_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPLC_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPLC_MSTRowDeleting(Me, New dtPLC_MSTRowChangeEvent(CType(e.Row,dtPLC_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPLC_MSTRow(ByVal row As dtPLC_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPLC_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPROCESS_GROUP_MSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtPROCESS_GROUP_MSTRow)
        
        Private columnPROCESS_GROUP_ID As Global.System.Data.DataColumn
        
        Private columnPROCESS_GROUP_SEQ As Global.System.Data.DataColumn
        
        Private columnPROCESS_GROUP_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPROCESS_GROUP_MST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_GROUP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_GROUP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_GROUP_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_GROUP_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESS_GROUP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESS_GROUP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPROCESS_GROUP_MSTRow
            Get
                Return CType(Me.Rows(index),dtPROCESS_GROUP_MSTRow)
            End Get
        End Property
        
        Public Event dtPROCESS_GROUP_MSTRowChanging As dtPROCESS_GROUP_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_GROUP_MSTRowChanged As dtPROCESS_GROUP_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_GROUP_MSTRowDeleting As dtPROCESS_GROUP_MSTRowChangeEventHandler
        
        Public Event dtPROCESS_GROUP_MSTRowDeleted As dtPROCESS_GROUP_MSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPROCESS_GROUP_MSTRow(ByVal row As dtPROCESS_GROUP_MSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPROCESS_GROUP_MSTRow(ByVal PROCESS_GROUP_SEQ As Integer, ByVal PROCESS_GROUP_NAME As String) As dtPROCESS_GROUP_MSTRow
            Dim rowdtPROCESS_GROUP_MSTRow As dtPROCESS_GROUP_MSTRow = CType(Me.NewRow,dtPROCESS_GROUP_MSTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PROCESS_GROUP_SEQ, PROCESS_GROUP_NAME}
            rowdtPROCESS_GROUP_MSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPROCESS_GROUP_MSTRow)
            Return rowdtPROCESS_GROUP_MSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPROCESS_GROUP_ID(ByVal PROCESS_GROUP_ID As Integer) As dtPROCESS_GROUP_MSTRow
            Return CType(Me.Rows.Find(New Object() {PROCESS_GROUP_ID}),dtPROCESS_GROUP_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPROCESS_GROUP_MSTDataTable = CType(MyBase.Clone,dtPROCESS_GROUP_MSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPROCESS_GROUP_MSTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROCESS_GROUP_ID = MyBase.Columns("PROCESS_GROUP_ID")
            Me.columnPROCESS_GROUP_SEQ = MyBase.Columns("PROCESS_GROUP_SEQ")
            Me.columnPROCESS_GROUP_NAME = MyBase.Columns("PROCESS_GROUP_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROCESS_GROUP_ID = New Global.System.Data.DataColumn("PROCESS_GROUP_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_GROUP_ID)
            Me.columnPROCESS_GROUP_SEQ = New Global.System.Data.DataColumn("PROCESS_GROUP_SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_GROUP_SEQ)
            Me.columnPROCESS_GROUP_NAME = New Global.System.Data.DataColumn("PROCESS_GROUP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESS_GROUP_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROCESS_GROUP_ID}, true))
            Me.columnPROCESS_GROUP_ID.AutoIncrement = true
            Me.columnPROCESS_GROUP_ID.AutoIncrementSeed = -1
            Me.columnPROCESS_GROUP_ID.AutoIncrementStep = -1
            Me.columnPROCESS_GROUP_ID.AllowDBNull = false
            Me.columnPROCESS_GROUP_ID.ReadOnly = true
            Me.columnPROCESS_GROUP_ID.Unique = true
            Me.columnPROCESS_GROUP_SEQ.AllowDBNull = false
            Me.columnPROCESS_GROUP_NAME.AllowDBNull = false
            Me.columnPROCESS_GROUP_NAME.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPROCESS_GROUP_MSTRow() As dtPROCESS_GROUP_MSTRow
            Return CType(Me.NewRow,dtPROCESS_GROUP_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPROCESS_GROUP_MSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPROCESS_GROUP_MSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPROCESS_GROUP_MSTRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_GROUP_MSTRowChanged(Me, New dtPROCESS_GROUP_MSTRowChangeEvent(CType(e.Row,dtPROCESS_GROUP_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPROCESS_GROUP_MSTRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_GROUP_MSTRowChanging(Me, New dtPROCESS_GROUP_MSTRowChangeEvent(CType(e.Row,dtPROCESS_GROUP_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPROCESS_GROUP_MSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_GROUP_MSTRowDeleted(Me, New dtPROCESS_GROUP_MSTRowChangeEvent(CType(e.Row,dtPROCESS_GROUP_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPROCESS_GROUP_MSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPROCESS_GROUP_MSTRowDeleting(Me, New dtPROCESS_GROUP_MSTRowChangeEvent(CType(e.Row,dtPROCESS_GROUP_MSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPROCESS_GROUP_MSTRow(ByVal row As dtPROCESS_GROUP_MSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT = New dsCLIENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPROCESS_GROUP_MSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPROCESS_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPROCESS_MST As dtPROCESS_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPROCESS_MST = CType(Me.Table,dtPROCESS_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NAME() As String
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_NAMEColumn),String)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TIME() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_TIMEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TYPE() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_TYPEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENTRANCE_FLAG() As Boolean
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.ENTRANCE_FLAGColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.ENTRANCE_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPPER_PROCESS_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_MST.UPPER_PROCESS_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPPER_PROCESS_NAME' in table 'dtPROCESS_MST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.UPPER_PROCESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_CODE() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_CODEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_GROUP_ID() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_MST.PROCESS_GROUP_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_MST.PROCESS_GROUP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_GROUP_MSTRow() As dtPROCESS_GROUP_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_MST_PROCESS_GROUP_ID")),dtPROCESS_GROUP_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_MST_PROCESS_GROUP_ID"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUPPER_PROCESS_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_MST.UPPER_PROCESS_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUPPER_PROCESS_NAMENull()
            Me(Me.tabledtPROCESS_MST.UPPER_PROCESS_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPAINT_CELLRows() As dtPAINT_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PAINT_CELL_PROCESS_NO") Is Nothing) Then
                Return New dtPAINT_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PAINT_CELL_PROCESS_NO")),dtPAINT_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_OPTION_CELLRows() As dtPROCESS_OPTION_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO") Is Nothing) Then
                Return New dtPROCESS_OPTION_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO")),dtPROCESS_OPTION_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_LINKAGERowsByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO() As dtPROCESS_LINKAGERow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO") Is Nothing) Then
                Return New dtPROCESS_LINKAGERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO")),dtPROCESS_LINKAGERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_LINKAGERowsByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO() As dtPROCESS_LINKAGERow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO") Is Nothing) Then
                Return New dtPROCESS_LINKAGERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO")),dtPROCESS_LINKAGERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPLC_MSTRows() As dtPLC_MSTRow()
            If (Me.Table.ChildRelations("FK_T_PLC_MST_PROCESS_NO") Is Nothing) Then
                Return New dtPLC_MSTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PLC_MST_PROCESS_NO")),dtPLC_MSTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtLOG_DATRows() As dtLOG_DATRow()
            If (Me.Table.ChildRelations("dtPROCESS_MST_dtLOG_DAT") Is Nothing) Then
                Return New dtLOG_DATRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("dtPROCESS_MST_dtLOG_DAT")),dtLOG_DATRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPRODUCTION_DATRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPRODUCTION_DAT As dtPRODUCTION_DATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPRODUCTION_DAT = CType(Me.Table,dtPRODUCTION_DATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTION_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.PRODUCTION_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION_DATE' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.PRODUCTION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ON_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.ON_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ON_TIME' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.LOT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOT_ID' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.LOT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPRODUCTION_DAT.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPRODUCTION_DAT.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BLOCK_MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_MODEL' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BLOCK_MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_SEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.BLOCK_SEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_SEQ' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.BLOCK_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.IMPORT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT_CODE' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.IMPORT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GA_SHOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.GA_SHOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GA_SHOP' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.GA_SHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INDEX_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.INDEX_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INDEX_NO' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.INDEX_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                Return CType(Me(Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn),String)
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                Return CType(Me(Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LANE_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.LANE_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LANE_NO' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.LANE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.SKIT_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKIT_NO' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURRENT_PROCESS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPRODUCTION_DAT.CURRENT_PROCESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURRENT_PROCESS' in table 'dtPRODUCTION_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPRODUCTION_DAT.CURRENT_PROCESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTION_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.PRODUCTION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTION_DATENull()
            Me(Me.tabledtPRODUCTION_DAT.PRODUCTION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsON_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.ON_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetON_TIMENull()
            Me(Me.tabledtPRODUCTION_DAT.ON_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.LOT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_IDNull()
            Me(Me.tabledtPRODUCTION_DAT.LOT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtPRODUCTION_DAT.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_MODELNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BLOCK_MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_MODELNull()
            Me(Me.tabledtPRODUCTION_DAT.BLOCK_MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_SEQNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.BLOCK_SEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_SEQNull()
            Me(Me.tabledtPRODUCTION_DAT.BLOCK_SEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORT_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.IMPORT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORT_CODENull()
            Me(Me.tabledtPRODUCTION_DAT.IMPORT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGA_SHOPNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.GA_SHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGA_SHOPNull()
            Me(Me.tabledtPRODUCTION_DAT.GA_SHOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINDEX_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.INDEX_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINDEX_NONull()
            Me(Me.tabledtPRODUCTION_DAT.INDEX_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLANE_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.LANE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLANE_NONull()
            Me(Me.tabledtPRODUCTION_DAT.LANE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKIT_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.SKIT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKIT_NONull()
            Me(Me.tabledtPRODUCTION_DAT.SKIT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURRENT_PROCESSNull() As Boolean
            Return Me.IsNull(Me.tabledtPRODUCTION_DAT.CURRENT_PROCESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURRENT_PROCESSNull()
            Me(Me.tabledtPRODUCTION_DAT.CURRENT_PROCESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPAINT_CELLRows() As dtPAINT_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT") Is Nothing) Then
                Return New dtPAINT_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT")),dtPAINT_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtSKIT_MSTRows() As dtSKIT_MSTRow()
            If (Me.Table.ChildRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT") Is Nothing) Then
                Return New dtSKIT_MSTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")),dtSKIT_MSTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtLANE_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtLANE_MST As dtLANE_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtLANE_MST = CType(Me.Table,dtLANE_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LANE_NO() As Integer
            Get
                Return CType(Me(Me.tabledtLANE_MST.LANE_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtLANE_MST.LANE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtWBS_ONRows() As dtWBS_ONRow()
            If (Me.Table.ChildRelations("FK_T_WBS_ON_LANE_NO") Is Nothing) Then
                Return New dtWBS_ONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_WBS_ON_LANE_NO")),dtWBS_ONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtLOG_DATRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtLOG_DAT As dtLOG_DATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtLOG_DAT = CType(Me.Table,dtLOG_DATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_ID() As Integer
            Get
                Return CType(Me(Me.tabledtLOG_DAT.LOG_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.LOG_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_TYPE() As Integer
            Get
                Return CType(Me(Me.tabledtLOG_DAT.LOG_TYPEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.LOG_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_LEVEL() As Integer
            Get
                Return CType(Me(Me.tabledtLOG_DAT.LOG_LEVELColumn),Integer)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.LOG_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PC_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtLOG_DAT.PC_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PC_NAME' in table 'dtLOG_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtLOG_DAT.PC_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OCC_DATE() As Date
            Get
                Return CType(Me(Me.tabledtLOG_DAT.OCC_DATEColumn),Date)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.OCC_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOG_CODE() As String
            Get
                Return CType(Me(Me.tabledtLOG_DAT.LOG_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.LOG_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MESSAGE() As String
            Get
                Return CType(Me(Me.tabledtLOG_DAT.MESSAGEColumn),String)
            End Get
            Set
                Me(Me.tabledtLOG_DAT.MESSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtLOG_DAT.PROCESS_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_NO' in table 'dtLOG_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtLOG_DAT.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtLOG_DAT.DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE' in table 'dtLOG_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtLOG_DAT.DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtLOG_DAT.TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME' in table 'dtLOG_DAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtLOG_DAT.TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("dtPROCESS_MST_dtLOG_DAT")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("dtPROCESS_MST_dtLOG_DAT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPC_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtLOG_DAT.PC_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPC_NAMENull()
            Me(Me.tabledtLOG_DAT.PC_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_NONull() As Boolean
            Return Me.IsNull(Me.tabledtLOG_DAT.PROCESS_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_NONull()
            Me(Me.tabledtLOG_DAT.PROCESS_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtLOG_DAT.DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_DATENull()
            Me(Me.tabledtLOG_DAT.DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIMENull() As Boolean
            Return Me.IsNull(Me.tabledtLOG_DAT.TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIMENull()
            Me(Me.tabledtLOG_DAT.TIMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPAINT_CELLRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPAINT_CELL As dtPAINT_CELLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPAINT_CELL = CType(Me.Table,dtPAINT_CELLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESULT_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPAINT_CELL.RESULT_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESULT_DATE' in table 'dtPAINT_CELL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.MODEL_YEARColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.SUFFIX_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_RESULT_DATE() As Date
            Get
                Return CType(Me(Me.tabledtPAINT_CELL.PROCESS_RESULT_DATEColumn),Date)
            End Get
            Set
                Me(Me.tabledtPAINT_CELL.PROCESS_RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PAINT_CELL_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PAINT_CELL_PROCESS_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPRODUCTION_DATRowParent() As dtPRODUCTION_DATRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT")),dtPRODUCTION_DATRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PAINT_CELL_MODEL_YEAR_SUFFIX_CODE_LOT_UNIT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESULT_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPAINT_CELL.RESULT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESULT_DATENull()
            Me(Me.tabledtPAINT_CELL.RESULT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPaintProgressRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPaintProgress As dtPaintProgressDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPaintProgress = CType(Me.Table,dtPaintProgressDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTION_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.PRODUCTION_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION_DATE' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.PRODUCTION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ON_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.ON_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ON_TIME' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPaintProgress.SKIT_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPaintProgress.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.LOT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOT_ID' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.LOT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPaintProgress.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPaintProgress.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPaintProgress.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPaintProgress.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.BLOCK_MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_MODEL' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.BLOCK_MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_RESULT_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.PROCESS_RESULT_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_RESULT_DATE' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.PROCESS_RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.IMPORT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT_CODE' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.IMPORT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GA_SHOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.GA_SHOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GA_SHOP' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.GA_SHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintProgress.Expr1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'dtPaintProgress' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintProgress.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTION_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.PRODUCTION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTION_DATENull()
            Me(Me.tabledtPaintProgress.PRODUCTION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsON_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.ON_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetON_TIMENull()
            Me(Me.tabledtPaintProgress.ON_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.LOT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_IDNull()
            Me(Me.tabledtPaintProgress.LOT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtPaintProgress.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_MODELNull() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.BLOCK_MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_MODELNull()
            Me(Me.tabledtPaintProgress.BLOCK_MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_RESULT_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.PROCESS_RESULT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_RESULT_DATENull()
            Me(Me.tabledtPaintProgress.PROCESS_RESULT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORT_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.IMPORT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORT_CODENull()
            Me(Me.tabledtPaintProgress.IMPORT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGA_SHOPNull() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.GA_SHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGA_SHOPNull()
            Me(Me.tabledtPaintProgress.GA_SHOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tabledtPaintProgress.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tabledtPaintProgress.Expr1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPaintShopRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPaintShop As dtPaintShopDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPaintShop = CType(Me.Table,dtPaintShopDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTION_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.PRODUCTION_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION_DATE' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.PRODUCTION_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ON_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.ON_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ON_TIME' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.ON_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.SKIT_NOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SKIT_NO' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.LOT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOT_ID' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.LOT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtPaintShop.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtPaintShop.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtPaintShop.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtPaintShop.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.BLOCK_MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_MODEL' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.BLOCK_MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLOCK_SEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.BLOCK_SEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOCK_SEQ' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.BLOCK_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_RESULT_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.PROCESS_RESULT_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_RESULT_DATE' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.PROCESS_RESULT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.IMPORT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMPORT_CODE' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.IMPORT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GA_SHOP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPaintShop.GA_SHOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GA_SHOP' in table 'dtPaintShop' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPaintShop.GA_SHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTION_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.PRODUCTION_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTION_DATENull()
            Me(Me.tabledtPaintShop.PRODUCTION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsON_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.ON_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetON_TIMENull()
            Me(Me.tabledtPaintShop.ON_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKIT_NONull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.SKIT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKIT_NONull()
            Me(Me.tabledtPaintShop.SKIT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.LOT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_IDNull()
            Me(Me.tabledtPaintShop.LOT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtPaintShop.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_MODELNull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.BLOCK_MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_MODELNull()
            Me(Me.tabledtPaintShop.BLOCK_MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLOCK_SEQNull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.BLOCK_SEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLOCK_SEQNull()
            Me(Me.tabledtPaintShop.BLOCK_SEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_RESULT_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.PROCESS_RESULT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_RESULT_DATENull()
            Me(Me.tabledtPaintShop.PROCESS_RESULT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORT_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.IMPORT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORT_CODENull()
            Me(Me.tabledtPaintShop.IMPORT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGA_SHOPNull() As Boolean
            Return Me.IsNull(Me.tabledtPaintShop.GA_SHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGA_SHOPNull()
            Me(Me.tabledtPaintShop.GA_SHOPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtWBS_ONRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtWBS_ON As dtWBS_ONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtWBS_ON = CType(Me.Table,dtWBS_ONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LANE_NO() As Integer
            Get
                Return CType(Me(Me.tabledtWBS_ON.LANE_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtWBS_ON.LANE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEQUENCE() As Integer
            Get
                Return CType(Me(Me.tabledtWBS_ON.SEQUENCEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtWBS_ON.SEQUENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Return CType(Me(Me.tabledtWBS_ON.SKIT_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtWBS_ON.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSITION() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtWBS_ON.POSITIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSITION' in table 'dtWBS_ON' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtWBS_ON.POSITIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtLANE_MSTRow() As dtLANE_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_WBS_ON_LANE_NO")),dtLANE_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_WBS_ON_LANE_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtSKIT_MSTRow() As dtSKIT_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_WBS_ON_SKIT_NO")),dtSKIT_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_WBS_ON_SKIT_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSITIONNull() As Boolean
            Return Me.IsNull(Me.tabledtWBS_ON.POSITIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSITIONNull()
            Me(Me.tabledtWBS_ON.POSITIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtSKIT_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtSKIT_MST As dtSKIT_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtSKIT_MST = CType(Me.Table,dtSKIT_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKIT_NO() As Integer
            Get
                Return CType(Me(Me.tabledtSKIT_MST.SKIT_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtSKIT_MST.SKIT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                If Me.IsMODEL_YEARNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtSKIT_MST.MODEL_YEARColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtSKIT_MST.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                If Me.IsSUFFIX_CODENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtSKIT_MST.SUFFIX_CODEColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtSKIT_MST.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                If Me.IsLOT_NONull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtSKIT_MST.LOT_NOColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtSKIT_MST.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                If Me.IsUNITNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtSKIT_MST.UNITColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtSKIT_MST.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPRODUCTION_DATRowParent() As dtPRODUCTION_DATRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT")),dtPRODUCTION_DATRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_SKIT_MST_MODEL_YEAR_SUFFIX_CODE_LOT_NO_UNIT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_YEARNull() As Boolean
            Return Me.IsNull(Me.tabledtSKIT_MST.MODEL_YEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_YEARNull()
            Me(Me.tabledtSKIT_MST.MODEL_YEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUFFIX_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtSKIT_MST.SUFFIX_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUFFIX_CODENull()
            Me(Me.tabledtSKIT_MST.SUFFIX_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOT_NONull() As Boolean
            Return Me.IsNull(Me.tabledtSKIT_MST.LOT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOT_NONull()
            Me(Me.tabledtSKIT_MST.LOT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNITNull() As Boolean
            Return Me.IsNull(Me.tabledtSKIT_MST.UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNITNull()
            Me(Me.tabledtSKIT_MST.UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetT_WBS_ONRows() As dtWBS_ONRow()
            If (Me.Table.ChildRelations("FK_T_WBS_ON_SKIT_NO") Is Nothing) Then
                Return New dtWBS_ONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_WBS_ON_SKIT_NO")),dtWBS_ONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtOPTION_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtOPTION_MST As dtOPTION_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtOPTION_MST = CType(Me.Table,dtOPTION_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_ID() As Integer
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_NAME() As String
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_NAMEColumn),String)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_SEQ() As Integer
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_SEQColumn),Integer)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_CODE() As String
            Get
                If Me.IsOPTION_CODENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabledtOPTION_MST.OPTION_CODEColumn),String)
                End If
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_DISPLAY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOPTION_MST.OPTION_DISPLAYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTION_DISPLAY' in table 'dtOPTION_MST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_DISPLAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_TYPE() As Integer
            Get
                Return CType(Me(Me.tabledtOPTION_MST.OPTION_TYPEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_SEQ_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOPTION_MST.OPTION_SEQ_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTION_SEQ_NAME' in table 'dtOPTION_MST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOPTION_MST.OPTION_SEQ_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTION_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtOPTION_MST.OPTION_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTION_CODENull()
            Me(Me.tabledtOPTION_MST.OPTION_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTION_DISPLAYNull() As Boolean
            Return Me.IsNull(Me.tabledtOPTION_MST.OPTION_DISPLAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTION_DISPLAYNull()
            Me(Me.tabledtOPTION_MST.OPTION_DISPLAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTION_SEQ_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtOPTION_MST.OPTION_SEQ_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTION_SEQ_NAMENull()
            Me(Me.tabledtOPTION_MST.OPTION_SEQ_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtMODEL_OPTION_CELLRows() As dtMODEL_OPTION_CELLRow()
            If (Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID") Is Nothing) Then
                Return New dtMODEL_OPTION_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID")),dtMODEL_OPTION_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_OPTION_CELLRows() As dtPROCESS_OPTION_CELLRow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_OPTION_CELL_OPTION_ID") Is Nothing) Then
                Return New dtPROCESS_OPTION_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_OPTION_CELL_OPTION_ID")),dtPROCESS_OPTION_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtInstructionDataRows() As dtInstructionDataRow()
            If (Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID1") Is Nothing) Then
                Return New dtInstructionDataRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID1")),dtInstructionDataRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtMODEL_OPTION_ROWRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtMODEL_OPTION_ROW As dtMODEL_OPTION_ROWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtMODEL_OPTION_ROW = CType(Me.Table,dtMODEL_OPTION_ROWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_OPTION_ROW_ID() As Integer
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_ROW.MODEL_OPTION_ROW_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_ROW.MODEL_OPTION_ROW_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR_PATTERN() As String
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_ROW.MODEL_YEAR_PATTERNColumn),String)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_ROW.MODEL_YEAR_PATTERNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE_PATTERN() As String
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_ROW.SUFFIX_CODE_PATTERNColumn),String)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_ROW.SUFFIX_CODE_PATTERNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMODEL_OPTION_ROW.MODEL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL_CODE' in table 'dtMODEL_OPTION_ROW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_ROW.MODEL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODEL_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtMODEL_OPTION_ROW.MODEL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODEL_CODENull()
            Me(Me.tabledtMODEL_OPTION_ROW.MODEL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtMODEL_OPTION_CELLRows() As dtMODEL_OPTION_CELLRow()
            If (Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID") Is Nothing) Then
                Return New dtMODEL_OPTION_CELLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID")),dtMODEL_OPTION_CELLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtInstructionDataRows() As dtInstructionDataRow()
            If (Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1") Is Nothing) Then
                Return New dtInstructionDataRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1")),dtInstructionDataRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtMODEL_OPTION_CELLRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtMODEL_OPTION_CELL As dtMODEL_OPTION_CELLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtMODEL_OPTION_CELL = CType(Me.Table,dtMODEL_OPTION_CELLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_OPTION_ROW_ID() As Integer
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_CELL.MODEL_OPTION_ROW_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_CELL.MODEL_OPTION_ROW_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_ID() As Integer
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_CELL.OPTION_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_CELL.OPTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_USED() As Boolean
            Get
                Return CType(Me(Me.tabledtMODEL_OPTION_CELL.IS_USEDColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtMODEL_OPTION_CELL.IS_USEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtMODEL_OPTION_ROWRow() As dtMODEL_OPTION_ROWRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID")),dtMODEL_OPTION_ROWRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtOPTION_MSTRow() As dtOPTION_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID")),dtOPTION_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtOPT_MST_COL_LENGTHRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtOPT_MST_COL_LENGTH As dtOPT_MST_COL_LENGTHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtOPT_MST_COL_LENGTH = CType(Me.Table,dtOPT_MST_COL_LENGTHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COL_OPTION_NAME_LEN() As Short
            Get
                Try 
                    Return CType(Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_NAME_LENColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL_OPTION_NAME_LEN' in table 'dtOPT_MST_COL_LENGTH' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_NAME_LENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COL_OPTION_CODE_LEN() As Short
            Get
                Try 
                    Return CType(Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_CODE_LENColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL_OPTION_CODE_LEN' in table 'dtOPT_MST_COL_LENGTH' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_CODE_LENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COL_OPTION_DISPLAY_LEN() As Short
            Get
                Try 
                    Return CType(Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_DISPLAY_LENColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL_OPTION_DISPLAY_LEN' in table 'dtOPT_MST_COL_LENGTH' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_DISPLAY_LENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOL_OPTION_NAME_LENNull() As Boolean
            Return Me.IsNull(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_NAME_LENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOL_OPTION_NAME_LENNull()
            Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_NAME_LENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOL_OPTION_CODE_LENNull() As Boolean
            Return Me.IsNull(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_CODE_LENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOL_OPTION_CODE_LENNull()
            Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_CODE_LENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOL_OPTION_DISPLAY_LENNull() As Boolean
            Return Me.IsNull(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_DISPLAY_LENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOL_OPTION_DISPLAY_LENNull()
            Me(Me.tabledtOPT_MST_COL_LENGTH.COL_OPTION_DISPLAY_LENColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPROCESS_OPTION_CELLRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPROCESS_OPTION_CELL As dtPROCESS_OPTION_CELLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPROCESS_OPTION_CELL = CType(Me.Table,dtPROCESS_OPTION_CELLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_OPTION_CELL.PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_OPTION_CELL.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_ID() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_OPTION_CELL.OPTION_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_OPTION_CELL.OPTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_USED() As Boolean
            Get
                Return CType(Me(Me.tabledtPROCESS_OPTION_CELL.IS_USEDColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtPROCESS_OPTION_CELL.IS_USEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtOPTION_MSTRow() As dtOPTION_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_OPTION_CELL_OPTION_ID")),dtOPTION_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_OPTION_CELL_OPTION_ID"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_OPTION_CELL_PROCESS_NO"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtInstructionDataRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtInstructionData As dtInstructionDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtInstructionData = CType(Me.Table,dtInstructionDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_YEAR() As String
            Get
                Return CType(Me(Me.tabledtInstructionData.MODEL_YEARColumn),String)
            End Get
            Set
                Me(Me.tabledtInstructionData.MODEL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUFFIX_CODE() As String
            Get
                Return CType(Me(Me.tabledtInstructionData.SUFFIX_CODEColumn),String)
            End Get
            Set
                Me(Me.tabledtInstructionData.SUFFIX_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOT_NO() As String
            Get
                Return CType(Me(Me.tabledtInstructionData.LOT_NOColumn),String)
            End Get
            Set
                Me(Me.tabledtInstructionData.LOT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Return CType(Me(Me.tabledtInstructionData.UNITColumn),String)
            End Get
            Set
                Me(Me.tabledtInstructionData.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL_OPTION_ROW_ID() As Integer
            Get
                Return CType(Me(Me.tabledtInstructionData.MODEL_OPTION_ROW_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtInstructionData.MODEL_OPTION_ROW_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_ID() As Integer
            Get
                Return CType(Me(Me.tabledtInstructionData.OPTION_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtInstructionData.OPTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPTION_DISPLAY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInstructionData.OPTION_DISPLAYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPTION_DISPLAY' in table 'dtInstructionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInstructionData.OPTION_DISPLAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtMODEL_OPTION_ROWRow() As dtMODEL_OPTION_ROWRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1")),dtMODEL_OPTION_ROWRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_MODEL_OPTION_ROW_ID1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtOPTION_MSTRow() As dtOPTION_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID1")),dtOPTION_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_MODEL_OPTION_CELL_OPTION_ID1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPTION_DISPLAYNull() As Boolean
            Return Me.IsNull(Me.tabledtInstructionData.OPTION_DISPLAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPTION_DISPLAYNull()
            Me(Me.tabledtInstructionData.OPTION_DISPLAYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPROCESS_LINKAGERow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPROCESS_LINKAGE As dtPROCESS_LINKAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPROCESS_LINKAGE = CType(Me.Table,dtPROCESS_LINKAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FROM_PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TO_PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_LINKAGE.TO_PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.TO_PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FROM_PROCESS_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FROM_PROCESS_NAME' in table 'dtPROCESS_LINKAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TIME() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TIMEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_TIME' in table 'dtPROCESS_LINKAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_TYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESS_TYPE' in table 'dtPROCESS_LINKAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENTRANCE_FLAG() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPROCESS_LINKAGE.ENTRANCE_FLAGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENTRANCE_FLAG' in table 'dtPROCESS_LINKAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPROCESS_LINKAGE.ENTRANCE_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_FROM_PROCESS_NO() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_LINKAGE_FROM_PROCESS_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRowByFK_T_PROCESS_LINKAGE_TO_PROCESS_NO() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PROCESS_LINKAGE_TO_PROCESS_NO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFROM_PROCESS_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFROM_PROCESS_NAMENull()
            Me(Me.tabledtPROCESS_LINKAGE.FROM_PROCESS_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_TIMENull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_LINKAGE.PROCESS_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_TIMENull()
            Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESS_TYPENull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_LINKAGE.PROCESS_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESS_TYPENull()
            Me(Me.tabledtPROCESS_LINKAGE.PROCESS_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENTRANCE_FLAGNull() As Boolean
            Return Me.IsNull(Me.tabledtPROCESS_LINKAGE.ENTRANCE_FLAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENTRANCE_FLAGNull()
            Me(Me.tabledtPROCESS_LINKAGE.ENTRANCE_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPLC_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPLC_MST As dtPLC_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPLC_MST = CType(Me.Table,dtPLC_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_ID() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STAGE_CODE() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.STAGE_CODEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.STAGE_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_NET() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_NETColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_NETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_NODE() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_NODEColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_NODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_UNIT() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_UNITColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property READ_DM() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.READ_DMColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.READ_DMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WRITE_DATA_DM() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.WRITE_DATA_DMColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.WRITE_DATA_DMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WRITE_STATUS_DM() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.WRITE_STATUS_DMColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.WRITE_STATUS_DMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_NO() As Integer
            Get
                Return CType(Me(Me.tabledtPLC_MST.PROCESS_NOColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PROCESS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLC_ONLINE_FLAG() As Boolean
            Get
                Return CType(Me(Me.tabledtPLC_MST.PLC_ONLINE_FLAGColumn),Boolean)
            End Get
            Set
                Me(Me.tabledtPLC_MST.PLC_ONLINE_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dtPROCESS_MSTRow() As dtPROCESS_MSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_T_PLC_MST_PROCESS_NO")),dtPROCESS_MSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_T_PLC_MST_PROCESS_NO"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPROCESS_GROUP_MSTRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPROCESS_GROUP_MST As dtPROCESS_GROUP_MSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPROCESS_GROUP_MST = CType(Me.Table,dtPROCESS_GROUP_MSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_GROUP_ID() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_GROUP_SEQ() As Integer
            Get
                Return CType(Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_SEQColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESS_GROUP_NAME() As String
            Get
                Return CType(Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_NAMEColumn),String)
            End Get
            Set
                Me(Me.tabledtPROCESS_GROUP_MST.PROCESS_GROUP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdtPROCESS_MSTRows() As dtPROCESS_MSTRow()
            If (Me.Table.ChildRelations("FK_T_PROCESS_MST_PROCESS_GROUP_ID") Is Nothing) Then
                Return New dtPROCESS_MSTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_T_PROCESS_MST_PROCESS_GROUP_ID")),dtPROCESS_MSTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPROCESS_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPROCESS_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPROCESS_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPROCESS_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPRODUCTION_DATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPRODUCTION_DATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPRODUCTION_DATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPRODUCTION_DATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtLANE_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtLANE_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtLANE_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtLANE_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtLOG_DATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtLOG_DATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtLOG_DATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtLOG_DATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPAINT_CELLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPAINT_CELLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPAINT_CELLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPAINT_CELLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPaintProgressRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPaintProgressRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPaintProgressRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPaintProgressRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPaintShopRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPaintShopRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPaintShopRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPaintShopRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtWBS_ONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtWBS_ONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtWBS_ONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtWBS_ONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtSKIT_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtSKIT_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtSKIT_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtSKIT_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtOPTION_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtOPTION_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtOPTION_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtOPTION_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtMODEL_OPTION_ROWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtMODEL_OPTION_ROWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtMODEL_OPTION_ROWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtMODEL_OPTION_ROWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtMODEL_OPTION_CELLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtMODEL_OPTION_CELLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtMODEL_OPTION_CELLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtMODEL_OPTION_CELLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtOPT_MST_COL_LENGTHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtOPT_MST_COL_LENGTHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtOPT_MST_COL_LENGTHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtOPT_MST_COL_LENGTHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPROCESS_OPTION_CELLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPROCESS_OPTION_CELLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPROCESS_OPTION_CELLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPROCESS_OPTION_CELLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtInstructionDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtInstructionDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtInstructionDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtInstructionDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPROCESS_LINKAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPROCESS_LINKAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPROCESS_LINKAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPROCESS_LINKAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPLC_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPLC_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPLC_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPLC_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPROCESS_GROUP_MSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPROCESS_GROUP_MSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPROCESS_GROUP_MSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPROCESS_GROUP_MSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsCLIENTTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPROCESS_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPROCESS_MST"
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("PROCESS_NAME", "PROCESS_NAME")
            tableMapping.ColumnMappings.Add("PROCESS_TIME", "PROCESS_TIME")
            tableMapping.ColumnMappings.Add("PROCESS_TYPE", "PROCESS_TYPE")
            tableMapping.ColumnMappings.Add("ENTRANCE_FLAG", "ENTRANCE_FLAG")
            tableMapping.ColumnMappings.Add("UPPER_PROCESS_NAME", "UPPER_PROCESS_NAME")
            tableMapping.ColumnMappings.Add("PROCESS_CODE", "PROCESS_CODE")
            tableMapping.ColumnMappings.Add("PROCESS_GROUP_ID", "PROCESS_GROUP_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PROCESS_MST] WHERE (([PROCESS_NAME] = @Original_PROCESS_NAME) AND "& _ 
                "([PROCESS_TIME] = @Original_PROCESS_TIME) AND ([PROCESS_TYPE] = @Original_PROCES"& _ 
                "S_TYPE) AND ([PROCESS_NO] = @Original_PROCESS_NO) AND ([ENTRANCE_FLAG] = @Origin"& _ 
                "al_ENTRANCE_FLAG) AND ([PROCESS_CODE] = @Original_PROCESS_CODE) AND ([PROCESS_GR"& _ 
                "OUP_ID] = @Original_PROCESS_GROUP_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENTRANCE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_GROUP_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PROCESS_MST] ([PROCESS_NAME], [PROCESS_TIME], [PROCESS_TYPE], [ENT"& _ 
                "RANCE_FLAG], [PROCESS_CODE], [PROCESS_GROUP_ID]) VALUES (@PROCESS_NAME, @PROCESS"& _ 
                "_TIME, @PROCESS_TYPE, @ENTRANCE_FLAG, @PROCESS_CODE, @PROCESS_GROUP_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, PROCESS_NO, ENTRANCE_FLAG, UPPER(PROC"& _ 
                "ESS_NAME) AS UPPER_PROCESS_NAME, PROCESS_CODE, PROCESS_GROUP_ID FROM T_PROCESS_M"& _ 
                "ST WHERE (PROCESS_NO = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENTRANCE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_GROUP_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PROCESS_MST] SET [PROCESS_NAME] = @PROCESS_NAME, [PROCESS_TIME] = @PROC"& _ 
                "ESS_TIME, [PROCESS_TYPE] = @PROCESS_TYPE, [ENTRANCE_FLAG] = @ENTRANCE_FLAG, [PRO"& _ 
                "CESS_CODE] = @PROCESS_CODE, [PROCESS_GROUP_ID] = @PROCESS_GROUP_ID WHERE (([PROC"& _ 
                "ESS_NAME] = @Original_PROCESS_NAME) AND ([PROCESS_TIME] = @Original_PROCESS_TIME"& _ 
                ") AND ([PROCESS_TYPE] = @Original_PROCESS_TYPE) AND ([PROCESS_NO] = @Original_PR"& _ 
                "OCESS_NO) AND ([ENTRANCE_FLAG] = @Original_ENTRANCE_FLAG) AND ([PROCESS_CODE] = "& _ 
                "@Original_PROCESS_CODE) AND ([PROCESS_GROUP_ID] = @Original_PROCESS_GROUP_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, PROCESS_NO, ENTRANCE_FLAG, UPP"& _ 
                "ER(PROCESS_NAME) AS UPPER_PROCESS_NAME, PROCESS_CODE, PROCESS_GROUP_ID FROM T_PR"& _ 
                "OCESS_MST WHERE (PROCESS_NO = @PROCESS_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENTRANCE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_GROUP_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_TIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENTRANCE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_GROUP_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, PROCESS_NO, ENTRANCE_FLAG, U"& _ 
                "PPER(PROCESS_NAME) AS UPPER_PROCESS_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PROCESS_CODE, "& _ 
                "PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, PROCESS_NAME, PROCESS_NO, P"& _ 
                "ROCESS_TIME, PROCESS_TYPE FROM T_PROCESS_MST WHERE (LABEL_NAME IS NOT NULL) ORDE"& _ 
                "R BY LABEL_NAME"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     TOP (@BLOCK) 0 AS INDEX_NO, PROCESS_NO, PROCESS_NAME, PROCESS_TYPE, PR"& _ 
                "OCESS_TIME, ENTRANCE_FLAG, PROCESS_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT"& _ 
                "     PROCESS_NO, PROCESS_NAME, PROCESS_TYPE, PROCESS_TIME, ENTRANCE_FLAG, PROCES"& _ 
                "S_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          T_PROCESS_MST AS"& _ 
                " my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (PROCESS_TYPE >= @PROCESS_TYPE) AND (PROC"& _ 
                "ESS_TYPE <"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  (SELECT     TOP (1"& _ 
                ") MAX(PROCESS_TYPE) AS MAX_PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                       "& _ 
                "             FROM          T_PROCESS_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "              WHERE      (PROCESS_TYPE >= @PROCESS_TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "                              GROUP BY PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                         ORDER BY PROCESS_TYPE DESC)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "                        (PROCESS_TYPE >= @PROCESS_TYPE) AND (PROCESS_TYPE ="&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                                               (SELECT     TOP (1) MAX(PROCESS_T"& _ 
                "YPE) AS MAX_PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                    FR"& _ 
                "OM          T_PROCESS_MST AS T_PROCESS_MST_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                  "& _ 
                "                  WHERE      (PROCESS_TYPE >= @PROCESS_TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "                                  GROUP BY PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "                             ORDER BY PROCESS_TYPE DESC)) AND (1 = @INCLUDE_WBS_"& _ 
                "PROGRESS)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (PROCESS_TYPE = @PROCESS_TYPE)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           (NOT (PROCESS_CODE < @PROCESS_CODE))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY PROCESS_TYPE, PROCESS_"& _ 
                "CODE"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INCLUDE_WBS_PROGRESS", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     COUNT(*) AS OffsetBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     PROCESS_NO, PROCESS_N"& _ 
                "AME, PROCESS_TYPE, PROCESS_TIME, ENTRANCE_FLAG, PROCESS_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          (SELECT     PROCESS_NO, PROCESS_NAME, PROC"& _ 
                "ESS_TYPE, PROCESS_TIME, ENTRANCE_FLAG, PROCESS_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                                       FROM          T_PROCESS_MST AS my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                         WHERE      (PROCESS_TYPE <= @PROCESS_TY"& _ 
                "PE)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (NOT (PROCESS_TYPE = @PROCESS_TYPE"& _ 
                ")) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              (NOT (PROCESS_CODE > @PROCE"& _ 
                "SS_CODE))) AS derivedtbl_1"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, PROCESS_NAME, PROCESS_NO, P"& _ 
                "ROCESS_TIME, PROCESS_TYPE FROM T_PROCESS_MST WHERE (PROCESS_TYPE = @FIRST_PROCES"& _ 
                "S_TYPE) OR (PROCESS_TYPE = @SECOND_PROCESS_TYPE) AND (ENTRANCE_FLAG = @ENTRANCE_"& _ 
                "FLAG)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIRST_PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECOND_PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENTRANCE_FLAG", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "ENTRANCE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     TOP (@BLOCK) 0 AS INDEX_NO, PROCESS_NO, PROCESS_NAME, PROCESS_TYPE, PR"& _ 
                "OCESS_TIME, ENTRANCE_FLAG, PROCESS_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT"& _ 
                "     PROCESS_NO, PROCESS_NAME, PROCESS_TYPE, PROCESS_TIME, ENTRANCE_FLAG, PROCES"& _ 
                "S_CODE,  PROCESS_GROUP_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          T_PROCESS_MST AS"& _ 
                " my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (PROCESS_TYPE <= @PROCESS_TYPE) AND (PROC"& _ 
                "ESS_TYPE >"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  (SELECT     TOP (1"& _ 
                ") MIN(PROCESS_TYPE) AS MIN_PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                       "& _ 
                "             FROM          T_PROCESS_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "              WHERE      (PROCESS_TYPE <= @PROCESS_TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "                              GROUP BY PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                         ORDER BY PROCESS_TYPE)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                           "& _ 
                "                   (PROCESS_TYPE <= @PROCESS_TYPE) AND (PROCESS_TYPE ="&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                                          (SELECT     TOP (1) MIN(PROCESS_TYPE) "& _ 
                "AS MIN_PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                    FROM   "& _ 
                "       T_PROCESS_MST AS T_PROCESS_MST_1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                       "& _ 
                "             WHERE      (PROCESS_TYPE <= @PROCESS_TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "                             GROUP BY PROCESS_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            "& _ 
                "                        ORDER BY PROCESS_TYPE)) AND (1 = @INCLUDE_FINISHING)) AS"& _ 
                " sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (PROCESS_TYPE = @PROCESS_TYPE)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (N"& _ 
                "OT (PROCESS_CODE > @PROCESS_CODE))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY PROCESS_TYPE DESC, PROCESS_CODE DES"& _ 
                "C"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INCLUDE_FINISHING", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT TOP (1) ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, PROCESS_NAME, PROCE"& _ 
                "SS_NO, PROCESS_TIME, PROCESS_TYPE FROM T_PROCESS_MST WHERE (PROCESS_NAME LIKE @P"& _ 
                "ROCESS_NAME) AND (PROCESS_TYPE >= @PROCESS_TYPE) AND (PROCESS_TYPE < (SELECT TOP"& _ 
                " (1) MAX(PROCESS_TYPE) AS MAX_PROCESS_TYPE FROM T_PROCESS_MST AS T_PROCESS_MST_1"& _ 
                " WHERE (PROCESS_TYPE >= @PROCESS_TYPE) GROUP BY PROCESS_TYPE ORDER BY PROCESS_TY"& _ 
                "PE DESC)) ORDER BY PROCESS_TYPE, PROCESS_CODE"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NAME", Global.System.Data.SqlDbType.VarChar, 60, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, PROCESS_NAME, PROCESS_NO, P"& _ 
                "ROCESS_TIME, PROCESS_TYPE FROM T_PROCESS_MST WHERE (PROCESS_NO = @procNo)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@procNo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "select * from T_PROCESS_MST where PROCESS_GROUP_ID = @proc_group_id order by PROC"& _ 
                "ESS_CODE"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@proc_group_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtPROCESS_MSTDataTable = New dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLabelName(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLabelName() As dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsCLIENT.dtPROCESS_MSTDataTable = New dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable, ByVal BLOCK As Integer, ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer, ByVal INCLUDE_WBS_PROGRESS As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INCLUDE_WBS_PROGRESS,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal BLOCK As Integer, ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer, ByVal INCLUDE_WBS_PROGRESS As Decimal) As dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INCLUDE_WBS_PROGRESS,Decimal)
            Dim dataTable As dsCLIENT.dtPROCESS_MSTDataTable = New dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPassResult(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable, ByVal FIRST_PROCESS_TYPE As Integer, ByVal SECOND_PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIRST_PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SECOND_PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENTRANCE_FLAG,Boolean)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPassResult(ByVal FIRST_PROCESS_TYPE As Integer, ByVal SECOND_PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean) As dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIRST_PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(SECOND_PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(ENTRANCE_FLAG,Boolean)
            Dim dataTable As dsCLIENT.dtPROCESS_MSTDataTable = New dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable, ByVal BLOCK As Integer, ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer, ByVal INCLUDE_FINISHING As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INCLUDE_FINISHING,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal BLOCK As Integer, ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer, ByVal INCLUDE_FINISHING As Decimal) As dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(INCLUDE_FINISHING,Decimal)
            Dim dataTable As dsCLIENT.dtPROCESS_MSTDataTable = New dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProcessName(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable, ByVal PROCESS_NAME As String, ByVal PROCESS_TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROCESS_NAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROCESS_NAME,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProcessName(ByVal PROCESS_NAME As String, ByVal PROCESS_TYPE As Integer) As dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROCESS_NAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROCESS_NAME,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(PROCESS_TYPE,Integer)
            Dim dataTable As dsCLIENT.dtPROCESS_MSTDataTable = New dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProcessNO(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable, ByVal procNo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(procNo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProcessNO(ByVal procNo As Integer) As dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(procNo,Integer)
            Dim dataTable As dsCLIENT.dtPROCESS_MSTDataTable = New dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProcGroupID(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable, ByVal proc_group_id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_group_id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProcGroupID(ByVal proc_group_id As Integer) As dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_group_id,Integer)
            Dim dataTable As dsCLIENT.dtPROCESS_MSTDataTable = New dsCLIENT.dtPROCESS_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtPROCESS_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPROCESS_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROCESS_NAME As String, ByVal Original_PROCESS_TIME As Integer, ByVal Original_PROCESS_TYPE As Integer, ByVal Original_PROCESS_NO As Integer, ByVal Original_ENTRANCE_FLAG As Boolean, ByVal Original_PROCESS_CODE As Integer, ByVal Original_PROCESS_GROUP_ID As Integer) As Integer
            If (Original_PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROCESS_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROCESS_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PROCESS_TIME,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PROCESS_TYPE,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ENTRANCE_FLAG,Boolean)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PROCESS_CODE,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PROCESS_GROUP_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean, ByVal PROCESS_CODE As Integer, ByVal PROCESS_GROUP_ID As Integer) As Integer
            If (PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROCESS_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROCESS_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROCESS_TIME,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENTRANCE_FLAG,Boolean)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PROCESS_GROUP_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean, ByVal PROCESS_CODE As Integer, ByVal PROCESS_GROUP_ID As Integer, ByVal Original_PROCESS_NAME As String, ByVal Original_PROCESS_TIME As Integer, ByVal Original_PROCESS_TYPE As Integer, ByVal Original_PROCESS_NO As Integer, ByVal Original_ENTRANCE_FLAG As Boolean, ByVal Original_PROCESS_CODE As Integer, ByVal Original_PROCESS_GROUP_ID As Integer, ByVal PROCESS_NO As Integer) As Integer
            If (PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROCESS_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROCESS_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROCESS_TIME,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PROCESS_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENTRANCE_FLAG,Boolean)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PROCESS_CODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PROCESS_GROUP_ID,Integer)
            If (Original_PROCESS_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROCESS_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PROCESS_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PROCESS_TIME,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PROCESS_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ENTRANCE_FLAG,Boolean)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PROCESS_CODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PROCESS_GROUP_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_NAME As String, ByVal PROCESS_TIME As Integer, ByVal PROCESS_TYPE As Integer, ByVal ENTRANCE_FLAG As Boolean, ByVal PROCESS_CODE As Integer, ByVal PROCESS_GROUP_ID As Integer, ByVal Original_PROCESS_NAME As String, ByVal Original_PROCESS_TIME As Integer, ByVal Original_PROCESS_TYPE As Integer, ByVal Original_PROCESS_NO As Integer, ByVal Original_ENTRANCE_FLAG As Boolean, ByVal Original_PROCESS_CODE As Integer, ByVal Original_PROCESS_GROUP_ID As Integer) As Integer
            Return Me.Update(PROCESS_NAME, PROCESS_TIME, PROCESS_TYPE, ENTRANCE_FLAG, PROCESS_CODE, PROCESS_GROUP_ID, Original_PROCESS_NAME, Original_PROCESS_TIME, Original_PROCESS_TYPE, Original_PROCESS_NO, Original_ENTRANCE_FLAG, Original_PROCESS_CODE, Original_PROCESS_GROUP_ID, Original_PROCESS_NO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function FillByOffsetBase(ByVal PROCESS_TYPE As Integer, ByVal PROCESS_CODE As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(PROCESS_TYPE,Integer)
            command.Parameters(1).Value = CType(PROCESS_CODE,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPRODUCTION_DAT
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPRODUCTION_DAT"
            tableMapping.ColumnMappings.Add("PRODUCTION_DATE", "PRODUCTION_DATE")
            tableMapping.ColumnMappings.Add("ON_TIME", "ON_TIME")
            tableMapping.ColumnMappings.Add("LOT_ID", "LOT_ID")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("BLOCK_MODEL", "BLOCK_MODEL")
            tableMapping.ColumnMappings.Add("BLOCK_SEQ", "BLOCK_SEQ")
            tableMapping.ColumnMappings.Add("IMPORT_CODE", "IMPORT_CODE")
            tableMapping.ColumnMappings.Add("GA_SHOP", "GA_SHOP")
            tableMapping.ColumnMappings.Add("INDEX_NO", "INDEX_NO")
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("LANE_NO", "LANE_NO")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("CURRENT_PROCESS", "CURRENT_PROCESS")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT    0 AS INDEX_NO, PRODUCTION_DATE, ON_TIME, 0 As SKIT_NO, LOT_ID, MODEL_YE"& _ 
                "AR, SUFFIX_CODE, MODEL_YEAR + SUFFIX_CODE AS MODEL_CODE, LOT_NO, UNIT, BLOCK_MOD"& _ 
                "EL, BLOCK_SEQ, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      IMPORT_CODE, GA_SHOP , 0 AS LANE_NO, cast"& _ 
                "('' as varchar(255)) as CURRENT_PROCESS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PRODUCTION_DAT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     prodDAT.PRODUCTION_DATE, prodDAT.ON_TIME, prodDAT.LOT_ID, sktMST.SKIT_"& _ 
                "NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      prodDAT.MODEL_YEAR + prodDAT.SUFFIX_CODE AS MODEL_CO"& _ 
                "DE, prodDAT.LOT_NO, prodDAT.UNIT, prodDAT.BLOCK_MODEL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      p"& _ 
                "rodDAT.BLOCK_SEQ, CONVERT(varchar, t1.PROCESS_RESULT_DATE, 103) + ' ' + CONVERT("& _ 
                "varchar, t1.PROCESS_RESULT_DATE, 108) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AS PROCESS_RESULT_"& _ 
                "DATE, prodDAT.IMPORT_CODE, prodDAT.GA_SHOP, t1.MODEL_YEAR, t1.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM "& _ 
                "        (SELECT     sub_t1.MODEL_YEAR, sub_t1.SUFFIX_CODE, sub_t1.LOT_NO, sub_t1"& _ 
                ".UNIT, sub_t1.PROCESS_NO, sub_t1.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FRO"& _ 
                "M          (SELECT     pntCELL.MODEL_YEAR, pntCELL.SUFFIX_CODE, pntCELL.LOT_NO, "& _ 
                "pntCELL.UNIT, pntCELL.PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                            "& _ 
                "                          pntCELL.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "                      FROM          T_PROCESS_MST AS procMST INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                                                               T_PAINT_CELL AS p"& _ 
                "ntCELL ON procMST.PROCESS_NO = pntCELL.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             "& _ 
                "                  WHERE      (procMST.PROCESS_TYPE = 0)) AS sub_t1 LEFT OUTER JO"& _ 
                "IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                  (SELECT     pntCELL.MODEL_"& _ 
                "YEAR, pntCELL.SUFFIX_CODE, pntCELL.LOT_NO, pntCELL.UNIT, pntCELL.PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                                                                          pntCEL"& _ 
                "L.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                    FROM "& _ 
                "         T_PROCESS_MST AS procMST INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                  "& _ 
                "                                         T_PAINT_CELL AS pntCELL ON procMST.PROC"& _ 
                "ESS_NO = pntCELL.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   "& _ 
                " WHERE      (procMST.PROCESS_TYPE = 1)) AS sub_t2 ON sub_t1.PROCESS_RESULT_DATE "& _ 
                "< sub_t2.PROCESS_RESULT_DATE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                             "& _ 
                " sub_t1.MODEL_YEAR = sub_t2.MODEL_YEAR AND sub_t1.SUFFIX_CODE = sub_t2.SUFFIX_CO"& _ 
                "DE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              sub_t1.LOT_NO = sub_t2.LO"& _ 
                "T_NO AND sub_t1.UNIT = sub_t2.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (sub_t2.MO"& _ 
                "DEL_YEAR IS NULL) AND (sub_t2.SUFFIX_CODE IS NULL) AND (sub_t2.LOT_NO IS NULL) A"& _ 
                "ND (sub_t2.UNIT IS NULL)) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AS t1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          T_PRODUCTION_DAT AS prodDAT ON t1.MODEL_YEAR = prodDAT.MODEL_YEAR AND "& _ 
                "t1.SUFFIX_CODE = prodDAT.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      t1.LOT_NO = pro"& _ 
                "dDAT.LOT_NO AND t1.UNIT = prodDAT.UNIT INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_SKIT_"& _ 
                "MST AS sktMST ON prodDAT.MODEL_YEAR = sktMST.MODEL_YEAR AND prodDAT.SUFFIX_CODE "& _ 
                "= sktMST.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      prodDAT.LOT_NO = sktMST.LOT_NO "& _ 
                "AND prodDAT.UNIT = sktMST.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY prodDAT.PRODUCTION_DATE, prodDAT.ON_TIM"& _ 
                "E"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT TOP (1) 0 AS INDEX_NO, '' AS MODEL_CODE, x.BLOCK_MODEL, x.BLOCK_SEQ, x.GA_"& _ 
                "SHOP, x.IMPORT_CODE, x.LOT_ID, x.LOT_NO, x.MODEL_YEAR, x.ON_TIME, x.PRODUCTION_D"& _ 
                "ATE, x.SUFFIX_CODE, x.UNIT FROM T_PRODUCTION_DAT AS x INNER JOIN (SELECT pd.PROD"& _ 
                "UCTION_DATE, MAX(pd.ON_TIME) AS ON_TIME FROM T_PRODUCTION_DAT AS pd INNER JOIN T"& _ 
                "_PAINT_CELL AS pc ON pd.MODEL_YEAR = pc.MODEL_YEAR AND pd.SUFFIX_CODE = pc.SUFFI"& _ 
                "X_CODE AND pd.LOT_NO = pc.LOT_NO AND pd.UNIT = pc.UNIT INNER JOIN T_PROCESS_MST "& _ 
                "AS p ON pc.PROCESS_NO = p.PROCESS_NO WHERE (p.PROCESS_TYPE = @PROCESS_TYPE) AND "& _ 
                "(pd.PRODUCTION_DATE = (SELECT MAX(pd_.PRODUCTION_DATE) AS max_PRODUCTION_DATE FR"& _ 
                "OM T_PRODUCTION_DAT AS pd_ INNER JOIN T_PAINT_CELL AS pc_ ON pd_.MODEL_YEAR = pc"& _ 
                "_.MODEL_YEAR AND pd_.SUFFIX_CODE = pc_.SUFFIX_CODE AND pd_.LOT_NO = pc_.LOT_NO A"& _ 
                "ND pd_.UNIT = pc_.UNIT INNER JOIN T_PROCESS_MST AS p_ ON pc_.PROCESS_NO = p_.PRO"& _ 
                "CESS_NO WHERE (p_.PROCESS_TYPE = @PROCESS_TYPE))) GROUP BY pd.PRODUCTION_DATE) A"& _ 
                "S y ON x.PRODUCTION_DATE = y.PRODUCTION_DATE AND x.ON_TIME = y.ON_TIME"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT TOP (1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    pd.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , 0 AS INDEX_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , '' AS MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , sk.S"& _ 
                "KIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM T_PRODUCTION_DAT pd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    LEFT OUTER JOIN T_SKIT_MST sk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ON "& _ 
                "pd.MODEL_YEAR = sk.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND pd.SUFFIX_CODE = sk.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "    AND pd.LOT_NO = sk.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND pd.UNIT = sk.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (pd.MODEL_YE"& _ 
                "AR LIKE @MODEL_YEAR)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (pd.SUFFIX_CODE LIKE @SUFFIX_CODE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (pd.LO"& _ 
                "T_NO LIKE @LOT_NO)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (pd.UNIT LIKE @UNIT)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (sk.SKIT_NO = @SKIT_NO"& _ 
                " OR @SKIT_NO = 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY pd.PRODUCTION_DATE, pd.ON_TIME"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TOP (@Block)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    0 AS INDEX_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.PRODUCTION_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.ON_T"& _ 
                "IME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , sk.SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.LOT_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.SUFFIX_COD"& _ 
                "E"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.MODEL_YEAR + ot.SUFFIX_CODE AS MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot"& _ 
                ".UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.BLOCK_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.IMPORT_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot."& _ 
                "GA_SHOP"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , @SORT_BLOCK_FLAG AS SORT_BLOCK_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ISNULL(p.PROCESS_NAME,"& _ 
                " '') as CURRENT_PROCESS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        SELECT    pd.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            , CASE WHEN"& _ 
                " (@SORT_BLOCK_FLAG) = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    THEN    CASE WHEN BLOCK_MODEL IS NU"& _ 
                "LL OR rtrim(BLOCK_MODEL) = ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    THEN 'ZZZZZZZ"& _ 
                "Z'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    ELSE BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "          END + "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                CASE WHEN BLOCK_SEQ IS NULL OR"& _ 
                " rtrim(BLOCK_SEQ) = ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                    THEN 'ZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                            ELSE BLOCK_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                END"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    ELSE ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                END + PRODUCTION_DATE AS PARAM1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "       FROM T_PRODUCTION_DAT AS pd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        WHERE ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            CASE WHEN (@SOR"& _ 
                "T_BLOCK_FLAG) = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                THEN    CASE WHEN BLOCK_MODEL IS NULL OR rtri"& _ 
                "m(BLOCK_MODEL) = ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                THEN 'ZZZZZZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "                      ELSE BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            END +"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                       CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ) = ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                             THEN 'ZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                ELSE BL"& _ 
                "OCK_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            END"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ELSE ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            E"& _ 
                "ND + PRODUCTION_DATE >= @PRODUCTION_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ) AS ot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    LEFT O"& _ 
                "UTER JOIN T_SKIT_MST AS sk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ON ot.MODEL_YEAR = sk.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AN"& _ 
                "D ot.SUFFIX_CODE = sk.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ot.LOT_NO = sk.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AN"& _ 
                "D ot.UNIT = sk.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    LEFT OUTER JOIN T_PAINT_CELL pc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ON ot.MODEL_YE"& _ 
                "AR = pc.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ot.SUFFIX_CODE = pc.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ot."& _ 
                "LOT_NO = pc.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND ot.UNIT = pc.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    LEFT OUTER JOIN T_PROCESS"& _ 
                "_MST p"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ON pc.PROCESS_NO = p.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ((NOT (ot.PARAM1 = @PRODU"& _ 
                "CTION_DATE))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    OR (NOT (ot.ON_TIME < @ON_TIME)))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    AND (p.PROCESS_NO IS NU"& _ 
                "LL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        OR EXISTS ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            SELECT "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                pc_.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "              , pc_.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                , pc_.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                ,"& _ 
                " pc_.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM T_PAINT_CELL pc_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            WHERE ot.MODEL_YEAR = "& _ 
                "pc_.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                AND ot.SUFFIX_CODE = pc_.SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "      AND ot.LOT_NO = pc_.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                AND ot.UNIT = pc_.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "      GROUP BY "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                pc_.MODEL_YEAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                , pc_.SUFFIX_CO"& _ 
                "DE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                , pc_.LOT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                , pc_.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            HAVING"& _ 
                " pc.PROCESS_RESULT_DATE = MAX(pc_.PROCESS_RESULT_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER "& _ 
                "BY ot.PARAM1, ot.ON_TIME"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SORT_BLOCK_FLAG", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCTION_DATE", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "PARAM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ON_TIME", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     COUNT(*) AS OffsetBase, @SORT_BLOCK_FLAG as SORT_BLOCK_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     "& _ 
                "    (SELECT     PRODUCTION_DATE, ON_TIME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM          ("& _ 
                "SELECT     PRODUCTION_DATE, ON_TIME,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CASE WHEN (@SORT_BLOCK_FLAG) = 1 THEN CASE"& _ 
                " WHEN BLOCK_MODEL IS NULL OR rtrim(BLOCK_MODEL)= '' THEN 'ZZZZZZZZ' ELSE BLOCK_M"& _ 
                "ODEL END + CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ)= '' THEN 'ZZZ' ELSE B"& _ 
                "LOCK_SEQ END ELSE '' END + PRODUCTION_DATE as PARAM1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          "& _ 
                "                     FROM          T_Production_DAT AS pd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                          WHERE      ((CASE WHEN (@SORT_BLOCK_FLAG) = 1 THEN CAS"& _ 
                "E WHEN BLOCK_MODEL IS NULL OR rtrim(BLOCK_MODEL)= '' THEN 'ZZZZZZZZ' ELSE BLOCK_"& _ 
                "MODEL END + CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ)= '' THEN 'ZZZ' ELSE "& _ 
                "BLOCK_SEQ END ELSE '' END + PRODUCTION_DATE) <= @PRODUCTION_DATE) ) AS ot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                  WHERE      (NOT (PARAM1 = @PRODUCTION_DATE)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                 (NOT (ON_TIME > @ON_TIME))) AS derivedtbl_1"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SORT_BLOCK_FLAG", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCTION_DATE", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ON_TIME", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT TOP (@block)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    0 as INDEX_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , ot.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , null AS SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , "& _ 
                "@SORT_BLOCK_FLAG as SORT_BLOCK_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    , '' AS CURRENT_PROCESS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "  SELECT  pd.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            , CASE WHEN (@SORT_BLOCK_FLAG) = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "THEN CASE WHEN BLOCK_MODEL IS NULL OR rtrim(BLOCK_MODEL)= ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "      THEN 'ZZZZZZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        ELSE BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "      END +"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ"& _ 
                ")= ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         THEN 'ZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ELSE BLOCK_"& _ 
                "SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     END"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ELSE ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              END + PR"& _ 
                "ODUCTION_DATE as PARAM1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        FROM T_PRODUCTION_DAT AS pd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        WHERE (( C"& _ 
                "ASE WHEN (@SORT_BLOCK_FLAG) = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     THEN CASE WHEN BLOCK_MODEL"& _ 
                " IS NULL OR rtrim(BLOCK_MODEL)= ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              THEN 'ZZZZZZZZ"& _ 
                "'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              ELSE BLOCK_MODEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          END"& _ 
                " +"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          CASE WHEN BLOCK_SEQ IS NULL OR rtrim(BLOCK_SEQ)= '"& _ 
                "'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              THEN 'ZZZ'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                              ELSE "& _ 
                "BLOCK_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          END"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     ELSE ''"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "         END + PRODUCTION_DATE) <= @PRODUCTION_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ) AS ot"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (NOT ("& _ 
                "PARAM1 = @PRODUCTION_DATE))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    OR (NOT (ON_TIME > @ON_TIME))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY PARAM1 "& _ 
                "DESC, ON_TIME DESC"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SORT_BLOCK_FLAG", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCTION_DATE", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "PARAM1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ON_TIME", Global.System.Data.SqlDbType.VarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ON_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT pd.BLOCK_MODEL, pd.BLOCK_SEQ, pd.GA_SHOP, pd.IMPORT_CODE, pd.LOT_ID, pd.LO"& _ 
                "T_NO, pd.MODEL_YEAR, pd.ON_TIME, pd.PRODUCTION_DATE, pd.SUFFIX_CODE, pd.UNIT FRO"& _ 
                "M T_PRODUCTION_DAT AS pd INNER JOIN (SELECT pc_wbs.MODEL_YEAR, pc_wbs.SUFFIX_COD"& _ 
                "E, pc_wbs.LOT_NO, pc_wbs.UNIT, pc_wbs.PROCESS_NO, pc_wbs.PROCESS_RESULT_DATE FRO"& _ 
                "M T_PAINT_CELL AS pc_wbs INNER JOIN T_PROCESS_MST AS p_wbs ON pc_wbs.PROCESS_NO "& _ 
                "= p_wbs.PROCESS_NO WHERE (p_wbs.PROCESS_TYPE = @WBSProcessType)) AS pc_wbs_1 ON "& _ 
                "pd.MODEL_YEAR = pc_wbs_1.MODEL_YEAR AND pd.SUFFIX_CODE = pc_wbs_1.SUFFIX_CODE AN"& _ 
                "D pd.LOT_NO = pc_wbs_1.LOT_NO AND pd.UNIT = pc_wbs_1.UNIT LEFT OUTER JOIN (SELEC"& _ 
                "T pc_pnt.MODEL_YEAR, pc_pnt.SUFFIX_CODE, pc_pnt.LOT_NO, pc_pnt.UNIT, pc_pnt.PROC"& _ 
                "ESS_NO, pc_pnt.PROCESS_RESULT_DATE FROM T_PAINT_CELL AS pc_pnt INNER JOIN T_PROC"& _ 
                "ESS_MST AS p_pnt ON pc_pnt.PROCESS_NO = p_pnt.PROCESS_NO WHERE (p_pnt.PROCESS_TY"& _ 
                "PE > @WBSProcessType)) AS pc_pnt_1 ON pd.MODEL_YEAR = pc_pnt_1.MODEL_YEAR AND pd"& _ 
                ".SUFFIX_CODE = pc_pnt_1.SUFFIX_CODE AND pd.LOT_NO = pc_pnt_1.LOT_NO AND pd.UNIT "& _ 
                "= pc_pnt_1.UNIT WHERE (pc_pnt_1.PROCESS_RESULT_DATE IS NULL) AND (pd.IN_USE_FLAG"& _ 
                " = 1) AND (NOT (pd.LANE_NO IS NULL)) ORDER BY pc_wbs_1.PROCESS_RESULT_DATE"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WBSProcessType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "UPDATE  T_PRODUCTION_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET       LANE_NO = @LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (MODEL_YEAR = @MOD"& _ 
                "EL_YEAR) AND (SUFFIX_CODE = @SUFFIX_CODE) AND (LOT_NO = @LOT_NO) AND (UNIT = @UN"& _ 
                "IT)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANE_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPRODUCTION_DATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtPRODUCTION_DATDataTable = New dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFinishingLine(ByVal dataTable As dsCLIENT.dtPRODUCTION_DATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFinishingLine() As dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsCLIENT.dtPRODUCTION_DATDataTable = New dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLatestResult(ByVal dataTable As dsCLIENT.dtPRODUCTION_DATDataTable, ByVal PROCESS_TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROCESS_TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLatestResult(ByVal PROCESS_TYPE As Integer) As dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(PROCESS_TYPE,Integer)
            Dim dataTable As dsCLIENT.dtPRODUCTION_DATDataTable = New dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModelLotUnit(ByVal dataTable As dsCLIENT.dtPRODUCTION_DATDataTable, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal SKIT_NO As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(SKIT_NO,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModelLotUnit(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal SKIT_NO As Integer) As dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(SKIT_NO,Integer)
            Dim dataTable As dsCLIENT.dtPRODUCTION_DATDataTable = New dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsCLIENT.dtPRODUCTION_DATDataTable, ByVal Block As Integer, ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As Object, ByVal ON_TIME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Block,Integer)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PRODUCTION_DATE,Object)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ON_TIME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal Block As Integer, ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As Object, ByVal ON_TIME As String) As dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Block,Integer)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PRODUCTION_DATE,Object)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ON_TIME,String)
            End If
            Dim dataTable As dsCLIENT.dtPRODUCTION_DATDataTable = New dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsCLIENT.dtPRODUCTION_DATDataTable, ByVal block As Integer, ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As Object, ByVal ON_TIME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PRODUCTION_DATE,Object)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ON_TIME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal block As Integer, ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As Object, ByVal ON_TIME As String) As dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PRODUCTION_DATE,Object)
            End If
            If (ON_TIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ON_TIME,String)
            End If
            Dim dataTable As dsCLIENT.dtPRODUCTION_DATDataTable = New dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByWBSStockData(ByVal dataTable As dsCLIENT.dtPRODUCTION_DATDataTable, ByVal WBSProcessType As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(WBSProcessType,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByWBSStockData(ByVal WBSProcessType As Integer) As dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(WBSProcessType,Integer)
            Dim dataTable As dsCLIENT.dtPRODUCTION_DATDataTable = New dsCLIENT.dtPRODUCTION_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function FillByOffsetBase(ByVal SORT_BLOCK_FLAG As String, ByVal PRODUCTION_DATE As String, ByVal ON_TIME As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            If (SORT_BLOCK_FLAG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SORT_BLOCK_FLAG")
            Else
                command.Parameters(0).Value = CType(SORT_BLOCK_FLAG,String)
            End If
            If (PRODUCTION_DATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODUCTION_DATE")
            Else
                command.Parameters(1).Value = CType(PRODUCTION_DATE,String)
            End If
            If (ON_TIME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(ON_TIME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateLaneNo(ByVal LANE_NO As Global.System.Nullable(Of Integer), ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            If (LANE_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(LANE_NO.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                command.Parameters(1).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                command.Parameters(2).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                command.Parameters(3).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                command.Parameters(4).Value = CType(UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taLANE_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtLANE_MST"
            tableMapping.ColumnMappings.Add("LANE_NO", "LANE_NO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT  LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    T_LANE_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtLANE_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtLANE_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtLANE_MSTDataTable = New dsCLIENT.dtLANE_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taLOG_DAT
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtLOG_DAT"
            tableMapping.ColumnMappings.Add("LOG_ID", "LOG_ID")
            tableMapping.ColumnMappings.Add("LOG_TYPE", "LOG_TYPE")
            tableMapping.ColumnMappings.Add("LOG_LEVEL", "LOG_LEVEL")
            tableMapping.ColumnMappings.Add("PC_NAME", "PC_NAME")
            tableMapping.ColumnMappings.Add("OCC_DATE", "OCC_DATE")
            tableMapping.ColumnMappings.Add("LOG_CODE", "LOG_CODE")
            tableMapping.ColumnMappings.Add("MESSAGE", "MESSAGE")
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("DATE", "DATE")
            tableMapping.ColumnMappings.Add("TIME", "TIME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_LOG_DAT] WHERE (([LOG_ID] = @Original_LOG_ID) AND ([LOG_TYPE] = @O"& _ 
                "riginal_LOG_TYPE) AND ([LOG_LEVEL] = @Original_LOG_LEVEL) AND ((@IsNull_PC_NAME "& _ 
                "= 1 AND [PC_NAME] IS NULL) OR ([PC_NAME] = @Original_PC_NAME)) AND ([OCC_DATE] ="& _ 
                " @Original_OCC_DATE) AND ([LOG_CODE] = @Original_LOG_CODE) AND ([MESSAGE] = @Ori"& _ 
                "ginal_MESSAGE) AND ((@IsNull_PROCESS_NO = 1 AND [PROCESS_NO] IS NULL) OR ([PROCE"& _ 
                "SS_NO] = @Original_PROCESS_NO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_LEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_LEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCC_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MESSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_LOG_DAT] ([LOG_TYPE], [LOG_LEVEL], [PC_NAME], [OCC_DATE], [LOG_COD"& _ 
                "E], [MESSAGE], [PROCESS_NO]) VALUES (@LOG_TYPE, @LOG_LEVEL, @PC_NAME, @OCC_DATE,"& _ 
                " @LOG_CODE, @MESSAGE, @PROCESS_NO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOG_ID, LOG_TYPE, LOG_LEVEL, PC_NAME"& _ 
                ", OCC_DATE, LOG_CODE, MESSAGE, PROCESS_NO, CONVERT (varchar, OCC_DATE, 103) AS D"& _ 
                "ATE, CONVERT (varchar, OCC_DATE, 108) AS TIME FROM T_LOG_DAT WHERE (LOG_ID = SCO"& _ 
                "PE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_LEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCC_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MESSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_LOG_DAT] SET [LOG_TYPE] = @LOG_TYPE, [LOG_LEVEL] = @LOG_LEVEL, [PC_NAME"& _ 
                "] = @PC_NAME, [OCC_DATE] = @OCC_DATE, [LOG_CODE] = @LOG_CODE, [MESSAGE] = @MESSA"& _ 
                "GE, [PROCESS_NO] = @PROCESS_NO WHERE (([LOG_ID] = @Original_LOG_ID) AND ([LOG_TY"& _ 
                "PE] = @Original_LOG_TYPE) AND ([LOG_LEVEL] = @Original_LOG_LEVEL) AND ((@IsNull_"& _ 
                "PC_NAME = 1 AND [PC_NAME] IS NULL) OR ([PC_NAME] = @Original_PC_NAME)) AND ([OCC"& _ 
                "_DATE] = @Original_OCC_DATE) AND ([LOG_CODE] = @Original_LOG_CODE) AND ([MESSAGE"& _ 
                "] = @Original_MESSAGE) AND ((@IsNull_PROCESS_NO = 1 AND [PROCESS_NO] IS NULL) OR"& _ 
                " ([PROCESS_NO] = @Original_PROCESS_NO)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LOG_ID, LOG_TYPE, LOG_LEVEL, P"& _ 
                "C_NAME, OCC_DATE, LOG_CODE, MESSAGE, PROCESS_NO, CONVERT (varchar, OCC_DATE, 103"& _ 
                ") AS DATE, CONVERT (varchar, OCC_DATE, 108) AS TIME FROM T_LOG_DAT WHERE (LOG_ID"& _ 
                " = @LOG_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_LEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCC_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MESSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_LEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_LEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PC_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PC_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PC_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OCC_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOG_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MESSAGE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MESSAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     LOG_ID, LOG_TYPE, LOG_LEVEL, PC_NAME, OCC_DATE, LOG_CODE, MESSAGE, PRO"& _ 
                "CESS_NO, CONVERT(varchar, OCC_DATE, 103) AS DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CONVER"& _ 
                "T(varchar, OCC_DATE, 108) AS TIME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_LOG_DAT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TOP (1000) CONVERT(varchar, OCC_DATE, 103) AS DATE, CONVERT(varchar, O"& _ 
                "CC_DATE, 108) AS TIME, LOG_TYPE, LOG_LEVEL, PC_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      MES"& _ 
                "SAGE, PROCESS_NO, OCC_DATE, LOG_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_LOG_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (LOG_TYP"& _ 
                "E = @logType)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@logType", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LOG_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     TOP (@LOG_COUNT) '[' + CONVERT(varchar(255), OCC_DATE, 120) + '] ' + M"& _ 
                "ESSAGE AS MESSAGE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_LOG_DAT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (LOG_TYPE IN (1, 2)) AND (L"& _ 
                "OG_LEVEL IN (1, 2)) AND (OCC_DATE > @OCC_DATE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OCC_DATE DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOG_COUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OCC_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "OCC_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtLOG_DATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtLOG_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtLOG_DATDataTable = New dsCLIENT.dtLOG_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLogType(ByVal dataTable As dsCLIENT.dtLOG_DATDataTable, ByVal logType As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(logType,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLogType(ByVal logType As Integer) As dsCLIENT.dtLOG_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(logType,Integer)
            Dim dataTable As dsCLIENT.dtLOG_DATDataTable = New dsCLIENT.dtLOG_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOccurDate(ByVal dataTable As dsCLIENT.dtLOG_DATDataTable, ByVal LOG_COUNT As Integer, ByVal OCC_DATE As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOG_COUNT,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OCC_DATE,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOccurDate(ByVal LOG_COUNT As Integer, ByVal OCC_DATE As Date) As dsCLIENT.dtLOG_DATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(LOG_COUNT,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OCC_DATE,Date)
            Dim dataTable As dsCLIENT.dtLOG_DATDataTable = New dsCLIENT.dtLOG_DATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtLOG_DATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtLOG_DAT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LOG_ID As Integer, ByVal Original_LOG_TYPE As Integer, ByVal Original_LOG_LEVEL As Integer, ByVal Original_PC_NAME As String, ByVal Original_OCC_DATE As Date, ByVal Original_LOG_CODE As String, ByVal Original_MESSAGE As String, ByVal Original_PROCESS_NO As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LOG_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LOG_TYPE,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LOG_LEVEL,Integer)
            If (Original_PC_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PC_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_OCC_DATE,Date)
            If (Original_LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOG_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LOG_CODE,String)
            End If
            If (Original_MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MESSAGE")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MESSAGE,String)
            End If
            If (Original_PROCESS_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PROCESS_NO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LOG_TYPE As Integer, ByVal LOG_LEVEL As Integer, ByVal PC_NAME As String, ByVal OCC_DATE As Date, ByVal LOG_CODE As String, ByVal MESSAGE As String, ByVal PROCESS_NO As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(LOG_TYPE,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(LOG_LEVEL,Integer)
            If (PC_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PC_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(OCC_DATE,Date)
            If (LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOG_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LOG_CODE,String)
            End If
            If (MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MESSAGE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MESSAGE,String)
            End If
            If (PROCESS_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PROCESS_NO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LOG_TYPE As Integer,  _
                    ByVal LOG_LEVEL As Integer,  _
                    ByVal PC_NAME As String,  _
                    ByVal OCC_DATE As Date,  _
                    ByVal LOG_CODE As String,  _
                    ByVal MESSAGE As String,  _
                    ByVal PROCESS_NO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LOG_ID As Integer,  _
                    ByVal Original_LOG_TYPE As Integer,  _
                    ByVal Original_LOG_LEVEL As Integer,  _
                    ByVal Original_PC_NAME As String,  _
                    ByVal Original_OCC_DATE As Date,  _
                    ByVal Original_LOG_CODE As String,  _
                    ByVal Original_MESSAGE As String,  _
                    ByVal Original_PROCESS_NO As Global.System.Nullable(Of Integer),  _
                    ByVal LOG_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LOG_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LOG_LEVEL,Integer)
            If (PC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PC_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(OCC_DATE,Date)
            If (LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOG_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LOG_CODE,String)
            End If
            If (MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MESSAGE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MESSAGE,String)
            End If
            If (PROCESS_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PROCESS_NO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_LOG_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_LOG_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_LOG_LEVEL,Integer)
            If (Original_PC_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PC_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_OCC_DATE,Date)
            If (Original_LOG_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOG_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_LOG_CODE,String)
            End If
            If (Original_MESSAGE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MESSAGE")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MESSAGE,String)
            End If
            If (Original_PROCESS_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PROCESS_NO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(LOG_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LOG_TYPE As Integer, ByVal LOG_LEVEL As Integer, ByVal PC_NAME As String, ByVal OCC_DATE As Date, ByVal LOG_CODE As String, ByVal MESSAGE As String, ByVal PROCESS_NO As Global.System.Nullable(Of Integer), ByVal Original_LOG_ID As Integer, ByVal Original_LOG_TYPE As Integer, ByVal Original_LOG_LEVEL As Integer, ByVal Original_PC_NAME As String, ByVal Original_OCC_DATE As Date, ByVal Original_LOG_CODE As String, ByVal Original_MESSAGE As String, ByVal Original_PROCESS_NO As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(LOG_TYPE, LOG_LEVEL, PC_NAME, OCC_DATE, LOG_CODE, MESSAGE, PROCESS_NO, Original_LOG_ID, Original_LOG_TYPE, Original_LOG_LEVEL, Original_PC_NAME, Original_OCC_DATE, Original_LOG_CODE, Original_MESSAGE, Original_PROCESS_NO, Original_LOG_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPAINT_CELL
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPAINT_CELL"
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("RESULT_DATE", "RESULT_DATE")
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("PROCESS_RESULT_DATE", "PROCESS_RESULT_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PAINT_CELL] WHERE (([MODEL_YEAR] = @Original_MODEL_YEAR) AND ([SUF"& _ 
                "FIX_CODE] = @Original_SUFFIX_CODE) AND ([LOT_NO] = @Original_LOT_NO) AND ([UNIT]"& _ 
                " = @Original_UNIT) AND ([PROCESS_NO] = @Original_PROCESS_NO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PAINT_CELL] ([MODEL_YEAR], [SUFFIX_CODE], [LOT_NO], [UNIT], [PROCE"& _ 
                "SS_NO], [PROCESS_RESULT_DATE]) VALUES (@MODEL_YEAR, @SUFFIX_CODE, @LOT_NO, @UNIT"& _ 
                ", @PROCESS_NO, @PROCESS_RESULT_DATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_YEAR, SUFFIX_CODE, LOT_NO, U"& _ 
                "NIT, PROCESS_NO, CONVERT (varchar, PROCESS_RESULT_DATE, 103) + ' ' + CONVERT (va"& _ 
                "rchar, PROCESS_RESULT_DATE, 108) AS RESULT_DATE, PROCESS_RESULT_DATE FROM T_PAIN"& _ 
                "T_CELL WHERE (LOT_NO = @LOT_NO) AND (MODEL_YEAR = @MODEL_YEAR) AND (PROCESS_NO ="& _ 
                " @PROCESS_NO) AND (SUFFIX_CODE = @SUFFIX_CODE) AND (UNIT = @UNIT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_RESULT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_RESULT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PAINT_CELL] SET [MODEL_YEAR] = @MODEL_YEAR, [SUFFIX_CODE] = @SUFFIX_COD"& _ 
                "E, [LOT_NO] = @LOT_NO, [UNIT] = @UNIT, [PROCESS_NO] = @PROCESS_NO, [PROCESS_RESU"& _ 
                "LT_DATE] = @PROCESS_RESULT_DATE WHERE (([MODEL_YEAR] = @Original_MODEL_YEAR) AND"& _ 
                " ([SUFFIX_CODE] = @Original_SUFFIX_CODE) AND ([LOT_NO] = @Original_LOT_NO) AND ("& _ 
                "[UNIT] = @Original_UNIT) AND ([PROCESS_NO] = @Original_PROCESS_NO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MOD"& _ 
                "EL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO, CONVERT (varchar, PROCESS_RESULT"& _ 
                "_DATE, 103) + ' ' + CONVERT (varchar, PROCESS_RESULT_DATE, 108) AS RESULT_DATE, "& _ 
                "PROCESS_RESULT_DATE FROM T_PAINT_CELL WHERE (LOT_NO = @LOT_NO) AND (MODEL_YEAR ="& _ 
                " @MODEL_YEAR) AND (PROCESS_NO = @PROCESS_NO) AND (SUFFIX_CODE = @SUFFIX_CODE) AN"& _ 
                "D (UNIT = @UNIT)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_RESULT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_RESULT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, PROCESS_NO, CONVERT(varchar, PR"& _ 
                "OCESS_RESULT_DATE, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PROCESS"& _ 
                "_RESULT_DATE, 108) AS RESULT_DATE, PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PAINT_CEL"& _ 
                "L"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"prod.MODEL_YEAR, prod.SUFFIX_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"prod.LOT_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"prod.UNIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"paint.PROCESS_NO,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            CONVERT(varchar, paint.PROCESS_RESULT_DATE, 103)"& _ 
                " + ' ' + CONVERT(varchar, paint.PROCESS_RESULT_DATE, 108) AS RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "T_PRODUCTION_DAT prod"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join"&Global.Microsoft.VisualBasic.ChrW(9)&"T_PAINT_CELL paint"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"on"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"paint.MODEL_YEAR = pr"& _ 
                "od.MODEL_YEAR and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"paint.SUFFIX_CODE = prod.SUFFIX_CODE and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"paint.LOT_NO "& _ 
                "= prod.LOT_NO and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"paint.UNIT = prod.UNIT"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE  T_PAINT_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET       PROCESS_RESULT_DATE = @PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                "  (MODEL_YEAR = @MODEL_YEAR) AND (SUFFIX_CODE = @SUFFIX_CODE) AND (LOT_NO = @LOT"& _ 
                "_NO) AND (UNIT = @UNIT) AND (PROCESS_NO = @PROCESS_NO)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_RESULT_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_RESULT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPAINT_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtPAINT_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtPAINT_CELLDataTable = New dsCLIENT.dtPAINT_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProductionDat(ByVal dataTable As dsCLIENT.dtPAINT_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProductionDat() As dsCLIENT.dtPAINT_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsCLIENT.dtPAINT_CELLDataTable = New dsCLIENT.dtPAINT_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtPAINT_CELLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPAINT_CELL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String, ByVal Original_PROCESS_NO As Integer) As Integer
            If (Original_MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_UNIT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal PROCESS_NO As Integer, ByVal PROCESS_RESULT_DATE As Date) As Integer
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PROCESS_RESULT_DATE,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal PROCESS_NO As Integer, ByVal PROCESS_RESULT_DATE As Date, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String, ByVal Original_PROCESS_NO As Integer) As Integer
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PROCESS_RESULT_DATE,Date)
            If (Original_MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LOT_NO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_RESULT_DATE As Date, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String, ByVal Original_PROCESS_NO As Integer) As Integer
            Return Me.Update(Original_MODEL_YEAR, Original_SUFFIX_CODE, Original_LOT_NO, Original_UNIT, Original_PROCESS_NO, PROCESS_RESULT_DATE, Original_MODEL_YEAR, Original_SUFFIX_CODE, Original_LOT_NO, Original_UNIT, Original_PROCESS_NO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateProcessResultDate(ByVal PROCESS_RESULT_DATE As Date, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal PROCESS_NO As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(PROCESS_RESULT_DATE,Date)
            If (MODEL_YEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR")
            Else
                command.Parameters(1).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE")
            Else
                command.Parameters(2).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LOT_NO")
            Else
                command.Parameters(3).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UNIT")
            Else
                command.Parameters(4).Value = CType(UNIT,String)
            End If
            command.Parameters(5).Value = CType(PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPaintProgress
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPaintProgress"
            tableMapping.ColumnMappings.Add("PRODUCTION_DATE", "PRODUCTION_DATE")
            tableMapping.ColumnMappings.Add("ON_TIME", "ON_TIME")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("LOT_ID", "LOT_ID")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("BLOCK_MODEL", "BLOCK_MODEL")
            tableMapping.ColumnMappings.Add("PROCESS_RESULT_DATE", "PROCESS_RESULT_DATE")
            tableMapping.ColumnMappings.Add("IMPORT_CODE", "IMPORT_CODE")
            tableMapping.ColumnMappings.Add("GA_SHOP", "GA_SHOP")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     sub_q1.PRODUCTION_DATE, sub_q1.ON_TIME, skt_mst.SKIT_NO, sub_q1.LOT_ID"& _ 
                ", sub_q1.MODEL_YEAR + sub_q1.SUFFIX_CODE AS MODEL_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "sub_q1.LOT_NO, sub_q1.UNIT, sub_q1.BLOCK_MODEL, sub_q1.BLOCK_MODEL AS Expr1, sub"& _ 
                "_q1.PROCESS_RESULT_DATE, sub_q1.IMPORT_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      sub_q1.GA_S"& _ 
                "HOP"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_SKIT_MST AS skt_mst INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          (S"& _ 
                "ELECT     prod_dat.PRODUCTION_DATE, prod_dat.ON_TIME, prod_dat.LOT_ID, prod_dat."& _ 
                "MODEL_YEAR, prod_dat.SUFFIX_CODE, prod_dat.LOT_NO,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            "& _ 
                "                        prod_dat.UNIT, prod_dat.BLOCK_MODEL, prod_dat.BLOCK_SEQ,"& _ 
                " CONVERT(varchar, pnt_cell_1.PROCESS_RESULT_DATE, 103) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "                            + ' ' + CONVERT(varchar, pnt_cell_1.PROCESS_RESULT_D"& _ 
                "ATE, 108) AS PROCESS_RESULT_DATE, prod_dat.IMPORT_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "                             prod_dat.GA_SHOP"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            FROM "& _ 
                "         T_PAINT_CELL AS pnt_cell_1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                "& _ 
                "                   T_PRODUCTION_DAT AS prod_dat ON pnt_cell_1.MODEL_YEAR = prod_"& _ 
                "dat.MODEL_YEAR AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   pnt_cell"& _ 
                "_1.SUFFIX_CODE = prod_dat.SUFFIX_CODE AND pnt_cell_1.LOT_NO = prod_dat.LOT_NO AN"& _ 
                "D "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   pnt_cell_1.UNIT = prod_da"& _ 
                "t.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            WHERE      (pnt_cell_1.PROCESS_NO = @proc_no"& _ 
                ") AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                       ((SELECT     COUNT"& _ 
                "(*) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                           FROM   "& _ 
                "      T_PAINT_CELL AS pnt_cell_2 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                   "& _ 
                "                                              T_PROCESS_LINKAGE AS proc_lnk_1 ON"& _ 
                " pnt_cell_2.PROCESS_NO = proc_lnk_1.TO_PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             "& _ 
                "                              WHERE     (proc_lnk_1.FROM_PROCESS_NO = pnt_cell_1"& _ 
                ".PROCESS_NO) AND (pnt_cell_2.MODEL_YEAR = pnt_cell_1.MODEL_YEAR) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                                                    AND (pnt_cel"& _ 
                "l_2.SUFFIX_CODE = pnt_cell_1.SUFFIX_CODE) AND (pnt_cell_2.LOT_NO = pnt_cell_1.LO"& _ 
                "T_NO) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                    "& _ 
                "             (pnt_cell_2.UNIT = pnt_cell_1.UNIT) AND (pnt_cell_2.PROCESS_RESULT_"& _ 
                "DATE > pnt_cell_1.PROCESS_RESULT_DATE)) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                      "& _ 
                "             = 0)) AS sub_q1 ON skt_mst.MODEL_YEAR = sub_q1.MODEL_YEAR AND skt_m"& _ 
                "st.SUFFIX_CODE = sub_q1.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      skt_mst.LOT_NO ="& _ 
                " sub_q1.LOT_NO AND skt_mst.UNIT = sub_q1.UNIT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@proc_no", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPaintProgressDataTable, ByVal proc_no As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_no,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal proc_no As Integer) As dsCLIENT.dtPaintProgressDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(proc_no,Integer)
            Dim dataTable As dsCLIENT.dtPaintProgressDataTable = New dsCLIENT.dtPaintProgressDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPaintShop
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPaintShop"
            tableMapping.ColumnMappings.Add("PRODUCTION_DATE", "PRODUCTION_DATE")
            tableMapping.ColumnMappings.Add("ON_TIME", "ON_TIME")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("LOT_ID", "LOT_ID")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("BLOCK_MODEL", "BLOCK_MODEL")
            tableMapping.ColumnMappings.Add("BLOCK_SEQ", "BLOCK_SEQ")
            tableMapping.ColumnMappings.Add("PROCESS_RESULT_DATE", "PROCESS_RESULT_DATE")
            tableMapping.ColumnMappings.Add("IMPORT_CODE", "IMPORT_CODE")
            tableMapping.ColumnMappings.Add("GA_SHOP", "GA_SHOP")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     prod.PRODUCTION_DATE, prod.ON_TIME, s.SKIT_NO, prod.LOT_ID, prod.MODEL"& _ 
                "_YEAR + prod.SUFFIX_CODE AS MODEL_CODE, prod.LOT_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      pro"& _ 
                "d.UNIT, prod.BLOCK_MODEL, prod.BLOCK_SEQ, CONVERT(varchar, t1.PROCESS_RESULT_DAT"& _ 
                "E, 103) + ' ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      t1.PROCESS_RESULT_DATE,"& _ 
                " 108) AS PROCESS_RESULT_DATE, prod.IMPORT_CODE, prod.GA_SHOP"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PRO"& _ 
                "DUCTION_DAT AS prod INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          (SELECT     sub_t1.MOD"& _ 
                "EL_YEAR, sub_t1.SUFFIX_CODE, sub_t1.LOT_NO, sub_t1.UNIT, sub_t1.PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                                                 sub_t1.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                         FROM          (SELECT     pnt.MODEL_YEAR, pnt.SUFFIX_CO"& _ 
                "DE, pnt.LOT_NO, pnt.UNIT, pnt.PROCESS_NO, pnt.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "                                       FROM          T_PROCESS_MST AS procs_mst "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                                    "& _ 
                "       T_PAINT_CELL AS pnt ON procs_mst.PROCESS_NO = pnt.PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "                                         WHERE      (procs_mst.PROCESS_TYPE = 2)"& _ 
                " AND (pnt.PROCESS_RESULT_DATE IS NOT NULL)) AS sub_t1 LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                                              (SELECT     pnt.MODEL_YEAR, pnt.SU"& _ 
                "FFIX_CODE, pnt.LOT_NO, pnt.UNIT, pnt.PROCESS_NO, pnt.PROCESS_RESULT_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                                   FROM          T_PROCESS_MST A"& _ 
                "S procs_mst INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                        "& _ 
                "                        T_PAINT_CELL AS pnt ON procs_mst.PROCESS_NO = pnt.PROCES"& _ 
                "S_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                         WHERE      (procs"& _ 
                "_mst.PROCESS_TYPE = 3) AND (pnt.PROCESS_RESULT_DATE IS NOT NULL)) AS sub_t2 ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                                   sub_t1.MODEL_YEAR = sub_t2.M"& _ 
                "ODEL_YEAR AND sub_t1.SUFFIX_CODE = sub_t2.SUFFIX_CODE AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "                               sub_t1.LOT_NO = sub_t2.LOT_NO AND sub_t1.UNIT = s"& _ 
                "ub_t2.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            WHERE      (sub_t2.MODEL_YEAR IS NULL) A"& _ 
                "ND (sub_t2.SUFFIX_CODE IS NULL) AND (sub_t2.LOT_NO IS NULL) AND (sub_t2.UNIT IS "& _ 
                "NULL)) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AS t1 ON prod.MODEL_YEAR = t1.MODEL_YEAR AND prod"& _ 
                ".SUFFIX_CODE = t1.SUFFIX_CODE AND prod.LOT_NO = t1.LOT_NO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      prod.UNIT = t1.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"left outer join t_skit_mst s"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" on prod.MODEL_YEAR = s"& _ 
                ".MODEL_YEAR AND prod.SUFFIX_CODE = s.SUFFIX_CODE AND prod.LOT_NO = s.LOT_NO AND "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      prod.UNIT = s.UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY prod.PRODUCTION_DATE, prod."& _ 
                "ON_TIME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPaintShopDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtPaintShopDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtPaintShopDataTable = New dsCLIENT.dtPaintShopDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taWBS_ON
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtWBS_ON"
            tableMapping.ColumnMappings.Add("LANE_NO", "LANE_NO")
            tableMapping.ColumnMappings.Add("SEQUENCE", "SEQUENCE")
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("POSITION", "POSITION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_WBS_ON] WHERE (([LANE_NO] = @Original_LANE_NO) AND ([SEQUENCE] = @"& _ 
                "Original_SEQUENCE) AND ([SKIT_NO] = @Original_SKIT_NO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LANE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQUENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQUENCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_WBS_ON] ([LANE_NO], [SEQUENCE], [SKIT_NO]) VALUES (@LANE_NO, @SEQU"& _ 
                "ENCE, @SKIT_NO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LANE_NO, SEQUENCE, SKIT_NO, CAST(SKIT_NO AS varchar(255"& _ 
                ")) AS POSITION FROM T_WBS_ON WHERE (LANE_NO = @LANE_NO) AND (SEQUENCE = @SEQUENC"& _ 
                "E) ORDER BY LANE_NO, SEQUENCE"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQUENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQUENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_WBS_ON] SET [LANE_NO] = @LANE_NO, [SEQUENCE] = @SEQUENCE, [SKIT_NO] = @"& _ 
                "SKIT_NO WHERE (([LANE_NO] = @Original_LANE_NO) AND ([SEQUENCE] = @Original_SEQUE"& _ 
                "NCE) AND ([SKIT_NO] = @Original_SKIT_NO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LANE_NO, SEQUENCE, SKIT_NO, C"& _ 
                "AST(SKIT_NO AS varchar(255)) AS POSITION FROM T_WBS_ON WHERE (LANE_NO = @LANE_NO"& _ 
                ") AND (SEQUENCE = @SEQUENCE) ORDER BY LANE_NO, SEQUENCE"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LANE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQUENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQUENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LANE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQUENCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQUENCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT  LANE_NO, SEQUENCE, SKIT_NO, CAST(SKIT_NO as varchar(255)) as POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM    T_WBS_ON"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"order by  LANE_NO, SEQUENCE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT  LANE_NO, SEQUENCE, SKIT_NO, POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    (SELECT  LANE_NO, 99 AS SEQ"& _ 
                "UENCE, - 1 AS SKIT_NO, 'END' AS POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM     T_LANE_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "       UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            SELECT  LANE_NO, SEQUENCE, SKIT_NO, CAST(SKIT_NO AS va"& _ 
                "rchar(255)) AS POSITION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM    T_WBS_ON AS w"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            WHERE  ("& _ 
                "SKIT_NO <> @SKIT_NO)) AS a"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY LANE_NO, SEQUENCE"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE [T_WBS_ON]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET [LANE_NO] = @New_LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" , [SEQUENCE] = ISNULL(("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    SE"& _ 
                "LECT wo_.[SEQUENCE]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    FROM [T_WBS_ON] wo_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    WHERE wo_.[SKIT_NO] = @Before_"& _ 
                "SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    ),100) - 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE [SKIT_NO] = @Original_SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@New_LANE_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SKIT_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Before_SKIT_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE [T_WBS_ON]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET [SEQUENCE] = ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT COUNT([SKIT_NO])"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM [T_WBS_ON]"& _ 
                " wo_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE wo_.LANE_NO = [T_WBS_ON].LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND wo_.[SEQUENCE] <= [T_WBS_ON]"& _ 
                ".[SEQUENCE]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&")"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "UPDATE [T_WBS_ON]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET [SEQUENCE] = [SEQUENCE] + 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE [LANE_NO] = @Original_L"& _ 
                "ANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  AND [SEQUENCE] >= ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    SELECT min(wo_.[SEQUENCE])"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    FROM [T_WBS_O"& _ 
                "N] wo_"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    WHERE wo_.[LANE_NO] = @Original_LANE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        AND wo_.[SKIT_NO] ="& _ 
                " @Original_SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    )"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LANE_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LANE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SKIT_NO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtWBS_ONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtWBS_ONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtWBS_ONDataTable = New dsCLIENT.dtWBS_ONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByWithEOL(ByVal dataTable As dsCLIENT.dtWBS_ONDataTable, ByVal SKIT_NO As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SKIT_NO,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByWithEOL(ByVal SKIT_NO As Integer) As dsCLIENT.dtWBS_ONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SKIT_NO,Integer)
            Dim dataTable As dsCLIENT.dtWBS_ONDataTable = New dsCLIENT.dtWBS_ONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtWBS_ONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtWBS_ON")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LANE_NO As Integer, ByVal Original_SEQUENCE As Integer, ByVal Original_SKIT_NO As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LANE_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SEQUENCE,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SKIT_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LANE_NO As Integer, ByVal SEQUENCE As Integer, ByVal SKIT_NO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(LANE_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SEQUENCE,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SKIT_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LANE_NO As Integer, ByVal SEQUENCE As Integer, ByVal SKIT_NO As Integer, ByVal Original_LANE_NO As Integer, ByVal Original_SEQUENCE As Integer, ByVal Original_SKIT_NO As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LANE_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SEQUENCE,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SKIT_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_LANE_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SEQUENCE,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SKIT_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SKIT_NO As Integer, ByVal Original_LANE_NO As Integer, ByVal Original_SEQUENCE As Integer, ByVal Original_SKIT_NO As Integer) As Integer
            Return Me.Update(Original_LANE_NO, Original_SEQUENCE, SKIT_NO, Original_LANE_NO, Original_SEQUENCE, Original_SKIT_NO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function MoveLaneSeq(ByVal New_LANE_NO As Integer, ByVal Original_SKIT_NO As Integer, ByVal Before_SKIT_NO As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(New_LANE_NO,Integer)
            command.Parameters(1).Value = CType(Original_SKIT_NO,Integer)
            command.Parameters(2).Value = CType(Before_SKIT_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ReorderSeq() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ShiftSequence(ByVal Original_LANE_NO As Integer, ByVal Original_SKIT_NO As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(Original_LANE_NO,Integer)
            command.Parameters(1).Value = CType(Original_SKIT_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taSKIT_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtSKIT_MST"
            tableMapping.ColumnMappings.Add("SKIT_NO", "SKIT_NO")
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_SKIT_MST] WHERE (([SKIT_NO] = @Original_SKIT_NO) AND ((@IsNull_MOD"& _ 
                "EL_YEAR = 1 AND [MODEL_YEAR] IS NULL) OR ([MODEL_YEAR] = @Original_MODEL_YEAR)) "& _ 
                "AND ((@IsNull_SUFFIX_CODE = 1 AND [SUFFIX_CODE] IS NULL) OR ([SUFFIX_CODE] = @Or"& _ 
                "iginal_SUFFIX_CODE)) AND ((@IsNull_LOT_NO = 1 AND [LOT_NO] IS NULL) OR ([LOT_NO]"& _ 
                " = @Original_LOT_NO)) AND ((@IsNull_UNIT = 1 AND [UNIT] IS NULL) OR ([UNIT] = @O"& _ 
                "riginal_UNIT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MODEL_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUFFIX_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_SKIT_MST] ([SKIT_NO], [MODEL_YEAR], [SUFFIX_CODE], [LOT_NO], [UNIT"& _ 
                "]) VALUES (@SKIT_NO, @MODEL_YEAR, @SUFFIX_CODE, @LOT_NO, @UNIT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SKIT_NO"& _ 
                ", MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT FROM T_SKIT_MST WHERE (SKIT_NO = @SKIT_N"& _ 
                "O)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_SKIT_MST] SET [SKIT_NO] = @SKIT_NO, [MODEL_YEAR] = @MODEL_YEAR, [SUFFIX"& _ 
                "_CODE] = @SUFFIX_CODE, [LOT_NO] = @LOT_NO, [UNIT] = @UNIT WHERE (([SKIT_NO] = @O"& _ 
                "riginal_SKIT_NO) AND ((@IsNull_MODEL_YEAR = 1 AND [MODEL_YEAR] IS NULL) OR ([MOD"& _ 
                "EL_YEAR] = @Original_MODEL_YEAR)) AND ((@IsNull_SUFFIX_CODE = 1 AND [SUFFIX_CODE"& _ 
                "] IS NULL) OR ([SUFFIX_CODE] = @Original_SUFFIX_CODE)) AND ((@IsNull_LOT_NO = 1 "& _ 
                "AND [LOT_NO] IS NULL) OR ([LOT_NO] = @Original_LOT_NO)) AND ((@IsNull_UNIT = 1 A"& _ 
                "ND [UNIT] IS NULL) OR ([UNIT] = @Original_UNIT)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SKIT_NO, MODEL_YEAR, "& _ 
                "SUFFIX_CODE, LOT_NO, UNIT FROM T_SKIT_MST WHERE (SKIT_NO = @SKIT_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKIT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MODEL_YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUFFIX_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LOT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LOT_NO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT  SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    T_SKIT_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT  SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    T_SKIT_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " MODEL_YEAR = @MODEL_YEAR "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND SUFFIX_CODE = @SUFFIX_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND LOT_NO = @LOT_NO"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND UNIT = @UNIT"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOT_NO", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "LOT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT  SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    T_SKIT_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " MODEL_YEAR IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND SUFFIX_CODE IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND LOT_NO IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AND UNIT IS NU"& _ 
                "LL"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO [T_SKIT_MST] ([SKIT_NO], [MODEL_YEAR], [SUFFIX_CODE], [LOT_NO], [UNIT"& _ 
                "])"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT @SKIT_NO, NULL, NULL, NULL, NULL "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE NOT EXISTS ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"& _ 
                " [T_SKIT_MST] "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE SKIT_NO = @SKIT_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&")"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKIT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtSKIT_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtSKIT_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtSKIT_MSTDataTable = New dsCLIENT.dtSKIT_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByItem(ByVal dataTable As dsCLIENT.dtSKIT_MSTDataTable, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MODEL_YEAR Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByItem(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As dsCLIENT.dtSKIT_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MODEL_YEAR Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            Dim dataTable As dsCLIENT.dtSKIT_MSTDataTable = New dsCLIENT.dtSKIT_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillEmpty(ByVal dataTable As dsCLIENT.dtSKIT_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataEmpty() As dsCLIENT.dtSKIT_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As dsCLIENT.dtSKIT_MSTDataTable = New dsCLIENT.dtSKIT_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtSKIT_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtSKIT_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SKIT_NO As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SKIT_NO,Integer)
            If (Original_MODEL_YEAR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SKIT_NO As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SKIT_NO,Integer)
            If (MODEL_YEAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SKIT_NO As Integer, ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal Original_SKIT_NO As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SKIT_NO,Integer)
            If (MODEL_YEAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MODEL_YEAR,String)
            End If
            If (SUFFIX_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SUFFIX_CODE,String)
            End If
            If (LOT_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LOT_NO,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SKIT_NO,Integer)
            If (Original_MODEL_YEAR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MODEL_YEAR,String)
            End If
            If (Original_SUFFIX_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SUFFIX_CODE,String)
            End If
            If (Original_LOT_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_LOT_NO,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_UNIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR As String, ByVal SUFFIX_CODE As String, ByVal LOT_NO As String, ByVal UNIT As String, ByVal Original_SKIT_NO As Integer, ByVal Original_MODEL_YEAR As String, ByVal Original_SUFFIX_CODE As String, ByVal Original_LOT_NO As String, ByVal Original_UNIT As String) As Integer
            Return Me.Update(Original_SKIT_NO, MODEL_YEAR, SUFFIX_CODE, LOT_NO, UNIT, Original_SKIT_NO, Original_MODEL_YEAR, Original_SUFFIX_CODE, Original_LOT_NO, Original_UNIT)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNew(ByVal SKIT_NO As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(SKIT_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taOPTION_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtOPTION_MST"
            tableMapping.ColumnMappings.Add("OPTION_ID", "OPTION_ID")
            tableMapping.ColumnMappings.Add("OPTION_NAME", "OPTION_NAME")
            tableMapping.ColumnMappings.Add("OPTION_SEQ", "OPTION_SEQ")
            tableMapping.ColumnMappings.Add("OPTION_CODE", "OPTION_CODE")
            tableMapping.ColumnMappings.Add("OPTION_DISPLAY", "OPTION_DISPLAY")
            tableMapping.ColumnMappings.Add("OPTION_TYPE", "OPTION_TYPE")
            tableMapping.ColumnMappings.Add("OPTION_SEQ_NAME", "OPTION_SEQ_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_OPTION_MST] WHERE (([OPTION_ID] = @Original_OPTION_ID) AND ([OPTIO"& _ 
                "N_NAME] = @Original_OPTION_NAME) AND ([OPTION_SEQ] = @Original_OPTION_SEQ) AND ("& _ 
                "(@IsNull_OPTION_CODE = 1 AND [OPTION_CODE] IS NULL) OR ([OPTION_CODE] = @Origina"& _ 
                "l_OPTION_CODE)) AND ((@IsNull_OPTION_DISPLAY = 1 AND [OPTION_DISPLAY] IS NULL) O"& _ 
                "R ([OPTION_DISPLAY] = @Original_OPTION_DISPLAY)) AND ([OPTION_TYPE] = @Original_"& _ 
                "OPTION_TYPE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPTION_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPTION_DISPLAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_DISPLAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_OPTION_MST] ([OPTION_NAME], [OPTION_SEQ], [OPTION_CODE], [OPTION_D"& _ 
                "ISPLAY], [OPTION_TYPE]) VALUES (@OPTION_NAME, @OPTION_SEQ, @OPTION_CODE, @OPTION"& _ 
                "_DISPLAY, @OPTION_TYPE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT OPTION_ID, OPTION_NAME, OPTION_SEQ, OPTION_CODE"& _ 
                ", OPTION_DISPLAY, OPTION_TYPE, 'OPTION ' + CONVERT (varchar, CASE WHEN option_ty"& _ 
                "pe = 1 THEN 1 ELSE OPTION_SEQ END) AS OPTION_SEQ_NAME FROM T_OPTION_MST WHERE (O"& _ 
                "PTION_ID = SCOPE_IDENTITY()) ORDER BY OPTION_TYPE, OPTION_SEQ"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_DISPLAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_OPTION_MST] SET [OPTION_NAME] = @OPTION_NAME, [OPTION_SEQ] = @OPTION_SE"& _ 
                "Q, [OPTION_CODE] = @OPTION_CODE, [OPTION_DISPLAY] = @OPTION_DISPLAY, [OPTION_TYP"& _ 
                "E] = @OPTION_TYPE WHERE (([OPTION_ID] = @Original_OPTION_ID) AND ([OPTION_NAME] "& _ 
                "= @Original_OPTION_NAME) AND ([OPTION_SEQ] = @Original_OPTION_SEQ) AND ((@IsNull"& _ 
                "_OPTION_CODE = 1 AND [OPTION_CODE] IS NULL) OR ([OPTION_CODE] = @Original_OPTION"& _ 
                "_CODE)) AND ((@IsNull_OPTION_DISPLAY = 1 AND [OPTION_DISPLAY] IS NULL) OR ([OPTI"& _ 
                "ON_DISPLAY] = @Original_OPTION_DISPLAY)) AND ([OPTION_TYPE] = @Original_OPTION_T"& _ 
                "YPE));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT OPTION_ID, OPTION_NAME, OPTION_SEQ, OPTION_CODE, OPTION_DISPLAY, "& _ 
                "OPTION_TYPE, 'OPTION ' + CONVERT (varchar, CASE WHEN option_type = 1 THEN 1 ELSE"& _ 
                " OPTION_SEQ END) AS OPTION_SEQ_NAME FROM T_OPTION_MST WHERE (OPTION_ID = @OPTION"& _ 
                "_ID) ORDER BY OPTION_TYPE, OPTION_SEQ"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_DISPLAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_NAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPTION_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPTION_DISPLAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_DISPLAY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     OPTION_ID, OPTION_NAME, OPTION_SEQ"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&", OPTION_CODE, OPTION_DISPLA"& _ 
                "Y, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"OPTION_TYPE, 'OPTION ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"case  when option"& _ 
                "_type = 1 then 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"else OPTION_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"end) AS OPTION_SEQ_NAME"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_OPTION_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OPTION_TYPE, OPTION_SEQ"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TOP (@block) 0 AS INDEX_NO, *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "            FROM          T_OPTION_MST AS opt_mst "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE"& _ 
                "      (OPTION_TYPE >= @option_type)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (option_type = @optio"& _ 
                "n_type)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (NOT (OPTION_SEQ < @option_seq))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OP"& _ 
                "TION_TYPE, OPTION_SEQ"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     COUNT(*) AS OffestBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     OPTION_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   FR"& _ 
                "OM          (SELECT     OPTION_TYPE,OPTION_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   FROM          T_OPTI"& _ 
                "ON_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   WHERE      (OPTION_TYPE <= @option_type)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"   WHERE"& _ 
                "      (NOT (OPTION_TYPE = @option_type)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  (NOT (OPTION_SEQ > @opti"& _ 
                "on_seq))) AS derivedtbl_1"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT TOP (1) OPTION_CODE, OPTION_DISPLAY, OPTION_ID, OPTION_NAME, OPTION_SEQ, O"& _ 
                "PTION_TYPE FROM T_OPTION_MST WHERE (OPTION_DISPLAY LIKE @option_display) ORDER B"& _ 
                "Y OPTION_TYPE, OPTION_SEQ"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_display", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT OPTION_CODE, OPTION_DISPLAY, OPTION_ID, OPTION_NAME, OPTION_SEQ, OPTION_TY"& _ 
                "PE FROM T_OPTION_MST WHERE (OPTION_DISPLAY = @option_display) AND (OPTION_TYPE ="& _ 
                " @option_type) ORDER BY OPTION_TYPE, OPTION_SEQ"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_display", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_DISPLAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     OPTION_CODE, OPTION_DISPLAY, OPTION_ID, OPTION_NAME, OPTION_SEQ, OPTIO"& _ 
                "N_TYPE, 'OPTION ' + CONVERT(varchar, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CASE WHEN option_ty"& _ 
                "pe = 1 THEN 1 ELSE OPTION_SEQ END) AS OPTION_SEQ_NAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_OPTION_MST"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (OPTION_TYPE = @TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OPTION_TYPE, OPTION_SEQ"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "select TOP (@block) 0 AS INDEX_NO, sc.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(SELECT *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM T_OPTION_MST  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE      (OPTION_TYPE <= @option_type) ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (NOT (OPTION_TYPE = @op"& _ 
                "tion_type)) OR (NOT (option_seq > @option_seq))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY OPTION_TYPE DESC, opti"& _ 
                "on_seq DESC"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     ISNULL(MAX(OPTION_SEQ), 0) + 1 AS MAX_OPTION_SEQ"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_OPTIO"& _ 
                "N_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (OPTION_TYPE = @option_type)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@option_type", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtOPTION_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtOPTION_MSTDataTable = New dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsCLIENT.dtOPTION_MSTDataTable, ByVal block As Integer, ByVal option_type As Integer, ByVal option_seq As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(option_seq,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal block As Integer, ByVal option_type As Integer, ByVal option_seq As Integer) As dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(option_seq,Integer)
            Dim dataTable As dsCLIENT.dtOPTION_MSTDataTable = New dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptionDisplay(ByVal dataTable As dsCLIENT.dtOPTION_MSTDataTable, ByVal option_display As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (option_display Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(option_display,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptionDisplay(ByVal option_display As String) As dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (option_display Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(option_display,String)
            End If
            Dim dataTable As dsCLIENT.dtOPTION_MSTDataTable = New dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptionDisplayAndOptionType(ByVal dataTable As dsCLIENT.dtOPTION_MSTDataTable, ByVal option_display As String, ByVal option_type As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (option_display Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(option_display,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptionDisplayAndOptionType(ByVal option_display As String, ByVal option_type As Integer) As dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (option_display Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(option_display,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Dim dataTable As dsCLIENT.dtOPTION_MSTDataTable = New dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptionType(ByVal dataTable As dsCLIENT.dtOPTION_MSTDataTable, ByVal TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptionType(ByVal TYPE As Integer) As dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            Dim dataTable As dsCLIENT.dtOPTION_MSTDataTable = New dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsCLIENT.dtOPTION_MSTDataTable, ByVal block As Integer, ByVal option_type As Integer, ByVal option_seq As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(option_seq,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal block As Integer, ByVal option_type As Integer, ByVal option_seq As Integer) As dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(option_type,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(option_seq,Integer)
            Dim dataTable As dsCLIENT.dtOPTION_MSTDataTable = New dsCLIENT.dtOPTION_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtOPTION_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtOPTION_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_OPTION_ID As Integer, ByVal Original_OPTION_NAME As String, ByVal Original_OPTION_SEQ As Integer, ByVal Original_OPTION_CODE As String, ByVal Original_OPTION_DISPLAY As String, ByVal Original_OPTION_TYPE As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_OPTION_ID,Integer)
            If (Original_OPTION_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OPTION_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OPTION_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_OPTION_SEQ,Integer)
            If (Original_OPTION_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_OPTION_CODE,String)
            End If
            If (Original_OPTION_DISPLAY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_OPTION_DISPLAY,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_OPTION_TYPE,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal OPTION_NAME As String, ByVal OPTION_SEQ As Integer, ByVal OPTION_CODE As String, ByVal OPTION_DISPLAY As String, ByVal OPTION_TYPE As Integer) As Integer
            If (OPTION_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OPTION_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(OPTION_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OPTION_SEQ,Integer)
            If (OPTION_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(OPTION_CODE,String)
            End If
            If (OPTION_DISPLAY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(OPTION_DISPLAY,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(OPTION_TYPE,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal OPTION_NAME As String, ByVal OPTION_SEQ As Integer, ByVal OPTION_CODE As String, ByVal OPTION_DISPLAY As String, ByVal OPTION_TYPE As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_OPTION_NAME As String, ByVal Original_OPTION_SEQ As Integer, ByVal Original_OPTION_CODE As String, ByVal Original_OPTION_DISPLAY As String, ByVal Original_OPTION_TYPE As Integer, ByVal OPTION_ID As Integer) As Integer
            If (OPTION_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OPTION_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(OPTION_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OPTION_SEQ,Integer)
            If (OPTION_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OPTION_CODE,String)
            End If
            If (OPTION_DISPLAY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(OPTION_DISPLAY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OPTION_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_OPTION_ID,Integer)
            If (Original_OPTION_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OPTION_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_OPTION_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_OPTION_SEQ,Integer)
            If (Original_OPTION_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_OPTION_CODE,String)
            End If
            If (Original_OPTION_DISPLAY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_OPTION_DISPLAY,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_OPTION_TYPE,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(OPTION_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal OPTION_NAME As String, ByVal OPTION_SEQ As Integer, ByVal OPTION_CODE As String, ByVal OPTION_DISPLAY As String, ByVal OPTION_TYPE As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_OPTION_NAME As String, ByVal Original_OPTION_SEQ As Integer, ByVal Original_OPTION_CODE As String, ByVal Original_OPTION_DISPLAY As String, ByVal Original_OPTION_TYPE As Integer) As Integer
            Return Me.Update(OPTION_NAME, OPTION_SEQ, OPTION_CODE, OPTION_DISPLAY, OPTION_TYPE, Original_OPTION_ID, Original_OPTION_NAME, Original_OPTION_SEQ, Original_OPTION_CODE, Original_OPTION_DISPLAY, Original_OPTION_TYPE, Original_OPTION_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function FillByOffsetBase(ByVal option_type As Integer, ByVal option_seq As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(option_type,Integer)
            command.Parameters(1).Value = CType(option_seq,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNextOptionSeq(ByVal option_type As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            command.Parameters(0).Value = CType(option_type,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taMODEL_OPTION_ROW
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtMODEL_OPTION_ROW"
            tableMapping.ColumnMappings.Add("MODEL_OPTION_ROW_ID", "MODEL_OPTION_ROW_ID")
            tableMapping.ColumnMappings.Add("MODEL_YEAR_PATTERN", "MODEL_YEAR_PATTERN")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE_PATTERN", "SUFFIX_CODE_PATTERN")
            tableMapping.ColumnMappings.Add("MODEL_CODE", "MODEL_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_MODEL_OPTION_ROW] WHERE (([MODEL_OPTION_ROW_ID] = @Original_MODEL_"& _ 
                "OPTION_ROW_ID) AND ([MODEL_YEAR_PATTERN] = @Original_MODEL_YEAR_PATTERN) AND ([S"& _ 
                "UFFIX_CODE_PATTERN] = @Original_SUFFIX_CODE_PATTERN))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_MODEL_OPTION_ROW] ([MODEL_YEAR_PATTERN], [SUFFIX_CODE_PATTERN]) VA"& _ 
                "LUES (@MODEL_YEAR_PATTERN, @SUFFIX_CODE_PATTERN);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_OPTION_ROW_ID, M"& _ 
                "ODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, MODEL_YEAR_PATTERN + SUFFIX_CODE_PATTERN"& _ 
                " AS MODEL_CODE FROM T_MODEL_OPTION_ROW WHERE (MODEL_OPTION_ROW_ID = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_MODEL_OPTION_ROW] SET [MODEL_YEAR_PATTERN] = @MODEL_YEAR_PATTERN, [SUFF"& _ 
                "IX_CODE_PATTERN] = @SUFFIX_CODE_PATTERN WHERE (([MODEL_OPTION_ROW_ID] = @Origina"& _ 
                "l_MODEL_OPTION_ROW_ID) AND ([MODEL_YEAR_PATTERN] = @Original_MODEL_YEAR_PATTERN)"& _ 
                " AND ([SUFFIX_CODE_PATTERN] = @Original_SUFFIX_CODE_PATTERN));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_OPT"& _ 
                "ION_ROW_ID, MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, MODEL_YEAR_PATTERN + SUFFIX"& _ 
                "_CODE_PATTERN AS MODEL_CODE FROM T_MODEL_OPTION_ROW WHERE (MODEL_OPTION_ROW_ID ="& _ 
                " @MODEL_OPTION_ROW_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     MODEL_OPTION_ROW_ID, MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                MODEL_YEAR_PATTERN + SUFFIX_CODE_PATTERN AS MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    "& _ 
                "     T_MODEL_OPTION_ROW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT TOP (1) '' AS MODEL_CODE, MODEL_OPTION_ROW_ID, MODEL_YEAR_PATTERN, SUFFIX_"& _ 
                "CODE_PATTERN FROM T_MODEL_OPTION_ROW WHERE (MODEL_YEAR_PATTERN LIKE @MODEL_YEAR_"& _ 
                "PATTERN) AND (SUFFIX_CODE_PATTERN LIKE @SUFFIX_CODE_PATTERN)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"TOP (@BLOCK) 0 AS INDEX_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_OPTION_ROW_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PAT"& _ 
                "TERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SUFFIX_CODE_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PATTERN + SUFFIX_CODE_PATTERN AS"& _ 
                " MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_OPTION_ROW_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PATTE"& _ 
                "RN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SUFFIX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"T_MODEL_OPTION_ROW AS my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "         WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(MODEL_YEAR_PATTERN >= @MODEL_YEAR_PATTERN) AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(not exis"& _ 
                "ts(    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"select"&Global.Microsoft.VisualBasic.ChrW(9)&"* "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"from"&Global.Microsoft.VisualBasic.ChrW(9)&"T_MODEL_OPTION_CELL as child    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"where"&Global.Microsoft.VisualBasic.ChrW(9)&"child.MODEL_OPTION_ROW_ID = my.MODEL_OPTION_ROW_ID and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"chil"& _ 
                "d.IS_USED = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  ) OR 1 = @NEW_MODEL_FLAG )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   (NO"& _ 
                "T (MODEL_YEAR_PATTERN = @MODEL_YEAR_PATTERN)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        (NOT (SUFFIX_CODE_PATT"& _ 
                "ERN < @SUFFIX_CODE_PATTERN))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NEW_MODEL_FLAG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"COUNT(*) AS OffsetBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SU"& _ 
                "FFIX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM    ("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PATTERN, SUFF"& _ 
                "IX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        FROM        T_MODEL_OPTION_ROW AS my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                       WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(MODEL_YEAR_PATTERN <= @MODEL_YEAR_PATTERN) AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(not exists(    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"select"&Global.Microsoft.VisualBasic.ChrW(9)&"* "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"from"&Global.Microsoft.VisualBasic.ChrW(9)&"T_MODEL_OPTION_CELL as ch"& _ 
                "ild    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"where"&Global.Microsoft.VisualBasic.ChrW(9)&"child.MODEL_OPTION_ROW_ID = my.MODEL_OPTION_ROW_ID and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"child.IS_USED = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  ) OR 1 = @NEW_MODEL_FLAG )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "      ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            WHERE   (NOT (MODEL_YEAR_PATTERN = @MODEL_YEAR_PATTER"& _ 
                "N)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    (NOT (SUFFIX_CODE_PATTERN > @SUFFIX_CODE_PATTERN))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "        ) AS derivedtbl_1"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NEW_MODEL_FLAG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"TOP (@BLOCK) 0 AS INDEX_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_OPTION_ROW_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_YEAR_PAT"& _ 
                "TERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SUFFIX_CODE_PATTERN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            MODEL_YEAR_PATTERN + SUFFIX_CODE_P"& _ 
                "ATTERN AS MODEL_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"&Global.Microsoft.VisualBasic.ChrW(9)&"("&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"SELECT"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"MODEL_OPTION_ROW_ID, MODEL_YEAR_PATTERN"& _ 
                ", SUFFIX_CODE_PATTERN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            FROM        T_MODEL_OPTION_ROW AS my"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "     WHERE"&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(MODEL_YEAR_PATTERN <= @MODEL_YEAR_PATTERN) AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"(not exists( "& _ 
                "   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"select"&Global.Microsoft.VisualBasic.ChrW(9)&"* "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"from"&Global.Microsoft.VisualBasic.ChrW(9)&"T_MODEL_OPTION_CELL as child    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"w"& _ 
                "here"&Global.Microsoft.VisualBasic.ChrW(9)&"child.MODEL_OPTION_ROW_ID = my.MODEL_OPTION_ROW_ID and "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"child.IS"& _ 
                "_USED = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  ) OR 1 = @NEW_MODEL_FLAG )"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE   (NOT (M"& _ 
                "ODEL_YEAR_PATTERN = @MODEL_YEAR_PATTERN)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        (NOT (SUFFIX_CODE_PATTERN "& _ 
                "> @SUFFIX_CODE_PATTERN))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY MODEL_YEAR_PATTERN DESC, SUFFIX_CODE_PATTERN "& _ 
                "DESC"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BLOCK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_YEAR_PATTERN", Global.System.Data.SqlDbType.VarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_YEAR_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUFFIX_CODE_PATTERN", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "SUFFIX_CODE_PATTERN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NEW_MODEL_FLAG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable = New dsCLIENT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModelCode(ByVal dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModelCode(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String) As dsCLIENT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Dim dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable = New dsCLIENT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable, ByVal BLOCK As Integer, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(NEW_MODEL_FLAG,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal BLOCK As Integer, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As dsCLIENT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(NEW_MODEL_FLAG,Decimal)
            Dim dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable = New dsCLIENT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable, ByVal BLOCK As Integer, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(NEW_MODEL_FLAG,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal BLOCK As Integer, ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As dsCLIENT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(BLOCK,Integer)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(NEW_MODEL_FLAG,Decimal)
            Dim dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable = New dsCLIENT.dtMODEL_OPTION_ROWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtMODEL_OPTION_ROWDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtMODEL_OPTION_ROW")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_MODEL_YEAR_PATTERN As String, ByVal Original_SUFFIX_CODE_PATTERN As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MODEL_OPTION_ROW_ID,Integer)
            If (Original_MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MODEL_YEAR_PATTERN,String)
            End If
            If (Original_SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SUFFIX_CODE_PATTERN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String) As Integer
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_MODEL_YEAR_PATTERN As String, ByVal Original_SUFFIX_CODE_PATTERN As String, ByVal MODEL_OPTION_ROW_ID As Integer) As Integer
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_MODEL_OPTION_ROW_ID,Integer)
            If (Original_MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODEL_YEAR_PATTERN")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MODEL_YEAR_PATTERN,String)
            End If
            If (Original_SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUFFIX_CODE_PATTERN")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SUFFIX_CODE_PATTERN,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MODEL_OPTION_ROW_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_MODEL_YEAR_PATTERN As String, ByVal Original_SUFFIX_CODE_PATTERN As String) As Integer
            Return Me.Update(MODEL_YEAR_PATTERN, SUFFIX_CODE_PATTERN, Original_MODEL_OPTION_ROW_ID, Original_MODEL_YEAR_PATTERN, Original_SUFFIX_CODE_PATTERN, Original_MODEL_OPTION_ROW_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function FillByOffsetBase(ByVal MODEL_YEAR_PATTERN As String, ByVal SUFFIX_CODE_PATTERN As String, ByVal NEW_MODEL_FLAG As Decimal) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (MODEL_YEAR_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODEL_YEAR_PATTERN")
            Else
                command.Parameters(0).Value = CType(MODEL_YEAR_PATTERN,String)
            End If
            If (SUFFIX_CODE_PATTERN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUFFIX_CODE_PATTERN")
            Else
                command.Parameters(1).Value = CType(SUFFIX_CODE_PATTERN,String)
            End If
            command.Parameters(2).Value = CType(NEW_MODEL_FLAG,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taMODEL_OPTION_CELL
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtMODEL_OPTION_CELL"
            tableMapping.ColumnMappings.Add("MODEL_OPTION_ROW_ID", "MODEL_OPTION_ROW_ID")
            tableMapping.ColumnMappings.Add("OPTION_ID", "OPTION_ID")
            tableMapping.ColumnMappings.Add("IS_USED", "IS_USED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_MODEL_OPTION_CELL] WHERE (([MODEL_OPTION_ROW_ID] = @Original_MODEL"& _ 
                "_OPTION_ROW_ID) AND ([OPTION_ID] = @Original_OPTION_ID) AND ([IS_USED] = @Origin"& _ 
                "al_IS_USED))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_MODEL_OPTION_CELL] ([MODEL_OPTION_ROW_ID], [OPTION_ID], [IS_USED])"& _ 
                " VALUES (@MODEL_OPTION_ROW_ID, @OPTION_ID, @IS_USED);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_OPTION_ROW_I"& _ 
                "D, OPTION_ID, IS_USED FROM T_MODEL_OPTION_CELL WHERE (MODEL_OPTION_ROW_ID = @MOD"& _ 
                "EL_OPTION_ROW_ID) AND (OPTION_ID = @OPTION_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_MODEL_OPTION_CELL] SET [MODEL_OPTION_ROW_ID] = @MODEL_OPTION_ROW_ID, [O"& _ 
                "PTION_ID] = @OPTION_ID, [IS_USED] = @IS_USED WHERE (([MODEL_OPTION_ROW_ID] = @Or"& _ 
                "iginal_MODEL_OPTION_ROW_ID) AND ([OPTION_ID] = @Original_OPTION_ID) AND ([IS_USE"& _ 
                "D] = @Original_IS_USED));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MODEL_OPTION_ROW_ID, OPTION_ID, IS_USED FROM T"& _ 
                "_MODEL_OPTION_CELL WHERE (MODEL_OPTION_ROW_ID = @MODEL_OPTION_ROW_ID) AND (OPTIO"& _ 
                "N_ID = @OPTION_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MODEL_OPTION_ROW_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_OPTION_ROW_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     MODEL_OPTION_ROW_ID, OPTION_ID, IS_USED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_MODEL_OPTION_C"& _ 
                "ELL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     cell.IS_USED, cell.MODEL_OPTION_ROW_ID, cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T"& _ 
                "_MODEL_OPTION_CELL AS cell INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_MST AS mst"& _ 
                " ON mst.OPTION_ID = cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (mst.OPTION_TYPE = @TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER B"& _ 
                "Y mst.OPTION_SEQ"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "Insert into T_MODEL_OPTION_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(MODEL_OPTION_ROW_ID,OPTION_ID,IS_USED)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"selec"& _ 
                "t sub_q2.MODEL_OPTION_ROW_ID,sub_q1.OPTION_ID,'FALSE' as IS_USED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(select"& _ 
                " opt_mst.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"from T_OPTION_MST opt_mst left join T_MODEL_OPTION_CELL mod"& _ 
                "_opt_cel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"on opt_mst.OPTION_ID = mod_opt_cel.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"where mod_opt_cel.OPTI"& _ 
                "ON_ID is null and opt_mst.OPTION_TYPE = 2) as sub_q1,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(select MODEL_OPTION_ROW"& _ 
                "_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"from T_MODEL_OPTION_ROW) as sub_q2"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtMODEL_OPTION_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtMODEL_OPTION_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtMODEL_OPTION_CELLDataTable = New dsCLIENT.dtMODEL_OPTION_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptSeq(ByVal dataTable As dsCLIENT.dtMODEL_OPTION_CELLDataTable, ByVal TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptSeq(ByVal TYPE As Integer) As dsCLIENT.dtMODEL_OPTION_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            Dim dataTable As dsCLIENT.dtMODEL_OPTION_CELLDataTable = New dsCLIENT.dtMODEL_OPTION_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtMODEL_OPTION_CELLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtMODEL_OPTION_CELL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MODEL_OPTION_ROW_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MODEL_OPTION_ROW_ID As Integer, ByVal OPTION_ID As Integer, ByVal IS_USED As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MODEL_OPTION_ROW_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OPTION_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODEL_OPTION_ROW_ID As Integer, ByVal OPTION_ID As Integer, ByVal IS_USED As Boolean, ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MODEL_OPTION_ROW_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IS_USED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MODEL_OPTION_ROW_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IS_USED As Boolean, ByVal Original_MODEL_OPTION_ROW_ID As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Return Me.Update(Original_MODEL_OPTION_ROW_ID, Original_OPTION_ID, IS_USED, Original_MODEL_OPTION_ROW_ID, Original_OPTION_ID, Original_IS_USED)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function insertRowWhenInsertOptionMST() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taOPT_MST_COL_LENGTH
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtOPT_MST_COL_LENGTH"
            tableMapping.ColumnMappings.Add("COL_OPTION_NAME_LEN", "COL_OPTION_NAME_LEN")
            tableMapping.ColumnMappings.Add("COL_OPTION_CODE_LEN", "COL_OPTION_CODE_LEN")
            tableMapping.ColumnMappings.Add("COL_OPTION_DISPLAY_LEN", "COL_OPTION_DISPLAY_LEN")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     COL_LENGTH('T_OPTION_MST', 'option_name') AS COL_OPTION_NAME_LEN, COL_"& _ 
                "LENGTH('T_OPTION_MST', 'option_code') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AS COL_OPTION_CODE"& _ 
                "_LEN, COL_LENGTH('T_OPTION_MST', 'option_display') AS COL_OPTION_DISPLAY_LEN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtOPT_MST_COL_LENGTHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtOPT_MST_COL_LENGTHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtOPT_MST_COL_LENGTHDataTable = New dsCLIENT.dtOPT_MST_COL_LENGTHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPROCESS_OPTION_CELL
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPROCESS_OPTION_CELL"
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("OPTION_ID", "OPTION_ID")
            tableMapping.ColumnMappings.Add("IS_USED", "IS_USED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PROCESS_OPTION_CELL] WHERE (([PROCESS_NO] = @Original_PROCESS_NO) "& _ 
                "AND ([OPTION_ID] = @Original_OPTION_ID) AND ([IS_USED] = @Original_IS_USED))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PROCESS_OPTION_CELL] ([PROCESS_NO], [OPTION_ID], [IS_USED]) VALUES"& _ 
                " (@PROCESS_NO, @OPTION_ID, @IS_USED);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROCESS_NO, OPTION_ID, IS_USED FRO"& _ 
                "M T_PROCESS_OPTION_CELL WHERE (OPTION_ID = @OPTION_ID) AND (PROCESS_NO = @PROCES"& _ 
                "S_NO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PROCESS_OPTION_CELL] SET [PROCESS_NO] = @PROCESS_NO, [OPTION_ID] = @OPT"& _ 
                "ION_ID, [IS_USED] = @IS_USED WHERE (([PROCESS_NO] = @Original_PROCESS_NO) AND (["& _ 
                "OPTION_ID] = @Original_OPTION_ID) AND ([IS_USED] = @Original_IS_USED));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "PROCESS_NO, OPTION_ID, IS_USED FROM T_PROCESS_OPTION_CELL WHERE (OPTION_ID = @OP"& _ 
                "TION_ID) AND (PROCESS_NO = @PROCESS_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPTION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_USED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_USED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     T_PROCESS_OPTION_CELL.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_OPTION_CELL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     cell.IS_USED, cell.PROCESS_NO, cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_"& _ 
                "OPTION_CELL AS cell INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_MST AS mst ON mst"& _ 
                ".OPTION_ID = cell.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (mst.OPTION_TYPE = @TYPE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY mst.O"& _ 
                "PTION_SEQ"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OPTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "Insert into T_PROCESS_OPTION_CELL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(PROCESS_NO,OPTION_ID,IS_USED)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"select sub_q"& _ 
                "2.PROCESS_NO,sub_q1.OPTION_ID,'FALSE' as IS_USED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(select opt_mst.OPTION_"& _ 
                "ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"from T_OPTION_MST opt_mst left join T_PROCESS_OPTION_CELL proc_opt_cel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"on"& _ 
                " opt_mst.OPTION_ID = proc_opt_cel.OPTION_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"where proc_opt_cel.OPTION_ID is nu"& _ 
                "ll and opt_mst.OPTION_TYPE = 2) as sub_q1,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(select PROCESS_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"from T_PROCESS"& _ 
                "_MST) as sub_q2"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPROCESS_OPTION_CELLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtPROCESS_OPTION_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtPROCESS_OPTION_CELLDataTable = New dsCLIENT.dtPROCESS_OPTION_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByOptSeq(ByVal dataTable As dsCLIENT.dtPROCESS_OPTION_CELLDataTable, ByVal TYPE As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByOptSeq(ByVal TYPE As Integer) As dsCLIENT.dtPROCESS_OPTION_CELLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(TYPE,Integer)
            Dim dataTable As dsCLIENT.dtPROCESS_OPTION_CELLDataTable = New dsCLIENT.dtPROCESS_OPTION_CELLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtPROCESS_OPTION_CELLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPROCESS_OPTION_CELL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROCESS_NO As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROCESS_NO As Integer, ByVal OPTION_ID As Integer, ByVal IS_USED As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OPTION_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROCESS_NO As Integer, ByVal OPTION_ID As Integer, ByVal IS_USED As Boolean, ByVal Original_PROCESS_NO As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IS_USED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_OPTION_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IS_USED,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IS_USED As Boolean, ByVal Original_PROCESS_NO As Integer, ByVal Original_OPTION_ID As Integer, ByVal Original_IS_USED As Boolean) As Integer
            Return Me.Update(Original_PROCESS_NO, Original_OPTION_ID, IS_USED, Original_PROCESS_NO, Original_OPTION_ID, Original_IS_USED)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function insertRowWhenInsertOptionMST() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taInstructionData
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtInstructionData"
            tableMapping.ColumnMappings.Add("MODEL_YEAR", "MODEL_YEAR")
            tableMapping.ColumnMappings.Add("SUFFIX_CODE", "SUFFIX_CODE")
            tableMapping.ColumnMappings.Add("LOT_NO", "LOT_NO")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("MODEL_OPTION_ROW_ID", "MODEL_OPTION_ROW_ID")
            tableMapping.ColumnMappings.Add("OPTION_ID", "OPTION_ID")
            tableMapping.ColumnMappings.Add("OPTION_DISPLAY", "OPTION_DISPLAY")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     prod.MODEL_YEAR, prod.SUFFIX_CODE, prod.LOT_NO, prod.UNIT, row.MODEL_O"& _ 
                "PTION_ROW_ID, cell.OPTION_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CASE cell.IS_USED WHEN 1 T"& _ 
                "HEN opt.OPTION_DISPLAY ELSE '' END AS OPTION_DISPLAY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PRODUCTION_"& _ 
                "DAT AS prod INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_MODEL_OPTION_ROW AS row ON dbo.f"& _ 
                "nc_compare_model_pattern(prod.MODEL_YEAR, prod.SUFFIX_CODE, row.MODEL_YEAR_PATTE"& _ 
                "RN, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      row.SUFFIX_CODE_PATTERN) = 1 INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           T_MODEL_OPTION_CELL AS cell ON row.MODEL_OPTION_ROW_ID = cell.MODEL_O"& _ 
                "PTION_ROW_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      T_OPTION_MST AS opt ON opt.OPTION"& _ 
                "_ID = cell.OPTION_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtInstructionDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtInstructionDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtInstructionDataDataTable = New dsCLIENT.dtInstructionDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPROCESS_LINKAGE
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPROCESS_LINKAGE"
            tableMapping.ColumnMappings.Add("FROM_PROCESS_NO", "FROM_PROCESS_NO")
            tableMapping.ColumnMappings.Add("TO_PROCESS_NO", "TO_PROCESS_NO")
            tableMapping.ColumnMappings.Add("FROM_PROCESS_NAME", "FROM_PROCESS_NAME")
            tableMapping.ColumnMappings.Add("PROCESS_TIME", "PROCESS_TIME")
            tableMapping.ColumnMappings.Add("PROCESS_TYPE", "PROCESS_TYPE")
            tableMapping.ColumnMappings.Add("ENTRANCE_FLAG", "ENTRANCE_FLAG")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PROCESS_LINKAGE] WHERE (([FROM_PROCESS_NO] = @Original_FROM_PROCES"& _ 
                "S_NO) AND ([TO_PROCESS_NO] = @Original_TO_PROCESS_NO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FROM_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TO_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TO_PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PROCESS_LINKAGE] ([FROM_PROCESS_NO], [TO_PROCESS_NO]) VALUES (@FRO"& _ 
                "M_PROCESS_NO, @TO_PROCESS_NO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FROM_PROCESS_NO, TO_PROCESS_NO, '' AS FRO"& _ 
                "M_PROCESS_NAME, 0 AS PROCESS_TIME, 0 AS PROCESS_TYPE, 'False' AS ENTRANCE_FLAG F"& _ 
                "ROM T_PROCESS_LINKAGE WHERE (FROM_PROCESS_NO = @FROM_PROCESS_NO) AND (TO_PROCESS"& _ 
                "_NO = @TO_PROCESS_NO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FROM_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TO_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TO_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PROCESS_LINKAGE] SET [FROM_PROCESS_NO] = @FROM_PROCESS_NO, [TO_PROCESS_"& _ 
                "NO] = @TO_PROCESS_NO WHERE (([FROM_PROCESS_NO] = @Original_FROM_PROCESS_NO) AND "& _ 
                "([TO_PROCESS_NO] = @Original_TO_PROCESS_NO));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FROM_PROCESS_NO, TO_PROCES"& _ 
                "S_NO, '' AS FROM_PROCESS_NAME, 0 AS PROCESS_TIME, 0 AS PROCESS_TYPE, 'False' AS "& _ 
                "ENTRANCE_FLAG FROM T_PROCESS_LINKAGE WHERE (FROM_PROCESS_NO = @FROM_PROCESS_NO) "& _ 
                "AND (TO_PROCESS_NO = @TO_PROCESS_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FROM_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TO_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TO_PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FROM_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FROM_PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TO_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TO_PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     FROM_PROCESS_NO, TO_PROCESS_NO, '' AS FROM_PROCESS_NAME, 0 AS PROCESS_"& _ 
                "TIME, 0 AS PROCESS_TYPE, 'False' AS ENTRANCE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_LINKAG"& _ 
                "E "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     ISNULL(prc.PROCESS_NAME, 'PROCESS NO ' + CONVERT(varchar, prc.PROCESS_"& _ 
                "NO)) AS FROM_PROCESS_NAME, lnk.FROM_PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      lnk.TO_P"& _ 
                "ROCESS_NO, ISNULL(prc.PROCESS_TIME, 0) AS PROCESS_TIME, ISNULL(prc.PROCESS_TYPE,"& _ 
                " 99) AS PROCESS_TYPE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ISNULL(prc.ENTRANCE_FLAG, 'False')"& _ 
                " AS ENTRANCE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_LINKAGE AS lnk LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                T_PROCESS_MST AS prc ON lnk.FROM_PROCESS_NO = prc.PROCESS_NO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPROCESS_LINKAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtPROCESS_LINKAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtPROCESS_LINKAGEDataTable = New dsCLIENT.dtPROCESS_LINKAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFromProcessNo(ByVal dataTable As dsCLIENT.dtPROCESS_LINKAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFromProcessNo() As dsCLIENT.dtPROCESS_LINKAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsCLIENT.dtPROCESS_LINKAGEDataTable = New dsCLIENT.dtPROCESS_LINKAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtPROCESS_LINKAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPROCESS_LINKAGE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FROM_PROCESS_NO As Integer, ByVal Original_TO_PROCESS_NO As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FROM_PROCESS_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TO_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FROM_PROCESS_NO As Integer, ByVal TO_PROCESS_NO As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FROM_PROCESS_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(TO_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FROM_PROCESS_NO As Integer, ByVal TO_PROCESS_NO As Integer, ByVal Original_FROM_PROCESS_NO As Integer, ByVal Original_TO_PROCESS_NO As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FROM_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TO_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FROM_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_TO_PROCESS_NO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FROM_PROCESS_NO As Integer, ByVal Original_TO_PROCESS_NO As Integer) As Integer
            Return Me.Update(Original_FROM_PROCESS_NO, Original_TO_PROCESS_NO, Original_FROM_PROCESS_NO, Original_TO_PROCESS_NO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPLC_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPLC_MST"
            tableMapping.ColumnMappings.Add("PLC_ID", "PLC_ID")
            tableMapping.ColumnMappings.Add("STAGE_CODE", "STAGE_CODE")
            tableMapping.ColumnMappings.Add("PLC_NET", "PLC_NET")
            tableMapping.ColumnMappings.Add("PLC_NODE", "PLC_NODE")
            tableMapping.ColumnMappings.Add("PLC_UNIT", "PLC_UNIT")
            tableMapping.ColumnMappings.Add("READ_DM", "READ_DM")
            tableMapping.ColumnMappings.Add("WRITE_DATA_DM", "WRITE_DATA_DM")
            tableMapping.ColumnMappings.Add("WRITE_STATUS_DM", "WRITE_STATUS_DM")
            tableMapping.ColumnMappings.Add("PROCESS_NO", "PROCESS_NO")
            tableMapping.ColumnMappings.Add("PLC_ONLINE_FLAG", "PLC_ONLINE_FLAG")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [T_PLC_MST] WHERE (([PLC_ID] = @Original_PLC_ID) AND ([STAGE_CODE] = "& _ 
                "@Original_STAGE_CODE) AND ([PLC_NET] = @Original_PLC_NET) AND ([PLC_NODE] = @Ori"& _ 
                "ginal_PLC_NODE) AND ([PLC_UNIT] = @Original_PLC_UNIT) AND ([READ_DM] = @Original"& _ 
                "_READ_DM) AND ([WRITE_DATA_DM] = @Original_WRITE_DATA_DM) AND ([WRITE_STATUS_DM]"& _ 
                " = @Original_WRITE_STATUS_DM) AND ([PROCESS_NO] = @Original_PROCESS_NO) AND ([PL"& _ 
                "C_ONLINE_FLAG] = @Original_PLC_ONLINE_FLAG))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STAGE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_DATA_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_DATA_DM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_STATUS_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_DM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_ONLINE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ONLINE_FLAG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [T_PLC_MST] ([STAGE_CODE], [PLC_NET], [PLC_NODE], [PLC_UNIT], [READ_D"& _ 
                "M], [WRITE_DATA_DM], [WRITE_STATUS_DM], [PROCESS_NO], [PLC_ONLINE_FLAG]) VALUES "& _ 
                "(@STAGE_CODE, @PLC_NET, @PLC_NODE, @PLC_UNIT, @READ_DM, @WRITE_DATA_DM, @WRITE_S"& _ 
                "TATUS_DM, @PROCESS_NO, @PLC_ONLINE_FLAG);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PLC_ID, STAGE_CODE, PLC_NET, P"& _ 
                "LC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, PROCESS_NO, PLC_ONLI"& _ 
                "NE_FLAG FROM T_PLC_MST WHERE (PLC_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STAGE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_DATA_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_DATA_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_STATUS_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_ONLINE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ONLINE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [T_PLC_MST] SET [STAGE_CODE] = @STAGE_CODE, [PLC_NET] = @PLC_NET, [PLC_NOD"& _ 
                "E] = @PLC_NODE, [PLC_UNIT] = @PLC_UNIT, [READ_DM] = @READ_DM, [WRITE_DATA_DM] = "& _ 
                "@WRITE_DATA_DM, [WRITE_STATUS_DM] = @WRITE_STATUS_DM, [PROCESS_NO] = @PROCESS_NO"& _ 
                ", [PLC_ONLINE_FLAG] = @PLC_ONLINE_FLAG WHERE (([PLC_ID] = @Original_PLC_ID) AND "& _ 
                "([STAGE_CODE] = @Original_STAGE_CODE) AND ([PLC_NET] = @Original_PLC_NET) AND (["& _ 
                "PLC_NODE] = @Original_PLC_NODE) AND ([PLC_UNIT] = @Original_PLC_UNIT) AND ([READ"& _ 
                "_DM] = @Original_READ_DM) AND ([WRITE_DATA_DM] = @Original_WRITE_DATA_DM) AND (["& _ 
                "WRITE_STATUS_DM] = @Original_WRITE_STATUS_DM) AND ([PROCESS_NO] = @Original_PROC"& _ 
                "ESS_NO) AND ([PLC_ONLINE_FLAG] = @Original_PLC_ONLINE_FLAG));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PLC_ID, ST"& _ 
                "AGE_CODE, PLC_NET, PLC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, "& _ 
                "PROCESS_NO, PLC_ONLINE_FLAG FROM T_PLC_MST WHERE (PLC_ID = @PLC_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STAGE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@READ_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_DATA_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_DATA_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WRITE_STATUS_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_DM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_ONLINE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ONLINE_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STAGE_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_NET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_NODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_NODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_READ_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "READ_DM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_DATA_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_DATA_DM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WRITE_STATUS_DM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WRITE_STATUS_DM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROCESS_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLC_ONLINE_FLAG", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ONLINE_FLAG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLC_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     T_PLC_MST.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PLC_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TOP (@block) 0 AS INDEX_NO, PLC_ID, STAGE_CODE, PLC_NET, PLC_NODE, PLC"& _ 
                "_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PROCESS_"& _ 
                "NO, PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     plc_MST.PLC_ID, plc_MST.STAGE_CODE"& _ 
                ", plc_MST.PLC_NET, plc_MST.PLC_NODE, plc_MST.PLC_UNIT, plc_MST.READ_DM, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                        plc_MST.WRITE_DATA_DM, plc_MST.WRITE_STA"& _ 
                "TUS_DM, plc_MST.PROCESS_NO, plc_MST.PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       FROM"& _ 
                "          T_PLC_MST AS plc_MST "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (plc_MST.STAG"& _ 
                "E_CODE >= @stage_code)) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NOT (STAGE_CODE = @stage_code)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                    (NOT (PLC_ID < @plc_id))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY STAGE_CODE, PLC_ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stage_code", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@plc_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     COUNT(*) AS OffestBase"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (SELECT     PLC_ID, STAGE_CODE, P"& _ 
                "LC_NET, PLC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, PROCESS_NO,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                              PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "         FROM          (SELECT     PLC_ID, STAGE_CODE, PLC_NET, PLC_NODE, PLC_UN"& _ 
                "IT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                                                 PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "                                 FROM          T_PLC_MST AS plc_mst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "                                    WHERE      (STAGE_CODE <= @stage_code)) AS s"& _ 
                "c"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       WHERE      (NOT (STAGE_CODE = @stage_code)) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                                        (NOT (PLC_ID > @plc_id))) AS derivedtbl_"& _ 
                "1"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stage_code", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@plc_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "select TOP (@block) 0 AS INDEX_NO, sc.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"(SELECT plc_MST.PLC_ID, plc_MST.S"& _ 
                "TAGE_CODE, plc_MST.PLC_NET, plc_MST.PLC_NODE, plc_MST.PLC_UNIT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"plc_MST.R"& _ 
                "EAD_DM, plc_MST.WRITE_DATA_DM, plc_MST.WRITE_STATUS_DM, plc_MST.PROCESS_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"plc_MST.PLC_ONLINE_FLAG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"FROM t_plc_mst plc_mst "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"WHERE      (stage_code <="& _ 
                " @stage_code) ) AS sc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (NOT (stage_code = @stage_code)) OR (NOT (plc_id > "& _ 
                "@plc_id))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY stage_code DESC, plc_id DESC"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@block", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stage_code", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@plc_id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PLC_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "select top (1) *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from t_plc_mst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where process_no = @process_no"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@process_no", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PROCESS_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     T_PLC_MST.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PLC_MST"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where stage_code = @stage_code"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stage_code", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "STAGE_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPLC_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtPLC_MSTDataTable = New dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNextGroup(ByVal dataTable As dsCLIENT.dtPLC_MSTDataTable, ByVal block As Integer, ByVal stage_code As Integer, ByVal plc_id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(stage_code,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(plc_id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNextGroup(ByVal block As Integer, ByVal stage_code As Integer, ByVal plc_id As Integer) As dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(stage_code,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(plc_id,Integer)
            Dim dataTable As dsCLIENT.dtPLC_MSTDataTable = New dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPrevBtn(ByVal dataTable As dsCLIENT.dtPLC_MSTDataTable, ByVal block As Integer, ByVal stage_code As Integer, ByVal plc_id As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(stage_code,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(plc_id,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPrevBtn(ByVal block As Integer, ByVal stage_code As Integer, ByVal plc_id As Integer) As dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(block,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(stage_code,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(plc_id,Integer)
            Dim dataTable As dsCLIENT.dtPLC_MSTDataTable = New dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProcessNo(ByVal dataTable As dsCLIENT.dtPLC_MSTDataTable, ByVal process_no As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(process_no,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProcessNo(ByVal process_no As Integer) As dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(process_no,Integer)
            Dim dataTable As dsCLIENT.dtPLC_MSTDataTable = New dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByStageCode(ByVal dataTable As dsCLIENT.dtPLC_MSTDataTable, ByVal stage_code As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(stage_code,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByStageCode(ByVal stage_code As Integer) As dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(stage_code,Integer)
            Dim dataTable As dsCLIENT.dtPLC_MSTDataTable = New dsCLIENT.dtPLC_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsCLIENT.dtPLC_MSTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsCLIENT) As Integer
            Return Me.Adapter.Update(dataSet, "dtPLC_MST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PLC_ID As Integer, ByVal Original_STAGE_CODE As Integer, ByVal Original_PLC_NET As Integer, ByVal Original_PLC_NODE As Integer, ByVal Original_PLC_UNIT As Integer, ByVal Original_READ_DM As Integer, ByVal Original_WRITE_DATA_DM As Integer, ByVal Original_WRITE_STATUS_DM As Integer, ByVal Original_PROCESS_NO As Integer, ByVal Original_PLC_ONLINE_FLAG As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PLC_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_STAGE_CODE,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PLC_NET,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PLC_NODE,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PLC_UNIT,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_READ_DM,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_WRITE_DATA_DM,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_WRITE_STATUS_DM,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PLC_ONLINE_FLAG,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal STAGE_CODE As Integer, ByVal PLC_NET As Integer, ByVal PLC_NODE As Integer, ByVal PLC_UNIT As Integer, ByVal READ_DM As Integer, ByVal WRITE_DATA_DM As Integer, ByVal WRITE_STATUS_DM As Integer, ByVal PROCESS_NO As Integer, ByVal PLC_ONLINE_FLAG As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(STAGE_CODE,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PLC_NET,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PLC_NODE,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PLC_UNIT,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(READ_DM,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(WRITE_DATA_DM,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(WRITE_STATUS_DM,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(PLC_ONLINE_FLAG,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal STAGE_CODE As Integer,  _
                    ByVal PLC_NET As Integer,  _
                    ByVal PLC_NODE As Integer,  _
                    ByVal PLC_UNIT As Integer,  _
                    ByVal READ_DM As Integer,  _
                    ByVal WRITE_DATA_DM As Integer,  _
                    ByVal WRITE_STATUS_DM As Integer,  _
                    ByVal PROCESS_NO As Integer,  _
                    ByVal PLC_ONLINE_FLAG As Boolean,  _
                    ByVal Original_PLC_ID As Integer,  _
                    ByVal Original_STAGE_CODE As Integer,  _
                    ByVal Original_PLC_NET As Integer,  _
                    ByVal Original_PLC_NODE As Integer,  _
                    ByVal Original_PLC_UNIT As Integer,  _
                    ByVal Original_READ_DM As Integer,  _
                    ByVal Original_WRITE_DATA_DM As Integer,  _
                    ByVal Original_WRITE_STATUS_DM As Integer,  _
                    ByVal Original_PROCESS_NO As Integer,  _
                    ByVal Original_PLC_ONLINE_FLAG As Boolean,  _
                    ByVal PLC_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STAGE_CODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PLC_NET,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PLC_NODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PLC_UNIT,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(READ_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(WRITE_DATA_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(WRITE_STATUS_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PLC_ONLINE_FLAG,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PLC_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_STAGE_CODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PLC_NET,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PLC_NODE,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PLC_UNIT,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_READ_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_WRITE_DATA_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_WRITE_STATUS_DM,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_PROCESS_NO,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_PLC_ONLINE_FLAG,Boolean)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(PLC_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal STAGE_CODE As Integer,  _
                    ByVal PLC_NET As Integer,  _
                    ByVal PLC_NODE As Integer,  _
                    ByVal PLC_UNIT As Integer,  _
                    ByVal READ_DM As Integer,  _
                    ByVal WRITE_DATA_DM As Integer,  _
                    ByVal WRITE_STATUS_DM As Integer,  _
                    ByVal PROCESS_NO As Integer,  _
                    ByVal PLC_ONLINE_FLAG As Boolean,  _
                    ByVal Original_PLC_ID As Integer,  _
                    ByVal Original_STAGE_CODE As Integer,  _
                    ByVal Original_PLC_NET As Integer,  _
                    ByVal Original_PLC_NODE As Integer,  _
                    ByVal Original_PLC_UNIT As Integer,  _
                    ByVal Original_READ_DM As Integer,  _
                    ByVal Original_WRITE_DATA_DM As Integer,  _
                    ByVal Original_WRITE_STATUS_DM As Integer,  _
                    ByVal Original_PROCESS_NO As Integer,  _
                    ByVal Original_PLC_ONLINE_FLAG As Boolean) As Integer
            Return Me.Update(STAGE_CODE, PLC_NET, PLC_NODE, PLC_UNIT, READ_DM, WRITE_DATA_DM, WRITE_STATUS_DM, PROCESS_NO, PLC_ONLINE_FLAG, Original_PLC_ID, Original_STAGE_CODE, Original_PLC_NET, Original_PLC_NODE, Original_PLC_UNIT, Original_READ_DM, Original_WRITE_DATA_DM, Original_WRITE_STATUS_DM, Original_PROCESS_NO, Original_PLC_ONLINE_FLAG, Original_PLC_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function FillByOffsetBase(ByVal stage_code As Integer, ByVal plc_id As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(stage_code,Integer)
            command.Parameters(1).Value = CType(plc_id,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class taPROCESS_GROUP_MST
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPROCESS_GROUP_MST"
            tableMapping.ColumnMappings.Add("PROCESS_GROUP_ID", "PROCESS_GROUP_ID")
            tableMapping.ColumnMappings.Add("PROCESS_GROUP_SEQ", "PROCESS_GROUP_SEQ")
            tableMapping.ColumnMappings.Add("PROCESS_GROUP_NAME", "PROCESS_GROUP_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.PSIS_CLIENT.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     T_PROCESS_GROUP_MST.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         T_PROCESS_GROUP_MST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select * from T_PROCESS_GROUP_MST where PROCESS_GROUP_SEQ <> 99"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCLIENT.dtPROCESS_GROUP_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCLIENT.dtPROCESS_GROUP_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCLIENT.dtPROCESS_GROUP_MSTDataTable = New dsCLIENT.dtPROCESS_GROUP_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByProcGroupSeq(ByVal dataTable As dsCLIENT.dtPROCESS_GROUP_MSTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByProcGroupSeq() As dsCLIENT.dtPROCESS_GROUP_MSTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As dsCLIENT.dtPROCESS_GROUP_MSTDataTable = New dsCLIENT.dtPROCESS_GROUP_MSTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _taPROCESS_MST As taPROCESS_MST
        
        Private _taLOG_DAT As taLOG_DAT
        
        Private _taPAINT_CELL As taPAINT_CELL
        
        Private _taWBS_ON As taWBS_ON
        
        Private _taSKIT_MST As taSKIT_MST
        
        Private _taOPTION_MST As taOPTION_MST
        
        Private _taMODEL_OPTION_ROW As taMODEL_OPTION_ROW
        
        Private _taMODEL_OPTION_CELL As taMODEL_OPTION_CELL
        
        Private _taPROCESS_OPTION_CELL As taPROCESS_OPTION_CELL
        
        Private _taPROCESS_LINKAGE As taPROCESS_LINKAGE
        
        Private _taPLC_MST As taPLC_MST
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPROCESS_MST() As taPROCESS_MST
            Get
                Return Me._taPROCESS_MST
            End Get
            Set
                Me._taPROCESS_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taLOG_DAT() As taLOG_DAT
            Get
                Return Me._taLOG_DAT
            End Get
            Set
                Me._taLOG_DAT = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPAINT_CELL() As taPAINT_CELL
            Get
                Return Me._taPAINT_CELL
            End Get
            Set
                Me._taPAINT_CELL = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taWBS_ON() As taWBS_ON
            Get
                Return Me._taWBS_ON
            End Get
            Set
                Me._taWBS_ON = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taSKIT_MST() As taSKIT_MST
            Get
                Return Me._taSKIT_MST
            End Get
            Set
                Me._taSKIT_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taOPTION_MST() As taOPTION_MST
            Get
                Return Me._taOPTION_MST
            End Get
            Set
                Me._taOPTION_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taMODEL_OPTION_ROW() As taMODEL_OPTION_ROW
            Get
                Return Me._taMODEL_OPTION_ROW
            End Get
            Set
                Me._taMODEL_OPTION_ROW = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taMODEL_OPTION_CELL() As taMODEL_OPTION_CELL
            Get
                Return Me._taMODEL_OPTION_CELL
            End Get
            Set
                Me._taMODEL_OPTION_CELL = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPROCESS_OPTION_CELL() As taPROCESS_OPTION_CELL
            Get
                Return Me._taPROCESS_OPTION_CELL
            End Get
            Set
                Me._taPROCESS_OPTION_CELL = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPROCESS_LINKAGE() As taPROCESS_LINKAGE
            Get
                Return Me._taPROCESS_LINKAGE
            End Get
            Set
                Me._taPROCESS_LINKAGE = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property taPLC_MST() As taPLC_MST
            Get
                Return Me._taPLC_MST
            End Get
            Set
                Me._taPLC_MST = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._taPROCESS_MST) Is Nothing)  _
                            AndAlso (Not (Me._taPROCESS_MST.Connection) Is Nothing)) Then
                    Return Me._taPROCESS_MST.Connection
                End If
                If ((Not (Me._taLOG_DAT) Is Nothing)  _
                            AndAlso (Not (Me._taLOG_DAT.Connection) Is Nothing)) Then
                    Return Me._taLOG_DAT.Connection
                End If
                If ((Not (Me._taPAINT_CELL) Is Nothing)  _
                            AndAlso (Not (Me._taPAINT_CELL.Connection) Is Nothing)) Then
                    Return Me._taPAINT_CELL.Connection
                End If
                If ((Not (Me._taWBS_ON) Is Nothing)  _
                            AndAlso (Not (Me._taWBS_ON.Connection) Is Nothing)) Then
                    Return Me._taWBS_ON.Connection
                End If
                If ((Not (Me._taSKIT_MST) Is Nothing)  _
                            AndAlso (Not (Me._taSKIT_MST.Connection) Is Nothing)) Then
                    Return Me._taSKIT_MST.Connection
                End If
                If ((Not (Me._taOPTION_MST) Is Nothing)  _
                            AndAlso (Not (Me._taOPTION_MST.Connection) Is Nothing)) Then
                    Return Me._taOPTION_MST.Connection
                End If
                If ((Not (Me._taMODEL_OPTION_ROW) Is Nothing)  _
                            AndAlso (Not (Me._taMODEL_OPTION_ROW.Connection) Is Nothing)) Then
                    Return Me._taMODEL_OPTION_ROW.Connection
                End If
                If ((Not (Me._taMODEL_OPTION_CELL) Is Nothing)  _
                            AndAlso (Not (Me._taMODEL_OPTION_CELL.Connection) Is Nothing)) Then
                    Return Me._taMODEL_OPTION_CELL.Connection
                End If
                If ((Not (Me._taPROCESS_OPTION_CELL) Is Nothing)  _
                            AndAlso (Not (Me._taPROCESS_OPTION_CELL.Connection) Is Nothing)) Then
                    Return Me._taPROCESS_OPTION_CELL.Connection
                End If
                If ((Not (Me._taPROCESS_LINKAGE) Is Nothing)  _
                            AndAlso (Not (Me._taPROCESS_LINKAGE.Connection) Is Nothing)) Then
                    Return Me._taPROCESS_LINKAGE.Connection
                End If
                If ((Not (Me._taPLC_MST) Is Nothing)  _
                            AndAlso (Not (Me._taPLC_MST.Connection) Is Nothing)) Then
                    Return Me._taPLC_MST.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._taPROCESS_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taLOG_DAT) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPAINT_CELL) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taWBS_ON) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taSKIT_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taOPTION_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._taPLC_MST) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsCLIENT, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._taOPTION_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtOPTION_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taOPTION_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taSKIT_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtSKIT_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taSKIT_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPROCESS_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPROCESS_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_ROW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_ROW.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPROCESS_OPTION_CELL.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_LINKAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPROCESS_LINKAGE.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPLC_MST) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPLC_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPLC_MST.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taWBS_ON) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtWBS_ON.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taWBS_ON.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taPAINT_CELL) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtPAINT_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taPAINT_CELL.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_CELL.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._taLOG_DAT) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtLOG_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._taLOG_DAT.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsCLIENT, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._taOPTION_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtOPTION_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taOPTION_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taSKIT_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtSKIT_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taSKIT_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPROCESS_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPROCESS_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_ROW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_ROW.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPROCESS_OPTION_CELL.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_LINKAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPROCESS_LINKAGE.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPLC_MST) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPLC_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPLC_MST.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taWBS_ON) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtWBS_ON.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taWBS_ON.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taPAINT_CELL) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtPAINT_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taPAINT_CELL.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_CELL.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._taLOG_DAT) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtLOG_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._taLOG_DAT.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsCLIENT, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._taLOG_DAT) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtLOG_DAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taLOG_DAT.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_CELL.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPAINT_CELL) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPAINT_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPAINT_CELL.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taWBS_ON) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtWBS_ON.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taWBS_ON.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPLC_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPLC_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPLC_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_LINKAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPROCESS_LINKAGE.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_OPTION_CELL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPROCESS_OPTION_CELL.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtMODEL_OPTION_ROW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taMODEL_OPTION_ROW.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taPROCESS_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtPROCESS_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taPROCESS_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taSKIT_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtSKIT_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taSKIT_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._taOPTION_MST) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtOPTION_MST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._taOPTION_MST.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsCLIENT) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._taPROCESS_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPROCESS_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taLOG_DAT) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taLOG_DAT.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPAINT_CELL) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPAINT_CELL.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taWBS_ON) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taWBS_ON.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taSKIT_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taSKIT_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taOPTION_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taOPTION_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taMODEL_OPTION_ROW) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taMODEL_OPTION_ROW.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taMODEL_OPTION_CELL) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taMODEL_OPTION_CELL.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPROCESS_OPTION_CELL) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPROCESS_OPTION_CELL.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPROCESS_LINKAGE) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPROCESS_LINKAGE.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._taPLC_MST) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._taPLC_MST.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._taPROCESS_MST) Is Nothing) Then
                    revertConnections.Add(Me._taPROCESS_MST, Me._taPROCESS_MST.Connection)
                    Me._taPROCESS_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPROCESS_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPROCESS_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPROCESS_MST.Adapter)
                    End If
                End If
                If (Not (Me._taLOG_DAT) Is Nothing) Then
                    revertConnections.Add(Me._taLOG_DAT, Me._taLOG_DAT.Connection)
                    Me._taLOG_DAT.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taLOG_DAT.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taLOG_DAT.Adapter.AcceptChangesDuringUpdate Then
                        Me._taLOG_DAT.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taLOG_DAT.Adapter)
                    End If
                End If
                If (Not (Me._taPAINT_CELL) Is Nothing) Then
                    revertConnections.Add(Me._taPAINT_CELL, Me._taPAINT_CELL.Connection)
                    Me._taPAINT_CELL.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPAINT_CELL.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPAINT_CELL.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPAINT_CELL.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPAINT_CELL.Adapter)
                    End If
                End If
                If (Not (Me._taWBS_ON) Is Nothing) Then
                    revertConnections.Add(Me._taWBS_ON, Me._taWBS_ON.Connection)
                    Me._taWBS_ON.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taWBS_ON.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taWBS_ON.Adapter.AcceptChangesDuringUpdate Then
                        Me._taWBS_ON.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taWBS_ON.Adapter)
                    End If
                End If
                If (Not (Me._taSKIT_MST) Is Nothing) Then
                    revertConnections.Add(Me._taSKIT_MST, Me._taSKIT_MST.Connection)
                    Me._taSKIT_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taSKIT_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taSKIT_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taSKIT_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taSKIT_MST.Adapter)
                    End If
                End If
                If (Not (Me._taOPTION_MST) Is Nothing) Then
                    revertConnections.Add(Me._taOPTION_MST, Me._taOPTION_MST.Connection)
                    Me._taOPTION_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taOPTION_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taOPTION_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taOPTION_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taOPTION_MST.Adapter)
                    End If
                End If
                If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                    revertConnections.Add(Me._taMODEL_OPTION_ROW, Me._taMODEL_OPTION_ROW.Connection)
                    Me._taMODEL_OPTION_ROW.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taMODEL_OPTION_ROW.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taMODEL_OPTION_ROW.Adapter.AcceptChangesDuringUpdate Then
                        Me._taMODEL_OPTION_ROW.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taMODEL_OPTION_ROW.Adapter)
                    End If
                End If
                If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                    revertConnections.Add(Me._taMODEL_OPTION_CELL, Me._taMODEL_OPTION_CELL.Connection)
                    Me._taMODEL_OPTION_CELL.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taMODEL_OPTION_CELL.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taMODEL_OPTION_CELL.Adapter.AcceptChangesDuringUpdate Then
                        Me._taMODEL_OPTION_CELL.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taMODEL_OPTION_CELL.Adapter)
                    End If
                End If
                If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                    revertConnections.Add(Me._taPROCESS_OPTION_CELL, Me._taPROCESS_OPTION_CELL.Connection)
                    Me._taPROCESS_OPTION_CELL.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_OPTION_CELL.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPROCESS_OPTION_CELL.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPROCESS_OPTION_CELL.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPROCESS_OPTION_CELL.Adapter)
                    End If
                End If
                If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                    revertConnections.Add(Me._taPROCESS_LINKAGE, Me._taPROCESS_LINKAGE.Connection)
                    Me._taPROCESS_LINKAGE.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_LINKAGE.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPROCESS_LINKAGE.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPROCESS_LINKAGE.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPROCESS_LINKAGE.Adapter)
                    End If
                End If
                If (Not (Me._taPLC_MST) Is Nothing) Then
                    revertConnections.Add(Me._taPLC_MST, Me._taPLC_MST.Connection)
                    Me._taPLC_MST.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._taPLC_MST.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._taPLC_MST.Adapter.AcceptChangesDuringUpdate Then
                        Me._taPLC_MST.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._taPLC_MST.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._taPROCESS_MST) Is Nothing) Then
                    Me._taPROCESS_MST.Connection = CType(revertConnections(Me._taPROCESS_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_MST.Transaction = Nothing
                End If
                If (Not (Me._taLOG_DAT) Is Nothing) Then
                    Me._taLOG_DAT.Connection = CType(revertConnections(Me._taLOG_DAT),Global.System.Data.SqlClient.SqlConnection)
                    Me._taLOG_DAT.Transaction = Nothing
                End If
                If (Not (Me._taPAINT_CELL) Is Nothing) Then
                    Me._taPAINT_CELL.Connection = CType(revertConnections(Me._taPAINT_CELL),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPAINT_CELL.Transaction = Nothing
                End If
                If (Not (Me._taWBS_ON) Is Nothing) Then
                    Me._taWBS_ON.Connection = CType(revertConnections(Me._taWBS_ON),Global.System.Data.SqlClient.SqlConnection)
                    Me._taWBS_ON.Transaction = Nothing
                End If
                If (Not (Me._taSKIT_MST) Is Nothing) Then
                    Me._taSKIT_MST.Connection = CType(revertConnections(Me._taSKIT_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taSKIT_MST.Transaction = Nothing
                End If
                If (Not (Me._taOPTION_MST) Is Nothing) Then
                    Me._taOPTION_MST.Connection = CType(revertConnections(Me._taOPTION_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taOPTION_MST.Transaction = Nothing
                End If
                If (Not (Me._taMODEL_OPTION_ROW) Is Nothing) Then
                    Me._taMODEL_OPTION_ROW.Connection = CType(revertConnections(Me._taMODEL_OPTION_ROW),Global.System.Data.SqlClient.SqlConnection)
                    Me._taMODEL_OPTION_ROW.Transaction = Nothing
                End If
                If (Not (Me._taMODEL_OPTION_CELL) Is Nothing) Then
                    Me._taMODEL_OPTION_CELL.Connection = CType(revertConnections(Me._taMODEL_OPTION_CELL),Global.System.Data.SqlClient.SqlConnection)
                    Me._taMODEL_OPTION_CELL.Transaction = Nothing
                End If
                If (Not (Me._taPROCESS_OPTION_CELL) Is Nothing) Then
                    Me._taPROCESS_OPTION_CELL.Connection = CType(revertConnections(Me._taPROCESS_OPTION_CELL),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_OPTION_CELL.Transaction = Nothing
                End If
                If (Not (Me._taPROCESS_LINKAGE) Is Nothing) Then
                    Me._taPROCESS_LINKAGE.Connection = CType(revertConnections(Me._taPROCESS_LINKAGE),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPROCESS_LINKAGE.Transaction = Nothing
                End If
                If (Not (Me._taPLC_MST) Is Nothing) Then
                    Me._taPLC_MST.Connection = CType(revertConnections(Me._taPLC_MST),Global.System.Data.SqlClient.SqlConnection)
                    Me._taPLC_MST.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
